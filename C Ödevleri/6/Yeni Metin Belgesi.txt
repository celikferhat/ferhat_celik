#include <stdio.h>
#define gridSize 4

/*This is a minesweeper game*/

/*First we copy init grid to our grid array*/
void initGrid(cell grid[][gridSize])
{
    int row, col;
    cell initialize[gridSize][gridSize] = {
        {closedMined, closedEmpty, closedEmpty, closedEmpty},
        {closedEmpty, closedEmpty, closedEmpty, closedMined},
        {closedEmpty, closedMined, closedEmpty, closedMined},
        {closedEmpty, closedEmpty, closedEmpty, closedEmpty}
    };
    for (row = 0; row < gridSize; row++)
    {
      for (col = 0; col < gridSize; col++)
      {
        grid[row][col] = initialize[row][col];
	}
	}
}


/*we write this function for print our array*/

void printGrid (cell grid[][gridSize])
{

	int i,j;
	j=0;

	for(i=0;gridSize>i;i++)
	{
		

		for(j=0;gridSize>j;j++)
		{
			if(grid[i][j] == flaggedEmpty || grid[i][j] == flaggedMined)
			{
				printf("f");
			}
			if(grid[i][j] == closedEmpty || grid[i][j] == closedMined )
			{
				printf(".");
			}
			if(grid[i][j] == mined)
			
				printf("m");
			
			if(grid[i][j] == empty) 
				printf("e");
			
		}
		printf("\n");
	}

	
}

/*This function open box if there is mine in the box game teminate,but if there is not in mine open the box and its around empty boxes*/
int openCell(cell grid[][gridSize], int x, int y)

{
	int counter=0;
	
	if(isLocationLegal(x,y) == 1 && grid[x][y] != empty)
	{
		if(grid[x][y] == closedMined)
		{
			
			grid[x][y] = mined;
			
		}

		if(grid[x][y] == flaggedEmpty )
		{
			grid[x][y]=closedEmpty;

		}
		if(grid[x][y] == flaggedMined)
		{
			grid[x][y] = closedMined;
		}

		if(grid[x][y] == closedEmpty)
		{
			

			if(isLocationLegal(x-1,y-1) == 1 && grid[x-1][y-1] == closedEmpty)
			{
				grid[x-1][y-1]=empty;
				counter++;
			}

			if(isLocationLegal(x-1,y) == 1 && grid[x-1][y] == closedEmpty)
			{
				grid[x-1][y]=empty;
				counter++;
			}

			if(isLocationLegal(x-1,y+1) == 1 && grid[x-1][y+1] == closedEmpty)
			{
				grid[x-1][y+1]=empty;
				counter++;
			}

			if(isLocationLegal(x,y-1) == 1 && grid[x][y-1] == closedEmpty)
			{
				grid[x][y-1]=empty;
				counter++;
			}

			if(isLocationLegal(x,y) == 1 && grid[x][y] == closedEmpty)
			{
				grid[x][y]=empty;
				counter++;
			}

			if(isLocationLegal(x,y+1) == 1 && grid[x][y+1] == closedEmpty)
			{
				grid[x][y+1]=empty;
				counter++;
			}

			if(isLocationLegal(x+1,y-1) == 1 && grid[x+1][y-1] == closedEmpty)
			{
				grid[x+1][y-1]=empty;
				counter++;
			}

			if(isLocationLegal(x+1,y) == 1 && grid[x+1][y] == closedEmpty)
			{
				grid[x+1][y]=empty;
				counter++;
			}

			if(isLocationLegal(x+1,y+1) == 1 && grid[x+1][y+1] == closedEmpty)
			{
				grid[x+1][y+1]=empty;
				counter++;
			}

		    printf("opened empty cell: %d\n" ,counter);


			return 1;


		}
		else 
			return -2;

	}
	else 
		return -2;
	

}
/*we put flag with this fuction*/
void flagCell(cell grid[gridSize][gridSize], int x, int y)
{
	
	
	if(isLocationLegal(x,y) == 1 && (grid[x][y] != flaggedEmpty  || grid[x][y] != flaggedMined) )
	{
		if(grid[x][y] == closedEmpty)
		{
		grid[x][y]=flaggedEmpty;
		}
		if(grid[x][y] == closedMined)
		{
		grid[x][y] = flaggedMined;
		}
		
	}


}
/*Used to check if the cell is empty*/
int isCellEmpty(cell grid[][gridSize], int x, int y)
{
	
	
	if(isLocationLegal(x,y) == 1){
	if(grid[x][y] != closedMined)
	{
		return 1;
	}
	else
		return 0;
	}
	else
		return 0;
}
/*I wrote this function to see if the location is available*/
int isLocationLegal(int x, int y)
{
	if(x <gridSize && y < gridSize && x >= 0 && y >= 0)
	{
		return 1;
	}
	else
		return 0;
}


/*Counter and other things we did here*/

int asMain()
{
	int a,b,i,j,x,y,k,choose,counter;

	 cell grid[gridSize][gridSize];
	 initGrid(grid);
	
	i=0;
	j=0;
	k=0;
	
	counter=0;

	
	while(k==0){
	
		while(gridSize*gridSize>i)
		{


			if(grid[0][i] == empty)
			{
				j++;
			}

			i++;
		}
		i=0;

		if(grid[x][y] == mined)
		{
			for(a=0;gridSize>a;a++)
	    	{

	        	for(b=0;gridSize>b;b++)
	        	{
			
			
		        	if(grid[a][b] == mined || grid[a][b] == closedMined )
			        	printf("m");
					else if(grid[a][b] == flaggedMined)
						printf("m");
		        	else if(grid[a][b] == empty || grid[a][b] == closedEmpty) 
		            	printf("e");			
	        	}
	        	printf("\n");
	    	}
				
				printf("\n");
			printf("you lose  \n");
			printf("Number of moves: %d\n",counter);
			k=1;
		}
		
		if(j==12)
			{
			for(a=0;gridSize>b;b++)
	    	{

	        	for(b=0;gridSize>b;b++)
	        	{
			
			
		        	if(grid[a][b] == mined || grid[a][b] == closedMined )
			
			        	printf("m");
			        else if(grid[a][b] == flaggedMined)
			        	printf("m");
			
		        	else if(grid[a][b] == empty || grid[a][b] == closedEmpty) 
		            	printf("e");			
	        	}
	        	printf("\n");
	    	}
				
				
				
				printf("\n");
				printf("You win\n");
				printf("Number of moves: %d\n",counter);
				k=1;
			}

			j=0;
			if(k == 0)
			printGrid(grid);

		printf("select open to 1 or flag to 2 :");
		if(k==0)
		scanf("%d",&choose);
		switch(choose)
		{
			case 1:
			if(k==0)
			{
			scanf("%d%d",&x,&y);

			openCell(grid,x,y);
			}
			break;
			case 2:
			if(k==0){
			scanf("%d%d",&x,&y);
			flagCell(grid,x,y);
			}
			default:
			break;

		}
			printf("\n");
			counter++;
		}
	
	

	return 0;
	
}