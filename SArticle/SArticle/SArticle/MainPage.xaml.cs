using HtmlAgilityPack;using SArticle.Controls;using System;using System.Threading.Tasks;using Xamarin.Forms;namespace SArticle{    public partial class MainPage : ContentPage    {                      ScrollView scrl;        StackLayout s2;        String web_address;        Label f_yuzde;        public MainPage(string url_string)        {            InitializeComponent();            web_address = url_string;                    }        protected async Task WaitAndExecute(int milisec, Action actionToExecute)        {            await Task.Delay(milisec);            actionToExecute();        }        protected async override void OnAppearing()        {            base.OnAppearing();                       await WaitAndExecute(1000, () =>            {                Load_Content();            });        }        void white_background(object sender, EventArgs args) {            s2.BackgroundColor = Color.White;            foreach (var child in s2.Children)            {                switch (child)                {                    case Label l:                        l.TextColor = Color.Black;                        break;                }            }        }        void bej_background(object sender, EventArgs args)        {            s2.BackgroundColor = Color.FromHex("#f6efdc");            foreach (var child in s2.Children)            {                switch (child)                {                    case Label l:                        l.TextColor = Color.Black;                        break;                }            }        }        void gray_background(object sender, EventArgs args)        {            s2.BackgroundColor = Color.FromHex("#585858") ;            foreach (var child in s2.Children)            {                switch (child)                {                    case Label l:                        l.TextColor = Color.White;                        break;                }            }        }        void black_background(object sender, EventArgs args)        {            s2.BackgroundColor = Color.Black;            foreach (var child in s2.Children)            {                switch (child)                {                    case Label l:                        l.TextColor = Color.White;                        break;                }            }        }        void Load_Content()        {            scrl = new ScrollView();            Grid settings = settings_page();            Frame setting_frame = new Frame();            setting_frame.IsVisible = false;            setting_frame.HasShadow = true;            setting_frame.CornerRadius = 10;            setting_frame.Padding = 0;            setting_frame.BackgroundColor = Color.FromHex("#2c2c2c");            setting_frame.Content = settings;                        AbsoluteLayout layout = new AbsoluteLayout            {                BackgroundColor = Color.Black,                            };            layout.Children.Add(scrl, new Rectangle(0, 0, 1, 1), AbsoluteLayoutFlags.All);            layout.Children.Add(setting_frame, new Rectangle(0.5, 1, AbsoluteLayout.AutoSize, AbsoluteLayout.AutoSize), AbsoluteLayoutFlags.PositionProportional);            s2 = new StackLayout();            s2.Padding = 5;            s2.BackgroundColor = Color.White;            s2.HorizontalOptions = LayoutOptions.FillAndExpand;            s2.VerticalOptions = LayoutOptions.FillAndExpand;            var show_settings_tap = new TapGestureRecognizer();            show_settings_tap.Tapped += (s, e) =>            {                setting_frame.IsVisible = !setting_frame.IsVisible;                            };                        s2.GestureRecognizers.Add(show_settings_tap);            SmartReader.Reader sr = new SmartReader.Reader(web_address);                        SmartReader.Article article = sr.GetArticle();            if (article.IsReadable)            {                var content = article.Content.Replace("&nbsp;", " ");                Label title = new Label();                title.FontSize = 22;                                title.TextColor = Color.Black;                title.Text = article.Title;                s2.Children.Add(title);                Label header = new Label();                header.FontSize = 20;                header.TextColor = Color.Black;                header.Text = article.Excerpt;                s2.Children.Add(header);                Label site_name = new Label                {                    Text = article.SiteName                };                site_name.HorizontalOptions = LayoutOptions.StartAndExpand;                s2.Children.Add(site_name);                s2.Children.Add(new BoxView() { Color = Color.FromHex("#D5D8DC"), WidthRequest = 100, HeightRequest = 1 });                s2.Children.Add(new BoxView() { Color = Color.Transparent, WidthRequest = 100, HeightRequest = 5 });                var doc = new HtmlDocument();                doc.LoadHtml(content);                foreach (HtmlNode inner in doc.DocumentNode.SelectNodes("//*"))                {                    if (inner.Name.Equals("p") || inner.Name.Equals("li"))                    {                        if (inner.InnerHtml.Contains("img"))                        {                            continue;                        }                        SelectableLabel l1 = new SelectableLabel();                                                l1.FontSize = 18;                        l1.TextColor = Color.Black;                        l1.Text = inner.InnerText;                        s2.Children.Add(l1);                    }                    else if (inner.Name.Equals("h1") || inner.Name.Equals("h2") || inner.Name.Equals("h3") || inner.Name.Equals("h4") || inner.Name.Equals("h5") || inner.Name.Equals("h6"))                    {                        Label l1 = new Label();                        l1.FontSize = 20;                        l1.TextColor = Color.Black;                        l1.Text = inner.InnerText;                        s2.Children.Add(l1);                    }                    else if (inner.Name.Equals("img"))                    {                        if (inner.GetAttributeValue("data-src", null) != null)                        {                            string src = inner.GetAttributeValue("data-src", null);                            var webImage = new ImageEx { AspectEx = AspectEx.Uniform };                            webImage.Source = ImageSource.FromUri(new Uri(src));                            s2.Children.Add(webImage);                        }                        else if (inner.GetAttributeValue("src", null) != null)                        {                            string src = inner.GetAttributeValue("src", "");                            var webImage = new ImageEx { AspectEx = AspectEx.Uniform };                            webImage.Source = ImageSource.FromUri(new Uri(src));                            s2.Children.Add(webImage);                        }                    }                }                Content = layout;            }            else {                Label nrd = new Label();                nrd.Text = "No readable content found!";                nrd.HorizontalOptions = LayoutOptions.Center;                nrd.VerticalOptions = LayoutOptions.Center;                Content = nrd;            }            scrl.VerticalOptions = LayoutOptions.FillAndExpand;            scrl.Content = s2;                             }        Grid settings_page() {            Grid settings = new Grid { Padding = 5, BackgroundColor = Color.FromHex("#2c2c2c"), IsVisible = true };            settings.Margin = 5;            settings.WidthRequest = (Application.Current.MainPage.Width / 4) * 3;            settings.HeightRequest = (Application.Current.MainPage.Height / 4);            ImageButton white_bg = new ImageButton { CornerRadius = 5, Aspect = Aspect.AspectFill, Margin = 0, Source = "white.png", BackgroundColor = Color.Transparent };            ImageButton bej_bg = new ImageButton { CornerRadius = 5, Aspect = Aspect.AspectFill, Margin = 0, Source = "bej.png", BackgroundColor = Color.Transparent };            ImageButton gray_bg = new ImageButton { CornerRadius = 5, Aspect = Aspect.AspectFill, Margin = 0, Source = "gray.png", BackgroundColor = Color.Transparent };            ImageButton black_bg = new ImageButton { CornerRadius = 5, Aspect = Aspect.AspectFill, Margin = 0, Source = "black.png", BackgroundColor = Color.Transparent };            white_bg.Clicked += white_background;            bej_bg.Clicked += bej_background;            gray_bg.Clicked += gray_background;            black_bg.Clicked += black_background;            settings.Children.Add(white_bg, 0, 1);            settings.Children.Add(bej_bg, 1, 1);            settings.Children.Add(gray_bg, 2, 1);            settings.Children.Add(black_bg, 3, 1);            ImageButton f_inc = new ImageButton { Aspect = Aspect.AspectFit, Padding = 0, Source = "f_inc.png", BackgroundColor = Color.Transparent };            ImageButton f_dec = new ImageButton { Aspect = Aspect.AspectFit, Padding = 0, Source = "f_dec.png", BackgroundColor = Color.Transparent };            f_yuzde = new Label { Text = "100", TextColor = Color.White, VerticalOptions = LayoutOptions.Center };            f_inc.Clicked += fs_up;            f_dec.Clicked += fs_down;                      Frame font_frame = new Frame();            font_frame.HasShadow = false;            font_frame.Margin = new Thickness(0, 10, 0, 10);            font_frame.CornerRadius = 40;            font_frame.BackgroundColor = Color.FromHex("#1e1e1e");            Grid fgrid = new Grid { BackgroundColor = Color.Transparent };            fgrid.Children.Add(f_dec, 0, 0);            fgrid.Children.Add(f_yuzde, 1, 0);            fgrid.Children.Add(f_inc, 2, 0);            font_frame.Content = fgrid;            settings.Children.Add(font_frame, 2, 0);            Grid.SetColumnSpan(font_frame, 2);            return settings;        }        void fs_up(object sender, EventArgs args) {            var yuzde = Int32.Parse(f_yuzde.Text);            if (yuzde <= 140)            {                yuzde += 10;                foreach (var child in s2.Children)                {                    switch (child)                    {                        case Label l:                            l.FontSize += 2;                             break;                    }                }                }            f_yuzde.Text = yuzde.ToString();        }        void fs_down(object sender, EventArgs args)        {            var yuzde = Int32.Parse(f_yuzde.Text);            if (yuzde >= 60)            {                yuzde -= 10;                foreach (var child in s2.Children)                {                    switch (child)                    {                        case Label l:                            l.FontSize -= 2;                            break;                    }                }            }            f_yuzde.Text = yuzde.ToString();        }    }}