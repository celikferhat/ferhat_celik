
rgb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005218  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b8c  080053b8  080053b8  000153b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f44  08005f44  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005f44  08005f44  00015f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f4c  08005f4c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f4c  08005f4c  00015f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f50  08005f50  00015f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  200001dc  08006130  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009f0  08006130  000209f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b58f  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b59  00000000  00000000  0002b79b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c28  00000000  00000000  0002d2f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b50  00000000  00000000  0002df20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015901  00000000  00000000  0002ea70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000088d1  00000000  00000000  00044371  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cbca  00000000  00000000  0004cc42  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d980c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a2c  00000000  00000000  000d9888  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080053a0 	.word	0x080053a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080053a0 	.word	0x080053a0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <set_rgb>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_rgb (uint8_t red, uint8_t green, uint8_t blue)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
 800059a:	460b      	mov	r3, r1
 800059c:	71bb      	strb	r3, [r7, #6]
 800059e:	4613      	mov	r3, r2
 80005a0:	717b      	strb	r3, [r7, #5]
	htim1.Instance->CCR1 = red;
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <set_rgb+0x38>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	79fa      	ldrb	r2, [r7, #7]
 80005a8:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = green;
 80005aa:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <set_rgb+0x38>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	79ba      	ldrb	r2, [r7, #6]
 80005b0:	639a      	str	r2, [r3, #56]	; 0x38
	htim1.Instance->CCR3 = blue;
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <set_rgb+0x38>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	797a      	ldrb	r2, [r7, #5]
 80005b8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	200008e0 	.word	0x200008e0

080005cc <setfreq>:



int setfreq(int freq) // 1 to 3000 Hz
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
int period = 60000 / freq; // compute period as function of 60KHz ticks
 80005d4:	f64e 2260 	movw	r2, #60000	; 0xea60
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	fb92 f3f3 	sdiv	r3, r2, r3
 80005de:	60fb      	str	r3, [r7, #12]
TIM2->ARR = period - 1;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	1e5a      	subs	r2, r3, #1
 80005e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005e8:	62da      	str	r2, [r3, #44]	; 0x2c
TIM2->CCR2 = period / 2; // Channel 2 50/50
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	0fda      	lsrs	r2, r3, #31
 80005ee:	4413      	add	r3, r2
 80005f0:	105b      	asrs	r3, r3, #1
 80005f2:	461a      	mov	r2, r3
 80005f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005f8:	639a      	str	r2, [r3, #56]	; 0x38
TIM2->CNT = 0;
 80005fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005fe:	2200      	movs	r2, #0
 8000600:	625a      	str	r2, [r3, #36]	; 0x24
return 0;
 8000602:	2300      	movs	r3, #0
}
 8000604:	4618      	mov	r0, r3
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <get_index>:

int get_index(int i){
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

	for(int j=0;10>j;j++){
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	e00b      	b.n	8000636 <get_index+0x26>
		if(i == nota_stack[j] )
 800061e:	4a0b      	ldr	r2, [pc, #44]	; (800064c <get_index+0x3c>)
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	429a      	cmp	r2, r3
 800062a:	d101      	bne.n	8000630 <get_index+0x20>
			return j;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	e006      	b.n	800063e <get_index+0x2e>
	for(int j=0;10>j;j++){
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	3301      	adds	r3, #1
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	2b09      	cmp	r3, #9
 800063a:	ddf0      	ble.n	800061e <get_index+0xe>
	}
	return 0;
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000234 	.word	0x20000234

08000650 <delay>:


void delay(int num){
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

	num = num * 9000;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f242 3228 	movw	r2, #9000	; 0x2328
 800065e:	fb02 f303 	mul.w	r3, r2, r3
 8000662:	607b      	str	r3, [r7, #4]

	for(int i=0;num>i;i++){
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	e002      	b.n	8000670 <delay+0x20>
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	3301      	adds	r3, #1
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	429a      	cmp	r2, r3
 8000676:	dcf8      	bgt.n	800066a <delay+0x1a>

	}
}
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <play_rgb_notes>:


void play_rgb_notes(int note){
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
		switch(note){
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8000692:	d05d      	beq.n	8000750 <play_rgb_notes+0xcc>
 8000694:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8000698:	dc17      	bgt.n	80006ca <play_rgb_notes+0x46>
 800069a:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 800069e:	d03f      	beq.n	8000720 <play_rgb_notes+0x9c>
 80006a0:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80006a4:	dc06      	bgt.n	80006b4 <play_rgb_notes+0x30>
 80006a6:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80006aa:	d02d      	beq.n	8000708 <play_rgb_notes+0x84>
 80006ac:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 80006b0:	d030      	beq.n	8000714 <play_rgb_notes+0x90>
		case  NOTE_B5:
			set_rgb(186,74,0);
			break;

		}
}
 80006b2:	e07d      	b.n	80007b0 <play_rgb_notes+0x12c>
		switch(note){
 80006b4:	f5b3 7fc4 	cmp.w	r3, #392	; 0x188
 80006b8:	d03e      	beq.n	8000738 <play_rgb_notes+0xb4>
 80006ba:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 80006be:	d041      	beq.n	8000744 <play_rgb_notes+0xc0>
 80006c0:	f240 125d 	movw	r2, #349	; 0x15d
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d031      	beq.n	800072c <play_rgb_notes+0xa8>
}
 80006c8:	e072      	b.n	80007b0 <play_rgb_notes+0x12c>
		switch(note){
 80006ca:	f240 22ba 	movw	r2, #698	; 0x2ba
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d056      	beq.n	8000780 <play_rgb_notes+0xfc>
 80006d2:	f240 22ba 	movw	r2, #698	; 0x2ba
 80006d6:	4293      	cmp	r3, r2
 80006d8:	dc0c      	bgt.n	80006f4 <play_rgb_notes+0x70>
 80006da:	f240 224b 	movw	r2, #587	; 0x24b
 80006de:	4293      	cmp	r3, r2
 80006e0:	d042      	beq.n	8000768 <play_rgb_notes+0xe4>
 80006e2:	f240 2293 	movw	r2, #659	; 0x293
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d044      	beq.n	8000774 <play_rgb_notes+0xf0>
 80006ea:	f240 220b 	movw	r2, #523	; 0x20b
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d034      	beq.n	800075c <play_rgb_notes+0xd8>
}
 80006f2:	e05d      	b.n	80007b0 <play_rgb_notes+0x12c>
		switch(note){
 80006f4:	f5b3 7f5c 	cmp.w	r3, #880	; 0x370
 80006f8:	d04e      	beq.n	8000798 <play_rgb_notes+0x114>
 80006fa:	f5b3 7f77 	cmp.w	r3, #988	; 0x3dc
 80006fe:	d051      	beq.n	80007a4 <play_rgb_notes+0x120>
 8000700:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8000704:	d042      	beq.n	800078c <play_rgb_notes+0x108>
}
 8000706:	e053      	b.n	80007b0 <play_rgb_notes+0x12c>
			set_rgb(72,61,139);
 8000708:	228b      	movs	r2, #139	; 0x8b
 800070a:	213d      	movs	r1, #61	; 0x3d
 800070c:	2048      	movs	r0, #72	; 0x48
 800070e:	f7ff ff3f 	bl	8000590 <set_rgb>
			break;
 8000712:	e04d      	b.n	80007b0 <play_rgb_notes+0x12c>
			set_rgb(39,64,139);
 8000714:	228b      	movs	r2, #139	; 0x8b
 8000716:	2140      	movs	r1, #64	; 0x40
 8000718:	2027      	movs	r0, #39	; 0x27
 800071a:	f7ff ff39 	bl	8000590 <set_rgb>
			break;
 800071e:	e047      	b.n	80007b0 <play_rgb_notes+0x12c>
			set_rgb(0,191,255);
 8000720:	22ff      	movs	r2, #255	; 0xff
 8000722:	21bf      	movs	r1, #191	; 0xbf
 8000724:	2000      	movs	r0, #0
 8000726:	f7ff ff33 	bl	8000590 <set_rgb>
			break;
 800072a:	e041      	b.n	80007b0 <play_rgb_notes+0x12c>
			set_rgb(0,245,255);
 800072c:	22ff      	movs	r2, #255	; 0xff
 800072e:	21f5      	movs	r1, #245	; 0xf5
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff ff2d 	bl	8000590 <set_rgb>
			break;
 8000736:	e03b      	b.n	80007b0 <play_rgb_notes+0x12c>
			set_rgb(0,255,127);
 8000738:	227f      	movs	r2, #127	; 0x7f
 800073a:	21ff      	movs	r1, #255	; 0xff
 800073c:	2000      	movs	r0, #0
 800073e:	f7ff ff27 	bl	8000590 <set_rgb>
			break;
 8000742:	e035      	b.n	80007b0 <play_rgb_notes+0x12c>
			set_rgb(173,255,47);
 8000744:	222f      	movs	r2, #47	; 0x2f
 8000746:	21ff      	movs	r1, #255	; 0xff
 8000748:	20ad      	movs	r0, #173	; 0xad
 800074a:	f7ff ff21 	bl	8000590 <set_rgb>
			break;
 800074e:	e02f      	b.n	80007b0 <play_rgb_notes+0x12c>
			set_rgb(205,190,112);
 8000750:	2270      	movs	r2, #112	; 0x70
 8000752:	21be      	movs	r1, #190	; 0xbe
 8000754:	20cd      	movs	r0, #205	; 0xcd
 8000756:	f7ff ff1b 	bl	8000590 <set_rgb>
			break;
 800075a:	e029      	b.n	80007b0 <play_rgb_notes+0x12c>
			set_rgb(255,106,106);
 800075c:	226a      	movs	r2, #106	; 0x6a
 800075e:	216a      	movs	r1, #106	; 0x6a
 8000760:	20ff      	movs	r0, #255	; 0xff
 8000762:	f7ff ff15 	bl	8000590 <set_rgb>
			break;
 8000766:	e023      	b.n	80007b0 <play_rgb_notes+0x12c>
			set_rgb(238,64,0);
 8000768:	2200      	movs	r2, #0
 800076a:	2140      	movs	r1, #64	; 0x40
 800076c:	20ee      	movs	r0, #238	; 0xee
 800076e:	f7ff ff0f 	bl	8000590 <set_rgb>
			break;
 8000772:	e01d      	b.n	80007b0 <play_rgb_notes+0x12c>
			set_rgb(255,20,147);
 8000774:	2293      	movs	r2, #147	; 0x93
 8000776:	2114      	movs	r1, #20
 8000778:	20ff      	movs	r0, #255	; 0xff
 800077a:	f7ff ff09 	bl	8000590 <set_rgb>
			break;
 800077e:	e017      	b.n	80007b0 <play_rgb_notes+0x12c>
			set_rgb(52,152,219);
 8000780:	22db      	movs	r2, #219	; 0xdb
 8000782:	2198      	movs	r1, #152	; 0x98
 8000784:	2034      	movs	r0, #52	; 0x34
 8000786:	f7ff ff03 	bl	8000590 <set_rgb>
			break;
 800078a:	e011      	b.n	80007b0 <play_rgb_notes+0x12c>
			set_rgb(26,188,156);
 800078c:	229c      	movs	r2, #156	; 0x9c
 800078e:	21bc      	movs	r1, #188	; 0xbc
 8000790:	201a      	movs	r0, #26
 8000792:	f7ff fefd 	bl	8000590 <set_rgb>
			break;
 8000796:	e00b      	b.n	80007b0 <play_rgb_notes+0x12c>
			set_rgb(241,196,15);
 8000798:	220f      	movs	r2, #15
 800079a:	21c4      	movs	r1, #196	; 0xc4
 800079c:	20f1      	movs	r0, #241	; 0xf1
 800079e:	f7ff fef7 	bl	8000590 <set_rgb>
			break;
 80007a2:	e005      	b.n	80007b0 <play_rgb_notes+0x12c>
			set_rgb(186,74,0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	214a      	movs	r1, #74	; 0x4a
 80007a8:	20ba      	movs	r0, #186	; 0xba
 80007aa:	f7ff fef1 	bl	8000590 <set_rgb>
			break;
 80007ae:	bf00      	nop
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <play_pirates>:

void play_pirates(){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	f5ad 6dcd 	sub.w	sp, sp, #1640	; 0x668
 80007be:	af00      	add	r7, sp, #0
	 float notes[] = {
 80007c0:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80007c4:	4a39      	ldr	r2, [pc, #228]	; (80008ac <play_pirates+0xf4>)
 80007c6:	4618      	mov	r0, r3
 80007c8:	4611      	mov	r1, r2
 80007ca:	f44f 734b 	mov.w	r3, #812	; 0x32c
 80007ce:	461a      	mov	r2, r3
 80007d0:	f004 f804 	bl	80047dc <memcpy>
	    NOTE_E5, 0, 0, NOTE_F5, 0, 0,
	    NOTE_E5, NOTE_E5, 0, NOTE_G5, 0, NOTE_E5, NOTE_D5, 0, 0,
	    NOTE_D5, 0, 0, NOTE_C5, 0, 0,
	    NOTE_B4, NOTE_C5, 0, NOTE_B4, 0, NOTE_A4
	 };
	 int duration[] = {         //duration of each note (in ms) Quarter Note is set to 250 ms
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	4a36      	ldr	r2, [pc, #216]	; (80008b0 <play_pirates+0xf8>)
 80007d8:	4618      	mov	r0, r3
 80007da:	4611      	mov	r1, r2
 80007dc:	f44f 734b 	mov.w	r3, #812	; 0x32c
 80007e0:	461a      	mov	r2, r3
 80007e2:	f003 fffb 	bl	80047dc <memcpy>
	   250, 125, 375, 250, 125, 375,
	   125, 125, 125, 125, 125, 500
	 };

	 float result;
	 	  for(int i=0;i<203;i++){
 80007e6:	2300      	movs	r3, #0
 80007e8:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
 80007ec:	e051      	b.n	8000892 <play_pirates+0xda>
	 		  if(stop == 1){
 80007ee:	4b31      	ldr	r3, [pc, #196]	; (80008b4 <play_pirates+0xfc>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d103      	bne.n	80007fe <play_pirates+0x46>
	 			  stop = 0;
 80007f6:	4b2f      	ldr	r3, [pc, #188]	; (80008b4 <play_pirates+0xfc>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
	 			  break;
 80007fc:	e04d      	b.n	800089a <play_pirates+0xe2>
	 		  }
	           int w = duration[i];
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 8000804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000808:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c

	           if(notes[i] == 0){
 800080c:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8000810:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	4413      	add	r3, r2
 8000818:	edd3 7a00 	vldr	s15, [r3]
 800081c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000824:	d105      	bne.n	8000832 <play_pirates+0x7a>
	               result = 0;
 8000826:	f04f 0300 	mov.w	r3, #0
 800082a:	f207 6264 	addw	r2, r7, #1636	; 0x664
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	e009      	b.n	8000846 <play_pirates+0x8e>

	               }
	           else {
	               result = notes[i];
 8000832:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8000836:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f207 6264 	addw	r2, r7, #1636	; 0x664
 8000844:	6013      	str	r3, [r2, #0]

	               }


	           play_rgb_notes(notes[i]);
 8000846:	f507 724c 	add.w	r2, r7, #816	; 0x330
 800084a:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	4413      	add	r3, r2
 8000852:	edd3 7a00 	vldr	s15, [r3]
 8000856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800085a:	ee17 0a90 	vmov	r0, s15
 800085e:	f7ff ff11 	bl	8000684 <play_rgb_notes>



	           setfreq(result);
 8000862:	f207 6364 	addw	r3, r7, #1636	; 0x664
 8000866:	edd3 7a00 	vldr	s15, [r3]
 800086a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800086e:	ee17 0a90 	vmov	r0, s15
 8000872:	f7ff feab 	bl	80005cc <setfreq>

	           delay(w);
 8000876:	f8d7 065c 	ldr.w	r0, [r7, #1628]	; 0x65c
 800087a:	f7ff fee9 	bl	8000650 <delay>


	           set_rgb(0, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	2000      	movs	r0, #0
 8000884:	f7ff fe84 	bl	8000590 <set_rgb>
	 	  for(int i=0;i<203;i++){
 8000888:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800088c:	3301      	adds	r3, #1
 800088e:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
 8000892:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8000896:	2bca      	cmp	r3, #202	; 0xca
 8000898:	dda9      	ble.n	80007ee <play_pirates+0x36>

	 	  }
	 	  TIM2->CCR2 = 0;
 800089a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800089e:	2200      	movs	r2, #0
 80008a0:	639a      	str	r2, [r3, #56]	; 0x38


}
 80008a2:	bf00      	nop
 80008a4:	f507 67cd 	add.w	r7, r7, #1640	; 0x668
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	080053b8 	.word	0x080053b8
 80008b0:	080056e4 	.word	0x080056e4
 80008b4:	20000214 	.word	0x20000214

080008b8 <play_coffin>:


void play_coffin(){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	f5ad 7d64 	sub.w	sp, sp, #912	; 0x390
 80008be:	af00      	add	r7, sp, #0
	 float coffin[] = {
 80008c0:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80008c4:	4a37      	ldr	r2, [pc, #220]	; (80009a4 <play_coffin+0xec>)
 80008c6:	4618      	mov	r0, r3
 80008c8:	4611      	mov	r1, r2
 80008ca:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80008ce:	461a      	mov	r2, r3
 80008d0:	f003 ff84 	bl	80047dc <memcpy>
			  NOTE_G4,0, NOTE_G4, NOTE_A5,
			  NOTE_G5, NOTE_A5, NOTE_G5, NOTE_A5

	 };

	 int coffinDurations[] = {
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	4a34      	ldr	r2, [pc, #208]	; (80009a8 <play_coffin+0xf0>)
 80008d8:	4618      	mov	r0, r3
 80008da:	4611      	mov	r1, r2
 80008dc:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80008e0:	461a      	mov	r2, r3
 80008e2:	f003 ff7b 	bl	80047dc <memcpy>
	   200,200,200,200
	   };


	 float result;
	 	  for(int i=0;i< (sizeof(coffinDurations) / sizeof(coffinDurations[0]))  ;i++){
 80008e6:	2300      	movs	r3, #0
 80008e8:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 80008ec:	e04d      	b.n	800098a <play_coffin+0xd2>
	 		  if(stop == 1){
 80008ee:	4b2f      	ldr	r3, [pc, #188]	; (80009ac <play_coffin+0xf4>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d103      	bne.n	80008fe <play_coffin+0x46>
	 			  stop = 0;
 80008f6:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <play_coffin+0xf4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
	 			  break;
 80008fc:	e049      	b.n	8000992 <play_coffin+0xda>
	 		  }
	           int w = coffinDurations[i];
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 8000904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000908:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384

	           if(coffin[i] == 0){
 800090c:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 8000910:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	edd3 7a00 	vldr	s15, [r3]
 800091c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000924:	d104      	bne.n	8000930 <play_coffin+0x78>
	               result = 0;
 8000926:	f04f 0300 	mov.w	r3, #0
 800092a:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 800092e:	e008      	b.n	8000942 <play_coffin+0x8a>

	               }
	           else {
	               result = coffin[i];
 8000930:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 8000934:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c

	               }


	           play_rgb_notes(coffin[i]);
 8000942:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 8000946:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	4413      	add	r3, r2
 800094e:	edd3 7a00 	vldr	s15, [r3]
 8000952:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000956:	ee17 0a90 	vmov	r0, s15
 800095a:	f7ff fe93 	bl	8000684 <play_rgb_notes>



	           setfreq(result);
 800095e:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8000962:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000966:	ee17 0a90 	vmov	r0, s15
 800096a:	f7ff fe2f 	bl	80005cc <setfreq>

	           delay(w);
 800096e:	f8d7 0384 	ldr.w	r0, [r7, #900]	; 0x384
 8000972:	f7ff fe6d 	bl	8000650 <delay>


	           set_rgb(0, 0, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	2000      	movs	r0, #0
 800097c:	f7ff fe08 	bl	8000590 <set_rgb>
	 	  for(int i=0;i< (sizeof(coffinDurations) / sizeof(coffinDurations[0]))  ;i++){
 8000980:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8000984:	3301      	adds	r3, #1
 8000986:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 800098a:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 800098e:	2b6f      	cmp	r3, #111	; 0x6f
 8000990:	d9ad      	bls.n	80008ee <play_coffin+0x36>

	 	  }
	 	  TIM2->CCR2 = 0;
 8000992:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000996:	2200      	movs	r2, #0
 8000998:	639a      	str	r2, [r3, #56]	; 0x38


}
 800099a:	bf00      	nop
 800099c:	f507 7764 	add.w	r7, r7, #912	; 0x390
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	08005a10 	.word	0x08005a10
 80009a8:	08005bd0 	.word	0x08005bd0
 80009ac:	20000214 	.word	0x20000214

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b4:	f001 f8fc 	bl	8001bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b8:	f000 f8c4 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009bc:	f000 faec 	bl	8000f98 <MX_GPIO_Init>
  MX_TIM1_Init();
 80009c0:	f000 f928 	bl	8000c14 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009c4:	f000 f9c2 	bl	8000d4c <MX_TIM2_Init>
  MX_TIM3_Init();
 80009c8:	f000 fa44 	bl	8000e54 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80009cc:	f000 fa90 	bl	8000ef0 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80009d0:	f000 fab8 	bl	8000f44 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80009d4:	4852      	ldr	r0, [pc, #328]	; (8000b20 <main+0x170>)
 80009d6:	f002 f8ac 	bl	8002b32 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 80009da:	4852      	ldr	r0, [pc, #328]	; (8000b24 <main+0x174>)
 80009dc:	f002 f8a9 	bl	8002b32 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 80009e0:	4851      	ldr	r0, [pc, #324]	; (8000b28 <main+0x178>)
 80009e2:	f002 f8a6 	bl	8002b32 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80009e6:	4850      	ldr	r0, [pc, #320]	; (8000b28 <main+0x178>)
 80009e8:	f002 f8c7 	bl	8002b7a <HAL_TIM_Base_Start_IT>




  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80009ec:	2100      	movs	r1, #0
 80009ee:	484c      	ldr	r0, [pc, #304]	; (8000b20 <main+0x170>)
 80009f0:	f002 f912 	bl	8002c18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80009f4:	2104      	movs	r1, #4
 80009f6:	484a      	ldr	r0, [pc, #296]	; (8000b20 <main+0x170>)
 80009f8:	f002 f90e 	bl	8002c18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80009fc:	2108      	movs	r1, #8
 80009fe:	4848      	ldr	r0, [pc, #288]	; (8000b20 <main+0x170>)
 8000a00:	f002 f90a 	bl	8002c18 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000a04:	2104      	movs	r1, #4
 8000a06:	4847      	ldr	r0, [pc, #284]	; (8000b24 <main+0x174>)
 8000a08:	f002 f906 	bl	8002c18 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart2, rec, 6);
 8000a0c:	2206      	movs	r2, #6
 8000a0e:	4947      	ldr	r1, [pc, #284]	; (8000b2c <main+0x17c>)
 8000a10:	4847      	ldr	r0, [pc, #284]	; (8000b30 <main+0x180>)
 8000a12:	f003 f867 	bl	8003ae4 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, rec, 6);
 8000a16:	2206      	movs	r2, #6
 8000a18:	4944      	ldr	r1, [pc, #272]	; (8000b2c <main+0x17c>)
 8000a1a:	4846      	ldr	r0, [pc, #280]	; (8000b34 <main+0x184>)
 8000a1c:	f003 f862 	bl	8003ae4 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)){
 8000a20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a24:	4844      	ldr	r0, [pc, #272]	; (8000b38 <main+0x188>)
 8000a26:	f001 fbeb 	bl	8002200 <HAL_GPIO_ReadPin>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d162      	bne.n	8000af6 <main+0x146>

		  if(bt == 0)
 8000a30:	4b42      	ldr	r3, [pc, #264]	; (8000b3c <main+0x18c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d12f      	bne.n	8000a98 <main+0xe8>
		  {
			  bt = 1;
 8000a38:	4b40      	ldr	r3, [pc, #256]	; (8000b3c <main+0x18c>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	601a      	str	r2, [r3, #0]

			  memcpy(rec,0,6);
 8000a3e:	4b3b      	ldr	r3, [pc, #236]	; (8000b2c <main+0x17c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	6810      	ldr	r0, [r2, #0]
 8000a44:	6018      	str	r0, [r3, #0]
 8000a46:	8892      	ldrh	r2, [r2, #4]
 8000a48:	809a      	strh	r2, [r3, #4]
			  HAL_UART_Receive_IT(&huart6, rec, 6);
 8000a4a:	2206      	movs	r2, #6
 8000a4c:	4937      	ldr	r1, [pc, #220]	; (8000b2c <main+0x17c>)
 8000a4e:	4839      	ldr	r0, [pc, #228]	; (8000b34 <main+0x184>)
 8000a50:	f003 f848 	bl	8003ae4 <HAL_UART_Receive_IT>

			  setfreq(600);
 8000a54:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000a58:	f7ff fdb8 	bl	80005cc <setfreq>
			  set_rgb(0, 255, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	21ff      	movs	r1, #255	; 0xff
 8000a60:	2000      	movs	r0, #0
 8000a62:	f7ff fd95 	bl	8000590 <set_rgb>
			  delay(200);
 8000a66:	20c8      	movs	r0, #200	; 0xc8
 8000a68:	f7ff fdf2 	bl	8000650 <delay>
			  setfreq(800);
 8000a6c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a70:	f7ff fdac 	bl	80005cc <setfreq>
			  set_rgb(0, 0,255);
 8000a74:	22ff      	movs	r2, #255	; 0xff
 8000a76:	2100      	movs	r1, #0
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f7ff fd89 	bl	8000590 <set_rgb>
			  delay(200);
 8000a7e:	20c8      	movs	r0, #200	; 0xc8
 8000a80:	f7ff fde6 	bl	8000650 <delay>
			  set_rgb(0, 0, 0);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2100      	movs	r1, #0
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f7ff fd81 	bl	8000590 <set_rgb>
			  TIM2->CCR2 = 0;
 8000a8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a92:	2200      	movs	r2, #0
 8000a94:	639a      	str	r2, [r3, #56]	; 0x38
 8000a96:	e02e      	b.n	8000af6 <main+0x146>

		  }
		  else{
			  bt = 0;
 8000a98:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <main+0x18c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
			  memcpy(rec,0,6);
 8000a9e:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <main+0x17c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	6810      	ldr	r0, [r2, #0]
 8000aa4:	6018      	str	r0, [r3, #0]
 8000aa6:	8892      	ldrh	r2, [r2, #4]
 8000aa8:	809a      	strh	r2, [r3, #4]
			  HAL_UART_Receive_IT(&huart2, rec, 6);
 8000aaa:	2206      	movs	r2, #6
 8000aac:	491f      	ldr	r1, [pc, #124]	; (8000b2c <main+0x17c>)
 8000aae:	4820      	ldr	r0, [pc, #128]	; (8000b30 <main+0x180>)
 8000ab0:	f003 f818 	bl	8003ae4 <HAL_UART_Receive_IT>
			  setfreq(800);
 8000ab4:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000ab8:	f7ff fd88 	bl	80005cc <setfreq>
			  set_rgb(0, 0, 255);
 8000abc:	22ff      	movs	r2, #255	; 0xff
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f7ff fd65 	bl	8000590 <set_rgb>
			  delay(200);
 8000ac6:	20c8      	movs	r0, #200	; 0xc8
 8000ac8:	f7ff fdc2 	bl	8000650 <delay>
			  setfreq(600);
 8000acc:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000ad0:	f7ff fd7c 	bl	80005cc <setfreq>
			  set_rgb(0, 255 , 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	21ff      	movs	r1, #255	; 0xff
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f7ff fd59 	bl	8000590 <set_rgb>
			  delay(200);
 8000ade:	20c8      	movs	r0, #200	; 0xc8
 8000ae0:	f7ff fdb6 	bl	8000650 <delay>
			  set_rgb(0, 0, 0);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f7ff fd51 	bl	8000590 <set_rgb>
			  TIM2->CCR2 = 0;
 8000aee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000af2:	2200      	movs	r2, #0
 8000af4:	639a      	str	r2, [r3, #56]	; 0x38


	  }


	  if(songs[0] == 1){
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <main+0x190>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d105      	bne.n	8000b0a <main+0x15a>
		  songs[0] = 0;
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <main+0x190>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
		  play_pirates();
 8000b04:	f7ff fe58 	bl	80007b8 <play_pirates>
 8000b08:	e78a      	b.n	8000a20 <main+0x70>
	  }
	  else if(songs[3] == 1){
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <main+0x190>)
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d186      	bne.n	8000a20 <main+0x70>
		  songs[3] = 0;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <main+0x190>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	60da      	str	r2, [r3, #12]
		  play_coffin();
 8000b18:	f7ff fece 	bl	80008b8 <play_coffin>
	  if(!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)){
 8000b1c:	e780      	b.n	8000a20 <main+0x70>
 8000b1e:	bf00      	nop
 8000b20:	200008e0 	.word	0x200008e0
 8000b24:	20000960 	.word	0x20000960
 8000b28:	2000025c 	.word	0x2000025c
 8000b2c:	200009e0 	.word	0x200009e0
 8000b30:	200009a0 	.word	0x200009a0
 8000b34:	20000920 	.word	0x20000920
 8000b38:	40020800 	.word	0x40020800
 8000b3c:	20000210 	.word	0x20000210
 8000b40:	20000218 	.word	0x20000218

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b094      	sub	sp, #80	; 0x50
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 0320 	add.w	r3, r7, #32
 8000b4e:	2230      	movs	r2, #48	; 0x30
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f003 fe4d 	bl	80047f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	4b27      	ldr	r3, [pc, #156]	; (8000c0c <SystemClock_Config+0xc8>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	4a26      	ldr	r2, [pc, #152]	; (8000c0c <SystemClock_Config+0xc8>)
 8000b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b76:	6413      	str	r3, [r2, #64]	; 0x40
 8000b78:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <SystemClock_Config+0xc8>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <SystemClock_Config+0xcc>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a20      	ldr	r2, [pc, #128]	; (8000c10 <SystemClock_Config+0xcc>)
 8000b8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b92:	6013      	str	r3, [r2, #0]
 8000b94:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <SystemClock_Config+0xcc>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba8:	2310      	movs	r3, #16
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bac:	2302      	movs	r3, #2
 8000bae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bb4:	2308      	movs	r3, #8
 8000bb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 90;
 8000bb8:	235a      	movs	r3, #90	; 0x5a
 8000bba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc4:	f107 0320 	add.w	r3, r7, #32
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 fb4b 	bl	8002264 <HAL_RCC_OscConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bd4:	f000 fdba 	bl	800174c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd8:	230f      	movs	r3, #15
 8000bda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f001 fda5 	bl	8002744 <HAL_RCC_ClockConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c00:	f000 fda4 	bl	800174c <Error_Handler>
  }
}
 8000c04:	bf00      	nop
 8000c06:	3750      	adds	r7, #80	; 0x50
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40007000 	.word	0x40007000

08000c14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b092      	sub	sp, #72	; 0x48
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
 8000c34:	615a      	str	r2, [r3, #20]
 8000c36:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2220      	movs	r2, #32
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f003 fdd7 	bl	80047f2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c44:	4b3f      	ldr	r3, [pc, #252]	; (8000d44 <MX_TIM1_Init+0x130>)
 8000c46:	4a40      	ldr	r2, [pc, #256]	; (8000d48 <MX_TIM1_Init+0x134>)
 8000c48:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1384-1;
 8000c4a:	4b3e      	ldr	r3, [pc, #248]	; (8000d44 <MX_TIM1_Init+0x130>)
 8000c4c:	f240 5267 	movw	r2, #1383	; 0x567
 8000c50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c52:	4b3c      	ldr	r3, [pc, #240]	; (8000d44 <MX_TIM1_Init+0x130>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 8000c58:	4b3a      	ldr	r3, [pc, #232]	; (8000d44 <MX_TIM1_Init+0x130>)
 8000c5a:	22fe      	movs	r2, #254	; 0xfe
 8000c5c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5e:	4b39      	ldr	r3, [pc, #228]	; (8000d44 <MX_TIM1_Init+0x130>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c64:	4b37      	ldr	r3, [pc, #220]	; (8000d44 <MX_TIM1_Init+0x130>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6a:	4b36      	ldr	r3, [pc, #216]	; (8000d44 <MX_TIM1_Init+0x130>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c70:	4834      	ldr	r0, [pc, #208]	; (8000d44 <MX_TIM1_Init+0x130>)
 8000c72:	f001 ffa6 	bl	8002bc2 <HAL_TIM_PWM_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000c7c:	f000 fd66 	bl	800174c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	482d      	ldr	r0, [pc, #180]	; (8000d44 <MX_TIM1_Init+0x130>)
 8000c90:	f002 fd6e 	bl	8003770 <HAL_TIMEx_MasterConfigSynchronization>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000c9a:	f000 fd57 	bl	800174c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c9e:	2360      	movs	r3, #96	; 0x60
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000caa:	2300      	movs	r3, #0
 8000cac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4820      	ldr	r0, [pc, #128]	; (8000d44 <MX_TIM1_Init+0x130>)
 8000cc4:	f002 f8e2 	bl	8002e8c <HAL_TIM_PWM_ConfigChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000cce:	f000 fd3d 	bl	800174c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd6:	2204      	movs	r2, #4
 8000cd8:	4619      	mov	r1, r3
 8000cda:	481a      	ldr	r0, [pc, #104]	; (8000d44 <MX_TIM1_Init+0x130>)
 8000cdc:	f002 f8d6 	bl	8002e8c <HAL_TIM_PWM_ConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000ce6:	f000 fd31 	bl	800174c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cee:	2208      	movs	r2, #8
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4814      	ldr	r0, [pc, #80]	; (8000d44 <MX_TIM1_Init+0x130>)
 8000cf4:	f002 f8ca 	bl	8002e8c <HAL_TIM_PWM_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000cfe:	f000 fd25 	bl	800174c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	4619      	mov	r1, r3
 8000d24:	4807      	ldr	r0, [pc, #28]	; (8000d44 <MX_TIM1_Init+0x130>)
 8000d26:	f002 fd91 	bl	800384c <HAL_TIMEx_ConfigBreakDeadTime>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000d30:	f000 fd0c 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d34:	4803      	ldr	r0, [pc, #12]	; (8000d44 <MX_TIM1_Init+0x130>)
 8000d36:	f000 fd97 	bl	8001868 <HAL_TIM_MspPostInit>

}
 8000d3a:	bf00      	nop
 8000d3c:	3748      	adds	r7, #72	; 0x48
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200008e0 	.word	0x200008e0
 8000d48:	40010000 	.word	0x40010000

08000d4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08e      	sub	sp, #56	; 0x38
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d60:	f107 0320 	add.w	r3, r7, #32
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
 8000d78:	615a      	str	r2, [r3, #20]
 8000d7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d7c:	4b34      	ldr	r3, [pc, #208]	; (8000e50 <MX_TIM2_Init+0x104>)
 8000d7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1500-1;
 8000d84:	4b32      	ldr	r3, [pc, #200]	; (8000e50 <MX_TIM2_Init+0x104>)
 8000d86:	f240 52db 	movw	r2, #1499	; 0x5db
 8000d8a:	605a      	str	r2, [r3, #4]
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d8c:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <MX_TIM2_Init+0x104>)
 8000d8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1500-1;
 8000d94:	4b2e      	ldr	r3, [pc, #184]	; (8000e50 <MX_TIM2_Init+0x104>)
 8000d96:	f240 52db 	movw	r2, #1499	; 0x5db
 8000d9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9c:	4b2c      	ldr	r3, [pc, #176]	; (8000e50 <MX_TIM2_Init+0x104>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000da2:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <MX_TIM2_Init+0x104>)
 8000da4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000da8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000daa:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <MX_TIM2_Init+0x104>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db0:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <MX_TIM2_Init+0x104>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000db6:	4826      	ldr	r0, [pc, #152]	; (8000e50 <MX_TIM2_Init+0x104>)
 8000db8:	f001 fe90 	bl	8002adc <HAL_TIM_Base_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000dc2:	f000 fcc3 	bl	800174c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	481f      	ldr	r0, [pc, #124]	; (8000e50 <MX_TIM2_Init+0x104>)
 8000dd4:	f002 f920 	bl	8003018 <HAL_TIM_ConfigClockSource>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000dde:	f000 fcb5 	bl	800174c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000de2:	481b      	ldr	r0, [pc, #108]	; (8000e50 <MX_TIM2_Init+0x104>)
 8000de4:	f001 feed 	bl	8002bc2 <HAL_TIM_PWM_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 8000dee:	f000 fcad 	bl	800174c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dfa:	f107 0320 	add.w	r3, r7, #32
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4813      	ldr	r0, [pc, #76]	; (8000e50 <MX_TIM2_Init+0x104>)
 8000e02:	f002 fcb5 	bl	8003770 <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8000e0c:	f000 fc9e 	bl	800174c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e10:	2360      	movs	r3, #96	; 0x60
 8000e12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2204      	movs	r2, #4
 8000e24:	4619      	mov	r1, r3
 8000e26:	480a      	ldr	r0, [pc, #40]	; (8000e50 <MX_TIM2_Init+0x104>)
 8000e28:	f002 f830 	bl	8002e8c <HAL_TIM_PWM_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8000e32:	f000 fc8b 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  sConfigOC.Pulse = (htim2.Init.Period + 1)/2;
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <MX_TIM2_Init+0x104>)
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	085b      	lsrs	r3, r3, #1
 8000e3e:	60bb      	str	r3, [r7, #8]
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e40:	4803      	ldr	r0, [pc, #12]	; (8000e50 <MX_TIM2_Init+0x104>)
 8000e42:	f000 fd11 	bl	8001868 <HAL_TIM_MspPostInit>

}
 8000e46:	bf00      	nop
 8000e48:	3738      	adds	r7, #56	; 0x38
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000960 	.word	0x20000960

08000e54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e68:	463b      	mov	r3, r7
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e70:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <MX_TIM3_Init+0x94>)
 8000e72:	4a1e      	ldr	r2, [pc, #120]	; (8000eec <MX_TIM3_Init+0x98>)
 8000e74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 8000e76:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <MX_TIM3_Init+0x94>)
 8000e78:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <MX_TIM3_Init+0x94>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9000;
 8000e84:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <MX_TIM3_Init+0x94>)
 8000e86:	f242 3228 	movw	r2, #9000	; 0x2328
 8000e8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8c:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <MX_TIM3_Init+0x94>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <MX_TIM3_Init+0x94>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e98:	4813      	ldr	r0, [pc, #76]	; (8000ee8 <MX_TIM3_Init+0x94>)
 8000e9a:	f001 fe1f 	bl	8002adc <HAL_TIM_Base_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000ea4:	f000 fc52 	bl	800174c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000eae:	f107 0308 	add.w	r3, r7, #8
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <MX_TIM3_Init+0x94>)
 8000eb6:	f002 f8af 	bl	8003018 <HAL_TIM_ConfigClockSource>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000ec0:	f000 fc44 	bl	800174c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ecc:	463b      	mov	r3, r7
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <MX_TIM3_Init+0x94>)
 8000ed2:	f002 fc4d 	bl	8003770 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000edc:	f000 fc36 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2000025c 	.word	0x2000025c
 8000eec:	40000400 	.word	0x40000400

08000ef0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <MX_USART2_UART_Init+0x50>)
 8000ef8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000efc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f16:	220c      	movs	r2, #12
 8000f18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f28:	f002 fcf6 	bl	8003918 <HAL_UART_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f32:	f000 fc0b 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200009a0 	.word	0x200009a0
 8000f40:	40004400 	.word	0x40004400

08000f44 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_USART6_UART_Init+0x4c>)
 8000f4a:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <MX_USART6_UART_Init+0x50>)
 8000f4c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <MX_USART6_UART_Init+0x4c>)
 8000f50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f54:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_USART6_UART_Init+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_USART6_UART_Init+0x4c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <MX_USART6_UART_Init+0x4c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_USART6_UART_Init+0x4c>)
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <MX_USART6_UART_Init+0x4c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_USART6_UART_Init+0x4c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f7a:	4805      	ldr	r0, [pc, #20]	; (8000f90 <MX_USART6_UART_Init+0x4c>)
 8000f7c:	f002 fccc 	bl	8003918 <HAL_UART_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000f86:	f000 fbe1 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000920 	.word	0x20000920
 8000f94:	40011400 	.word	0x40011400

08000f98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <MX_GPIO_Init+0x98>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a1e      	ldr	r2, [pc, #120]	; (8001030 <MX_GPIO_Init+0x98>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <MX_GPIO_Init+0x98>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <MX_GPIO_Init+0x98>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a17      	ldr	r2, [pc, #92]	; (8001030 <MX_GPIO_Init+0x98>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <MX_GPIO_Init+0x98>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2120      	movs	r1, #32
 8000fea:	4812      	ldr	r0, [pc, #72]	; (8001034 <MX_GPIO_Init+0x9c>)
 8000fec:	f001 f920 	bl	8002230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ff0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	4619      	mov	r1, r3
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <MX_GPIO_Init+0xa0>)
 8001006:	f000 ff79 	bl	8001efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800100a:	2320      	movs	r3, #32
 800100c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100e:	2301      	movs	r3, #1
 8001010:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	4619      	mov	r1, r3
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <MX_GPIO_Init+0x9c>)
 8001022:	f000 ff6b 	bl	8001efc <HAL_GPIO_Init>

}
 8001026:	bf00      	nop
 8001028:	3720      	adds	r7, #32
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800
 8001034:	40020000 	.word	0x40020000
 8001038:	40020800 	.word	0x40020800

0800103c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef *htim ){
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

	r_d ++;
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	3301      	adds	r3, #1
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800104c:	6013      	str	r3, [r2, #0]

}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000204 	.word	0x20000204

08001060 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08e      	sub	sp, #56	; 0x38
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

		if(bt == 1)
 8001068:	4b81      	ldr	r3, [pc, #516]	; (8001270 <HAL_UART_RxCpltCallback+0x210>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d106      	bne.n	800107e <HAL_UART_RxCpltCallback+0x1e>
			HAL_UART_Transmit(&huart6, rec, 6, 20);
 8001070:	2314      	movs	r3, #20
 8001072:	2206      	movs	r2, #6
 8001074:	497f      	ldr	r1, [pc, #508]	; (8001274 <HAL_UART_RxCpltCallback+0x214>)
 8001076:	4880      	ldr	r0, [pc, #512]	; (8001278 <HAL_UART_RxCpltCallback+0x218>)
 8001078:	f002 fc9b 	bl	80039b2 <HAL_UART_Transmit>
 800107c:	e005      	b.n	800108a <HAL_UART_RxCpltCallback+0x2a>
		else
			HAL_UART_Transmit(&huart2, rec, 6, 20);
 800107e:	2314      	movs	r3, #20
 8001080:	2206      	movs	r2, #6
 8001082:	497c      	ldr	r1, [pc, #496]	; (8001274 <HAL_UART_RxCpltCallback+0x214>)
 8001084:	487d      	ldr	r0, [pc, #500]	; (800127c <HAL_UART_RxCpltCallback+0x21c>)
 8001086:	f002 fc94 	bl	80039b2 <HAL_UART_Transmit>




	stop = 1;
 800108a:	4b7d      	ldr	r3, [pc, #500]	; (8001280 <HAL_UART_RxCpltCallback+0x220>)
 800108c:	2201      	movs	r2, #1
 800108e:	601a      	str	r2, [r3, #0]
	if(( (huart == &huart2) && (bt == 0) ) || ((huart == &huart6) && (bt == 1))  ){
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a7a      	ldr	r2, [pc, #488]	; (800127c <HAL_UART_RxCpltCallback+0x21c>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d103      	bne.n	80010a0 <HAL_UART_RxCpltCallback+0x40>
 8001098:	4b75      	ldr	r3, [pc, #468]	; (8001270 <HAL_UART_RxCpltCallback+0x210>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d009      	beq.n	80010b4 <HAL_UART_RxCpltCallback+0x54>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a75      	ldr	r2, [pc, #468]	; (8001278 <HAL_UART_RxCpltCallback+0x218>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	f040 8327 	bne.w	80016f8 <HAL_UART_RxCpltCallback+0x698>
 80010aa:	4b71      	ldr	r3, [pc, #452]	; (8001270 <HAL_UART_RxCpltCallback+0x210>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	f040 8322 	bne.w	80016f8 <HAL_UART_RxCpltCallback+0x698>
	sscanf(rec, "%d", &i);
 80010b4:	4a73      	ldr	r2, [pc, #460]	; (8001284 <HAL_UART_RxCpltCallback+0x224>)
 80010b6:	4974      	ldr	r1, [pc, #464]	; (8001288 <HAL_UART_RxCpltCallback+0x228>)
 80010b8:	486e      	ldr	r0, [pc, #440]	; (8001274 <HAL_UART_RxCpltCallback+0x214>)
 80010ba:	f003 fba3 	bl	8004804 <siscanf>

	rxcmp = 1;
 80010be:	4b73      	ldr	r3, [pc, #460]	; (800128c <HAL_UART_RxCpltCallback+0x22c>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	601a      	str	r2, [r3, #0]
	memcpy(rec,0,6);
 80010c4:	4b6b      	ldr	r3, [pc, #428]	; (8001274 <HAL_UART_RxCpltCallback+0x214>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	6810      	ldr	r0, [r2, #0]
 80010ca:	6018      	str	r0, [r3, #0]
 80010cc:	8892      	ldrh	r2, [r2, #4]
 80010ce:	809a      	strh	r2, [r3, #4]

	  if( (i == NOTE_C4) || (i == NOTE_D4) || (i == NOTE_E4) || (i == NOTE_F4) || (i == NOTE_G4) || (i == NOTE_A4) || (i == NOTE_B4) || (i == NOTE_C5) || (i == NOTE_D5) || (i == NOTE_E5) || (i == NOTE_F5) || (i == NOTE_G5) || (i == NOTE_A5) || (i == NOTE_B5) ){
 80010d0:	4b6c      	ldr	r3, [pc, #432]	; (8001284 <HAL_UART_RxCpltCallback+0x224>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80010d8:	d046      	beq.n	8001168 <HAL_UART_RxCpltCallback+0x108>
 80010da:	4b6a      	ldr	r3, [pc, #424]	; (8001284 <HAL_UART_RxCpltCallback+0x224>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 80010e2:	d041      	beq.n	8001168 <HAL_UART_RxCpltCallback+0x108>
 80010e4:	4b67      	ldr	r3, [pc, #412]	; (8001284 <HAL_UART_RxCpltCallback+0x224>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80010ec:	d03c      	beq.n	8001168 <HAL_UART_RxCpltCallback+0x108>
 80010ee:	4b65      	ldr	r3, [pc, #404]	; (8001284 <HAL_UART_RxCpltCallback+0x224>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f240 125d 	movw	r2, #349	; 0x15d
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d036      	beq.n	8001168 <HAL_UART_RxCpltCallback+0x108>
 80010fa:	4b62      	ldr	r3, [pc, #392]	; (8001284 <HAL_UART_RxCpltCallback+0x224>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f5b3 7fc4 	cmp.w	r3, #392	; 0x188
 8001102:	d031      	beq.n	8001168 <HAL_UART_RxCpltCallback+0x108>
 8001104:	4b5f      	ldr	r3, [pc, #380]	; (8001284 <HAL_UART_RxCpltCallback+0x224>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 800110c:	d02c      	beq.n	8001168 <HAL_UART_RxCpltCallback+0x108>
 800110e:	4b5d      	ldr	r3, [pc, #372]	; (8001284 <HAL_UART_RxCpltCallback+0x224>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8001116:	d027      	beq.n	8001168 <HAL_UART_RxCpltCallback+0x108>
 8001118:	4b5a      	ldr	r3, [pc, #360]	; (8001284 <HAL_UART_RxCpltCallback+0x224>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f240 220b 	movw	r2, #523	; 0x20b
 8001120:	4293      	cmp	r3, r2
 8001122:	d021      	beq.n	8001168 <HAL_UART_RxCpltCallback+0x108>
 8001124:	4b57      	ldr	r3, [pc, #348]	; (8001284 <HAL_UART_RxCpltCallback+0x224>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f240 224b 	movw	r2, #587	; 0x24b
 800112c:	4293      	cmp	r3, r2
 800112e:	d01b      	beq.n	8001168 <HAL_UART_RxCpltCallback+0x108>
 8001130:	4b54      	ldr	r3, [pc, #336]	; (8001284 <HAL_UART_RxCpltCallback+0x224>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f240 2293 	movw	r2, #659	; 0x293
 8001138:	4293      	cmp	r3, r2
 800113a:	d015      	beq.n	8001168 <HAL_UART_RxCpltCallback+0x108>
 800113c:	4b51      	ldr	r3, [pc, #324]	; (8001284 <HAL_UART_RxCpltCallback+0x224>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f240 22ba 	movw	r2, #698	; 0x2ba
 8001144:	4293      	cmp	r3, r2
 8001146:	d00f      	beq.n	8001168 <HAL_UART_RxCpltCallback+0x108>
 8001148:	4b4e      	ldr	r3, [pc, #312]	; (8001284 <HAL_UART_RxCpltCallback+0x224>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8001150:	d00a      	beq.n	8001168 <HAL_UART_RxCpltCallback+0x108>
 8001152:	4b4c      	ldr	r3, [pc, #304]	; (8001284 <HAL_UART_RxCpltCallback+0x224>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f5b3 7f5c 	cmp.w	r3, #880	; 0x370
 800115a:	d005      	beq.n	8001168 <HAL_UART_RxCpltCallback+0x108>
 800115c:	4b49      	ldr	r3, [pc, #292]	; (8001284 <HAL_UART_RxCpltCallback+0x224>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f5b3 7f77 	cmp.w	r3, #988	; 0x3dc
 8001164:	f040 80a6 	bne.w	80012b4 <HAL_UART_RxCpltCallback+0x254>

		setfreq(i);
 8001168:	4b46      	ldr	r3, [pc, #280]	; (8001284 <HAL_UART_RxCpltCallback+0x224>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fa2d 	bl	80005cc <setfreq>

		if(r_start){
 8001172:	4b47      	ldr	r3, [pc, #284]	; (8001290 <HAL_UART_RxCpltCallback+0x230>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d050      	beq.n	800121c <HAL_UART_RxCpltCallback+0x1bc>
			if((previous != 0) && last_index == 0 ){
 800117a:	4b46      	ldr	r3, [pc, #280]	; (8001294 <HAL_UART_RxCpltCallback+0x234>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d020      	beq.n	80011c4 <HAL_UART_RxCpltCallback+0x164>
 8001182:	4b45      	ldr	r3, [pc, #276]	; (8001298 <HAL_UART_RxCpltCallback+0x238>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d11c      	bne.n	80011c4 <HAL_UART_RxCpltCallback+0x164>
				record_list[record_length] = 0;
 800118a:	4b44      	ldr	r3, [pc, #272]	; (800129c <HAL_UART_RxCpltCallback+0x23c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a44      	ldr	r2, [pc, #272]	; (80012a0 <HAL_UART_RxCpltCallback+0x240>)
 8001190:	2100      	movs	r1, #0
 8001192:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				record_length ++;
 8001196:	4b41      	ldr	r3, [pc, #260]	; (800129c <HAL_UART_RxCpltCallback+0x23c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	3301      	adds	r3, #1
 800119c:	4a3f      	ldr	r2, [pc, #252]	; (800129c <HAL_UART_RxCpltCallback+0x23c>)
 800119e:	6013      	str	r3, [r2, #0]
				int drc = (r_d * 9000) + TIM3->CNT;
 80011a0:	4b40      	ldr	r3, [pc, #256]	; (80012a4 <HAL_UART_RxCpltCallback+0x244>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f242 3228 	movw	r2, #9000	; 0x2328
 80011a8:	fb02 f303 	mul.w	r3, r2, r3
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b3e      	ldr	r3, [pc, #248]	; (80012a8 <HAL_UART_RxCpltCallback+0x248>)
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	4413      	add	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
				record_duraction[record_length - 1] = drc;
 80011b6:	4b39      	ldr	r3, [pc, #228]	; (800129c <HAL_UART_RxCpltCallback+0x23c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	493b      	ldr	r1, [pc, #236]	; (80012ac <HAL_UART_RxCpltCallback+0x24c>)
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}

			if(last_index > 0){
 80011c4:	4b34      	ldr	r3, [pc, #208]	; (8001298 <HAL_UART_RxCpltCallback+0x238>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	dd11      	ble.n	80011f0 <HAL_UART_RxCpltCallback+0x190>
				int drc = (r_d * 9000) + TIM3->CNT;
 80011cc:	4b35      	ldr	r3, [pc, #212]	; (80012a4 <HAL_UART_RxCpltCallback+0x244>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f242 3228 	movw	r2, #9000	; 0x2328
 80011d4:	fb02 f303 	mul.w	r3, r2, r3
 80011d8:	461a      	mov	r2, r3
 80011da:	4b33      	ldr	r3, [pc, #204]	; (80012a8 <HAL_UART_RxCpltCallback+0x248>)
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011de:	4413      	add	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
			    record_duraction[record_length - 1] = drc;
 80011e2:	4b2e      	ldr	r3, [pc, #184]	; (800129c <HAL_UART_RxCpltCallback+0x23c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	4930      	ldr	r1, [pc, #192]	; (80012ac <HAL_UART_RxCpltCallback+0x24c>)
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}


			TIM3->CNT = 0;
 80011f0:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <HAL_UART_RxCpltCallback+0x248>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	625a      	str	r2, [r3, #36]	; 0x24
			r_d = 0;
 80011f6:	4b2b      	ldr	r3, [pc, #172]	; (80012a4 <HAL_UART_RxCpltCallback+0x244>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
			record_list[record_length] = i;
 80011fc:	4b27      	ldr	r3, [pc, #156]	; (800129c <HAL_UART_RxCpltCallback+0x23c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a20      	ldr	r2, [pc, #128]	; (8001284 <HAL_UART_RxCpltCallback+0x224>)
 8001202:	6812      	ldr	r2, [r2, #0]
 8001204:	4926      	ldr	r1, [pc, #152]	; (80012a0 <HAL_UART_RxCpltCallback+0x240>)
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			record_length ++;
 800120a:	4b24      	ldr	r3, [pc, #144]	; (800129c <HAL_UART_RxCpltCallback+0x23c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3301      	adds	r3, #1
 8001210:	4a22      	ldr	r2, [pc, #136]	; (800129c <HAL_UART_RxCpltCallback+0x23c>)
 8001212:	6013      	str	r3, [r2, #0]
			previous = i;
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <HAL_UART_RxCpltCallback+0x224>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <HAL_UART_RxCpltCallback+0x234>)
 800121a:	6013      	str	r3, [r2, #0]

		}


		if(last_index <= 9){
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <HAL_UART_RxCpltCallback+0x238>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b09      	cmp	r3, #9
 8001222:	dc0c      	bgt.n	800123e <HAL_UART_RxCpltCallback+0x1de>
			nota_stack[last_index] = i;
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <HAL_UART_RxCpltCallback+0x238>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a16      	ldr	r2, [pc, #88]	; (8001284 <HAL_UART_RxCpltCallback+0x224>)
 800122a:	6812      	ldr	r2, [r2, #0]
 800122c:	4920      	ldr	r1, [pc, #128]	; (80012b0 <HAL_UART_RxCpltCallback+0x250>)
 800122e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			last_index++;
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <HAL_UART_RxCpltCallback+0x238>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	4a17      	ldr	r2, [pc, #92]	; (8001298 <HAL_UART_RxCpltCallback+0x238>)
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	e00e      	b.n	800125c <HAL_UART_RxCpltCallback+0x1fc>
		}else{
			last_index = 0;
 800123e:	4b16      	ldr	r3, [pc, #88]	; (8001298 <HAL_UART_RxCpltCallback+0x238>)
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
			nota_stack[last_index] = i;
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <HAL_UART_RxCpltCallback+0x238>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <HAL_UART_RxCpltCallback+0x224>)
 800124a:	6812      	ldr	r2, [r2, #0]
 800124c:	4918      	ldr	r1, [pc, #96]	; (80012b0 <HAL_UART_RxCpltCallback+0x250>)
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			last_index++;
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_UART_RxCpltCallback+0x238>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	3301      	adds	r3, #1
 8001258:	4a0f      	ldr	r2, [pc, #60]	; (8001298 <HAL_UART_RxCpltCallback+0x238>)
 800125a:	6013      	str	r3, [r2, #0]
		}




		play_rgb_notes(i);
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <HAL_UART_RxCpltCallback+0x224>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fa0f 	bl	8000684 <play_rgb_notes>
		i=0;
 8001266:	4b07      	ldr	r3, [pc, #28]	; (8001284 <HAL_UART_RxCpltCallback+0x224>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	e244      	b.n	80016f8 <HAL_UART_RxCpltCallback+0x698>
 800126e:	bf00      	nop
 8001270:	20000210 	.word	0x20000210
 8001274:	200009e0 	.word	0x200009e0
 8001278:	20000920 	.word	0x20000920
 800127c:	200009a0 	.word	0x200009a0
 8001280:	20000214 	.word	0x20000214
 8001284:	2000029c 	.word	0x2000029c
 8001288:	08005d90 	.word	0x08005d90
 800128c:	2000020c 	.word	0x2000020c
 8001290:	20000200 	.word	0x20000200
 8001294:	20000208 	.word	0x20000208
 8001298:	200001f8 	.word	0x200001f8
 800129c:	200001fc 	.word	0x200001fc
 80012a0:	200005c0 	.word	0x200005c0
 80012a4:	20000204 	.word	0x20000204
 80012a8:	40000400 	.word	0x40000400
 80012ac:	200002a0 	.word	0x200002a0
 80012b0:	20000234 	.word	0x20000234

	  }
	else if ( (abs(i) == NOTE_C4) || (abs(i) == NOTE_D4) || (abs(i) == NOTE_E4) || (abs(i) == NOTE_F4) || (abs(i) == NOTE_G4) || (abs(i) == NOTE_A4) || (abs(i) == NOTE_B4) || (abs(i) == NOTE_C5) || (abs(i) == NOTE_D5) || (abs(i) == NOTE_E5) || (abs(i) == NOTE_F5) || (abs(i) == NOTE_G5) || (abs(i) == NOTE_A5) || (abs(i) == NOTE_B5)  ){
 80012b4:	4bb4      	ldr	r3, [pc, #720]	; (8001588 <HAL_UART_RxCpltCallback+0x528>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bfb8      	it	lt
 80012bc:	425b      	neglt	r3, r3
 80012be:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80012c2:	d06c      	beq.n	800139e <HAL_UART_RxCpltCallback+0x33e>
 80012c4:	4bb0      	ldr	r3, [pc, #704]	; (8001588 <HAL_UART_RxCpltCallback+0x528>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	bfb8      	it	lt
 80012cc:	425b      	neglt	r3, r3
 80012ce:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 80012d2:	d064      	beq.n	800139e <HAL_UART_RxCpltCallback+0x33e>
 80012d4:	4bac      	ldr	r3, [pc, #688]	; (8001588 <HAL_UART_RxCpltCallback+0x528>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	bfb8      	it	lt
 80012dc:	425b      	neglt	r3, r3
 80012de:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80012e2:	d05c      	beq.n	800139e <HAL_UART_RxCpltCallback+0x33e>
 80012e4:	4ba8      	ldr	r3, [pc, #672]	; (8001588 <HAL_UART_RxCpltCallback+0x528>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	bfb8      	it	lt
 80012ec:	425b      	neglt	r3, r3
 80012ee:	f240 125d 	movw	r2, #349	; 0x15d
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d053      	beq.n	800139e <HAL_UART_RxCpltCallback+0x33e>
 80012f6:	4ba4      	ldr	r3, [pc, #656]	; (8001588 <HAL_UART_RxCpltCallback+0x528>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	bfb8      	it	lt
 80012fe:	425b      	neglt	r3, r3
 8001300:	f5b3 7fc4 	cmp.w	r3, #392	; 0x188
 8001304:	d04b      	beq.n	800139e <HAL_UART_RxCpltCallback+0x33e>
 8001306:	4ba0      	ldr	r3, [pc, #640]	; (8001588 <HAL_UART_RxCpltCallback+0x528>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	bfb8      	it	lt
 800130e:	425b      	neglt	r3, r3
 8001310:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 8001314:	d043      	beq.n	800139e <HAL_UART_RxCpltCallback+0x33e>
 8001316:	4b9c      	ldr	r3, [pc, #624]	; (8001588 <HAL_UART_RxCpltCallback+0x528>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	bfb8      	it	lt
 800131e:	425b      	neglt	r3, r3
 8001320:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8001324:	d03b      	beq.n	800139e <HAL_UART_RxCpltCallback+0x33e>
 8001326:	4b98      	ldr	r3, [pc, #608]	; (8001588 <HAL_UART_RxCpltCallback+0x528>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	bfb8      	it	lt
 800132e:	425b      	neglt	r3, r3
 8001330:	f240 220b 	movw	r2, #523	; 0x20b
 8001334:	4293      	cmp	r3, r2
 8001336:	d032      	beq.n	800139e <HAL_UART_RxCpltCallback+0x33e>
 8001338:	4b93      	ldr	r3, [pc, #588]	; (8001588 <HAL_UART_RxCpltCallback+0x528>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	bfb8      	it	lt
 8001340:	425b      	neglt	r3, r3
 8001342:	f240 224b 	movw	r2, #587	; 0x24b
 8001346:	4293      	cmp	r3, r2
 8001348:	d029      	beq.n	800139e <HAL_UART_RxCpltCallback+0x33e>
 800134a:	4b8f      	ldr	r3, [pc, #572]	; (8001588 <HAL_UART_RxCpltCallback+0x528>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	bfb8      	it	lt
 8001352:	425b      	neglt	r3, r3
 8001354:	f240 2293 	movw	r2, #659	; 0x293
 8001358:	4293      	cmp	r3, r2
 800135a:	d020      	beq.n	800139e <HAL_UART_RxCpltCallback+0x33e>
 800135c:	4b8a      	ldr	r3, [pc, #552]	; (8001588 <HAL_UART_RxCpltCallback+0x528>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	bfb8      	it	lt
 8001364:	425b      	neglt	r3, r3
 8001366:	f240 22ba 	movw	r2, #698	; 0x2ba
 800136a:	4293      	cmp	r3, r2
 800136c:	d017      	beq.n	800139e <HAL_UART_RxCpltCallback+0x33e>
 800136e:	4b86      	ldr	r3, [pc, #536]	; (8001588 <HAL_UART_RxCpltCallback+0x528>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	bfb8      	it	lt
 8001376:	425b      	neglt	r3, r3
 8001378:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 800137c:	d00f      	beq.n	800139e <HAL_UART_RxCpltCallback+0x33e>
 800137e:	4b82      	ldr	r3, [pc, #520]	; (8001588 <HAL_UART_RxCpltCallback+0x528>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	bfb8      	it	lt
 8001386:	425b      	neglt	r3, r3
 8001388:	f5b3 7f5c 	cmp.w	r3, #880	; 0x370
 800138c:	d007      	beq.n	800139e <HAL_UART_RxCpltCallback+0x33e>
 800138e:	4b7e      	ldr	r3, [pc, #504]	; (8001588 <HAL_UART_RxCpltCallback+0x528>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	bfb8      	it	lt
 8001396:	425b      	neglt	r3, r3
 8001398:	f5b3 7f77 	cmp.w	r3, #988	; 0x3dc
 800139c:	d165      	bne.n	800146a <HAL_UART_RxCpltCallback+0x40a>

		  	   if ( (int) abs(i) == nota_stack[last_index-1] ){
 800139e:	4b7a      	ldr	r3, [pc, #488]	; (8001588 <HAL_UART_RxCpltCallback+0x528>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80013a6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80013aa:	4b78      	ldr	r3, [pc, #480]	; (800158c <HAL_UART_RxCpltCallback+0x52c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	4977      	ldr	r1, [pc, #476]	; (8001590 <HAL_UART_RxCpltCallback+0x530>)
 80013b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d133      	bne.n	8001422 <HAL_UART_RxCpltCallback+0x3c2>
		  		set_rgb(0, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff f8e6 	bl	8000590 <set_rgb>
		  		TIM2->CCR2 = 0;
 80013c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013c8:	2200      	movs	r2, #0
 80013ca:	639a      	str	r2, [r3, #56]	; 0x38
		  		for(int k=0;k<10;k++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	637b      	str	r3, [r7, #52]	; 0x34
 80013d0:	e007      	b.n	80013e2 <HAL_UART_RxCpltCallback+0x382>
		  			nota_stack[k] = 0;
 80013d2:	4a6f      	ldr	r2, [pc, #444]	; (8001590 <HAL_UART_RxCpltCallback+0x530>)
 80013d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013d6:	2100      	movs	r1, #0
 80013d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  		for(int k=0;k<10;k++)
 80013dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013de:	3301      	adds	r3, #1
 80013e0:	637b      	str	r3, [r7, #52]	; 0x34
 80013e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e4:	2b09      	cmp	r3, #9
 80013e6:	ddf4      	ble.n	80013d2 <HAL_UART_RxCpltCallback+0x372>

		  		last_index = 0;
 80013e8:	4b68      	ldr	r3, [pc, #416]	; (800158c <HAL_UART_RxCpltCallback+0x52c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]

		  		if(r_start){
 80013ee:	4b69      	ldr	r3, [pc, #420]	; (8001594 <HAL_UART_RxCpltCallback+0x534>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d035      	beq.n	8001462 <HAL_UART_RxCpltCallback+0x402>
		  		int drc = (r_d * 9000) + TIM3->CNT;
 80013f6:	4b68      	ldr	r3, [pc, #416]	; (8001598 <HAL_UART_RxCpltCallback+0x538>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f242 3228 	movw	r2, #9000	; 0x2328
 80013fe:	fb02 f303 	mul.w	r3, r2, r3
 8001402:	461a      	mov	r2, r3
 8001404:	4b65      	ldr	r3, [pc, #404]	; (800159c <HAL_UART_RxCpltCallback+0x53c>)
 8001406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001408:	4413      	add	r3, r2
 800140a:	617b      	str	r3, [r7, #20]
		  		record_duraction[record_length - 1] = drc;
 800140c:	4b64      	ldr	r3, [pc, #400]	; (80015a0 <HAL_UART_RxCpltCallback+0x540>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	3b01      	subs	r3, #1
 8001412:	4964      	ldr	r1, [pc, #400]	; (80015a4 <HAL_UART_RxCpltCallback+0x544>)
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  		TIM3->CNT = 0;
 800141a:	4b60      	ldr	r3, [pc, #384]	; (800159c <HAL_UART_RxCpltCallback+0x53c>)
 800141c:	2200      	movs	r2, #0
 800141e:	625a      	str	r2, [r3, #36]	; 0x24
 8001420:	e01f      	b.n	8001462 <HAL_UART_RxCpltCallback+0x402>
		  	  }
		  	  else{



		  		  int n_i = get_index(abs(i));
 8001422:	4b59      	ldr	r3, [pc, #356]	; (8001588 <HAL_UART_RxCpltCallback+0x528>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	bfb8      	it	lt
 800142a:	425b      	neglt	r3, r3
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f8ef 	bl	8000610 <get_index>
 8001432:	61b8      	str	r0, [r7, #24]

		  		  for(int k = n_i ; 10>k;k++){
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	633b      	str	r3, [r7, #48]	; 0x30
 8001438:	e00b      	b.n	8001452 <HAL_UART_RxCpltCallback+0x3f2>
		  			  nota_stack[k] = nota_stack[k+1];
 800143a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800143c:	3301      	adds	r3, #1
 800143e:	4a54      	ldr	r2, [pc, #336]	; (8001590 <HAL_UART_RxCpltCallback+0x530>)
 8001440:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001444:	4952      	ldr	r1, [pc, #328]	; (8001590 <HAL_UART_RxCpltCallback+0x530>)
 8001446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  		  for(int k = n_i ; 10>k;k++){
 800144c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800144e:	3301      	adds	r3, #1
 8001450:	633b      	str	r3, [r7, #48]	; 0x30
 8001452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001454:	2b09      	cmp	r3, #9
 8001456:	ddf0      	ble.n	800143a <HAL_UART_RxCpltCallback+0x3da>
		  		  }
		  		  last_index --;
 8001458:	4b4c      	ldr	r3, [pc, #304]	; (800158c <HAL_UART_RxCpltCallback+0x52c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3b01      	subs	r3, #1
 800145e:	4a4b      	ldr	r2, [pc, #300]	; (800158c <HAL_UART_RxCpltCallback+0x52c>)
 8001460:	6013      	str	r3, [r2, #0]

		  	  }



		  	  i = 0;
 8001462:	4b49      	ldr	r3, [pc, #292]	; (8001588 <HAL_UART_RxCpltCallback+0x528>)
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	e146      	b.n	80016f8 <HAL_UART_RxCpltCallback+0x698>

}
	else if((i == 271) || (i == -271) ){
 800146a:	4b47      	ldr	r3, [pc, #284]	; (8001588 <HAL_UART_RxCpltCallback+0x528>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f240 120f 	movw	r2, #271	; 0x10f
 8001472:	4293      	cmp	r3, r2
 8001474:	d006      	beq.n	8001484 <HAL_UART_RxCpltCallback+0x424>
 8001476:	4b44      	ldr	r3, [pc, #272]	; (8001588 <HAL_UART_RxCpltCallback+0x528>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f46f 7287 	mvn.w	r2, #270	; 0x10e
 800147e:	4293      	cmp	r3, r2
 8001480:	f040 8096 	bne.w	80015b0 <HAL_UART_RxCpltCallback+0x550>


	 			  if(i == 271){
 8001484:	4b40      	ldr	r3, [pc, #256]	; (8001588 <HAL_UART_RxCpltCallback+0x528>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f240 120f 	movw	r2, #271	; 0x10f
 800148c:	4293      	cmp	r3, r2
 800148e:	d148      	bne.n	8001522 <HAL_UART_RxCpltCallback+0x4c2>

	 				  for(int j = 0 ; 200 > j ; j++){
 8001490:	2300      	movs	r3, #0
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001494:	e00c      	b.n	80014b0 <HAL_UART_RxCpltCallback+0x450>
	 					  record_list[j] = 0;
 8001496:	4a44      	ldr	r2, [pc, #272]	; (80015a8 <HAL_UART_RxCpltCallback+0x548>)
 8001498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149a:	2100      	movs	r1, #0
 800149c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 					  record_duraction[j] = 0;
 80014a0:	4a40      	ldr	r2, [pc, #256]	; (80015a4 <HAL_UART_RxCpltCallback+0x544>)
 80014a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a4:	2100      	movs	r1, #0
 80014a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 				  for(int j = 0 ; 200 > j ; j++){
 80014aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ac:	3301      	adds	r3, #1
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b2:	2bc7      	cmp	r3, #199	; 0xc7
 80014b4:	ddef      	ble.n	8001496 <HAL_UART_RxCpltCallback+0x436>
	 				  }
	 				  record_length = 0;
 80014b6:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <HAL_UART_RxCpltCallback+0x540>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
	 				  r_start = 1;
 80014bc:	4b35      	ldr	r3, [pc, #212]	; (8001594 <HAL_UART_RxCpltCallback+0x534>)
 80014be:	2201      	movs	r2, #1
 80014c0:	601a      	str	r2, [r3, #0]

	 				 set_rgb(255, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	20ff      	movs	r0, #255	; 0xff
 80014c8:	f7ff f862 	bl	8000590 <set_rgb>
	 				 setfreq(200);
 80014cc:	20c8      	movs	r0, #200	; 0xc8
 80014ce:	f7ff f87d 	bl	80005cc <setfreq>
	 				 	 delay(200);
 80014d2:	20c8      	movs	r0, #200	; 0xc8
 80014d4:	f7ff f8bc 	bl	8000650 <delay>
	 				 set_rgb(0, 255, 0);
 80014d8:	2200      	movs	r2, #0
 80014da:	21ff      	movs	r1, #255	; 0xff
 80014dc:	2000      	movs	r0, #0
 80014de:	f7ff f857 	bl	8000590 <set_rgb>
	 				 setfreq(400);
 80014e2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80014e6:	f7ff f871 	bl	80005cc <setfreq>
	 				 	 delay(200);
 80014ea:	20c8      	movs	r0, #200	; 0xc8
 80014ec:	f7ff f8b0 	bl	8000650 <delay>
	 				 set_rgb(0, 0, 255);
 80014f0:	22ff      	movs	r2, #255	; 0xff
 80014f2:	2100      	movs	r1, #0
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff f84b 	bl	8000590 <set_rgb>
	 				 setfreq(600);
 80014fa:	f44f 7016 	mov.w	r0, #600	; 0x258
 80014fe:	f7ff f865 	bl	80005cc <setfreq>
	 				 	 delay(200);
 8001502:	20c8      	movs	r0, #200	; 0xc8
 8001504:	f7ff f8a4 	bl	8000650 <delay>
	 				 set_rgb(0, 0, 0);
 8001508:	2200      	movs	r2, #0
 800150a:	2100      	movs	r1, #0
 800150c:	2000      	movs	r0, #0
 800150e:	f7ff f83f 	bl	8000590 <set_rgb>
	 				 TIM2->CCR2 = 0;
 8001512:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001516:	2200      	movs	r2, #0
 8001518:	639a      	str	r2, [r3, #56]	; 0x38
	 				 previous = 0;
 800151a:	4b24      	ldr	r3, [pc, #144]	; (80015ac <HAL_UART_RxCpltCallback+0x54c>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	e02e      	b.n	8001580 <HAL_UART_RxCpltCallback+0x520>
	 			  }
	 			  else{
	 				  	  r_start = 0;
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <HAL_UART_RxCpltCallback+0x534>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
	 					 set_rgb(0, 0, 255);
 8001528:	22ff      	movs	r2, #255	; 0xff
 800152a:	2100      	movs	r1, #0
 800152c:	2000      	movs	r0, #0
 800152e:	f7ff f82f 	bl	8000590 <set_rgb>
	 					 setfreq(600);
 8001532:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001536:	f7ff f849 	bl	80005cc <setfreq>
	 					 	 delay(200);
 800153a:	20c8      	movs	r0, #200	; 0xc8
 800153c:	f7ff f888 	bl	8000650 <delay>
	 					 set_rgb(0, 255, 0);
 8001540:	2200      	movs	r2, #0
 8001542:	21ff      	movs	r1, #255	; 0xff
 8001544:	2000      	movs	r0, #0
 8001546:	f7ff f823 	bl	8000590 <set_rgb>
	 					 setfreq(400);
 800154a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800154e:	f7ff f83d 	bl	80005cc <setfreq>
	 					 	 delay(200);
 8001552:	20c8      	movs	r0, #200	; 0xc8
 8001554:	f7ff f87c 	bl	8000650 <delay>
	 					 set_rgb(255, 0, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2100      	movs	r1, #0
 800155c:	20ff      	movs	r0, #255	; 0xff
 800155e:	f7ff f817 	bl	8000590 <set_rgb>
	 					 setfreq(200);
 8001562:	20c8      	movs	r0, #200	; 0xc8
 8001564:	f7ff f832 	bl	80005cc <setfreq>
	 					 	 delay(200);
 8001568:	20c8      	movs	r0, #200	; 0xc8
 800156a:	f7ff f871 	bl	8000650 <delay>
	 					 set_rgb(0, 0, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	2000      	movs	r0, #0
 8001574:	f7ff f80c 	bl	8000590 <set_rgb>
	 					 TIM2->CCR2 = 0;
 8001578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800157c:	2200      	movs	r2, #0
 800157e:	639a      	str	r2, [r3, #56]	; 0x38


	 			  }

	 			  i = 0;
 8001580:	4b01      	ldr	r3, [pc, #4]	; (8001588 <HAL_UART_RxCpltCallback+0x528>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	e0b7      	b.n	80016f8 <HAL_UART_RxCpltCallback+0x698>
 8001588:	2000029c 	.word	0x2000029c
 800158c:	200001f8 	.word	0x200001f8
 8001590:	20000234 	.word	0x20000234
 8001594:	20000200 	.word	0x20000200
 8001598:	20000204 	.word	0x20000204
 800159c:	40000400 	.word	0x40000400
 80015a0:	200001fc 	.word	0x200001fc
 80015a4:	200002a0 	.word	0x200002a0
 80015a8:	200005c0 	.word	0x200005c0
 80015ac:	20000208 	.word	0x20000208
	 		  }
	 		  else if( (i == 272) || (i == 273) || (i == 274) || (i == 275)   ){
 80015b0:	4b5b      	ldr	r3, [pc, #364]	; (8001720 <HAL_UART_RxCpltCallback+0x6c0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80015b8:	d010      	beq.n	80015dc <HAL_UART_RxCpltCallback+0x57c>
 80015ba:	4b59      	ldr	r3, [pc, #356]	; (8001720 <HAL_UART_RxCpltCallback+0x6c0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f240 1211 	movw	r2, #273	; 0x111
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d00a      	beq.n	80015dc <HAL_UART_RxCpltCallback+0x57c>
 80015c6:	4b56      	ldr	r3, [pc, #344]	; (8001720 <HAL_UART_RxCpltCallback+0x6c0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 80015ce:	d005      	beq.n	80015dc <HAL_UART_RxCpltCallback+0x57c>
 80015d0:	4b53      	ldr	r3, [pc, #332]	; (8001720 <HAL_UART_RxCpltCallback+0x6c0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f240 1213 	movw	r2, #275	; 0x113
 80015d8:	4293      	cmp	r3, r2
 80015da:	d173      	bne.n	80016c4 <HAL_UART_RxCpltCallback+0x664>
	 			  float song_speed = 0;
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
	 			  if(i == 272)
 80015e2:	4b4f      	ldr	r3, [pc, #316]	; (8001720 <HAL_UART_RxCpltCallback+0x6c0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80015ea:	d103      	bne.n	80015f4 <HAL_UART_RxCpltCallback+0x594>
	 				  song_speed = 0.5;
 80015ec:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80015f2:	e01b      	b.n	800162c <HAL_UART_RxCpltCallback+0x5cc>
	 			  else if (i == 273)
 80015f4:	4b4a      	ldr	r3, [pc, #296]	; (8001720 <HAL_UART_RxCpltCallback+0x6c0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f240 1211 	movw	r2, #273	; 0x111
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d103      	bne.n	8001608 <HAL_UART_RxCpltCallback+0x5a8>
	 				  song_speed = 1;
 8001600:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
 8001606:	e011      	b.n	800162c <HAL_UART_RxCpltCallback+0x5cc>
	 			  else if (i == 274)
 8001608:	4b45      	ldr	r3, [pc, #276]	; (8001720 <HAL_UART_RxCpltCallback+0x6c0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 8001610:	d103      	bne.n	800161a <HAL_UART_RxCpltCallback+0x5ba>
	 				  song_speed = 1.5;
 8001612:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
 8001618:	e008      	b.n	800162c <HAL_UART_RxCpltCallback+0x5cc>
	 			  else if (i == 275)
 800161a:	4b41      	ldr	r3, [pc, #260]	; (8001720 <HAL_UART_RxCpltCallback+0x6c0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f240 1213 	movw	r2, #275	; 0x113
 8001622:	4293      	cmp	r3, r2
 8001624:	d102      	bne.n	800162c <HAL_UART_RxCpltCallback+0x5cc>
	 				  song_speed = 2;
 8001626:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28


	 			  int result;
	 			  for(int i=0;i<record_length;i++){
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
 8001630:	e03b      	b.n	80016aa <HAL_UART_RxCpltCallback+0x64a>
	 		          int w = record_duraction[i] / 10;
 8001632:	4a3c      	ldr	r2, [pc, #240]	; (8001724 <HAL_UART_RxCpltCallback+0x6c4>)
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163a:	4a3b      	ldr	r2, [pc, #236]	; (8001728 <HAL_UART_RxCpltCallback+0x6c8>)
 800163c:	fb82 1203 	smull	r1, r2, r2, r3
 8001640:	1092      	asrs	r2, r2, #2
 8001642:	17db      	asrs	r3, r3, #31
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	61fb      	str	r3, [r7, #28]

	 		          w = w / song_speed;
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	ee07 3a90 	vmov	s15, r3
 800164e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001652:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800165a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800165e:	ee17 3a90 	vmov	r3, s15
 8001662:	61fb      	str	r3, [r7, #28]

	 		          if(record_list[i] == 0){
 8001664:	4a31      	ldr	r2, [pc, #196]	; (800172c <HAL_UART_RxCpltCallback+0x6cc>)
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <HAL_UART_RxCpltCallback+0x616>
	 		              result = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
 8001674:	e004      	b.n	8001680 <HAL_UART_RxCpltCallback+0x620>

	 		              }
	 		          else {
	 		              result = record_list[i];
 8001676:	4a2d      	ldr	r2, [pc, #180]	; (800172c <HAL_UART_RxCpltCallback+0x6cc>)
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167e:	627b      	str	r3, [r7, #36]	; 0x24

	 		              }

	 					play_rgb_notes((int)record_list [i]);
 8001680:	4a2a      	ldr	r2, [pc, #168]	; (800172c <HAL_UART_RxCpltCallback+0x6cc>)
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe fffb 	bl	8000684 <play_rgb_notes>



	 		          setfreq(result);
 800168e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001690:	f7fe ff9c 	bl	80005cc <setfreq>
	 		          delay(w);
 8001694:	69f8      	ldr	r0, [r7, #28]
 8001696:	f7fe ffdb 	bl	8000650 <delay>
	 		          set_rgb(0, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	2000      	movs	r0, #0
 80016a0:	f7fe ff76 	bl	8000590 <set_rgb>
	 			  for(int i=0;i<record_length;i++){
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	3301      	adds	r3, #1
 80016a8:	623b      	str	r3, [r7, #32]
 80016aa:	4b21      	ldr	r3, [pc, #132]	; (8001730 <HAL_UART_RxCpltCallback+0x6d0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6a3a      	ldr	r2, [r7, #32]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	dbbe      	blt.n	8001632 <HAL_UART_RxCpltCallback+0x5d2>

	 			  }
	 			  TIM2->CCR2 = 0;
 80016b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016b8:	2200      	movs	r2, #0
 80016ba:	639a      	str	r2, [r3, #56]	; 0x38
	 			  i = 0;
 80016bc:	4b18      	ldr	r3, [pc, #96]	; (8001720 <HAL_UART_RxCpltCallback+0x6c0>)
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
	 		  else if( (i == 272) || (i == 273) || (i == 274) || (i == 275)   ){
 80016c2:	e019      	b.n	80016f8 <HAL_UART_RxCpltCallback+0x698>
	 		  }
	 		  else if(i >= 100 && i < 105){
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <HAL_UART_RxCpltCallback+0x6c0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b63      	cmp	r3, #99	; 0x63
 80016ca:	dd15      	ble.n	80016f8 <HAL_UART_RxCpltCallback+0x698>
 80016cc:	4b14      	ldr	r3, [pc, #80]	; (8001720 <HAL_UART_RxCpltCallback+0x6c0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b68      	cmp	r3, #104	; 0x68
 80016d2:	dc11      	bgt.n	80016f8 <HAL_UART_RxCpltCallback+0x698>
	 			  stop = 0;
 80016d4:	4b17      	ldr	r3, [pc, #92]	; (8001734 <HAL_UART_RxCpltCallback+0x6d4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
	 			  if(i == 100)
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <HAL_UART_RxCpltCallback+0x6c0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b64      	cmp	r3, #100	; 0x64
 80016e0:	d103      	bne.n	80016ea <HAL_UART_RxCpltCallback+0x68a>
	 				  songs[0] = 1;
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <HAL_UART_RxCpltCallback+0x6d8>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	e006      	b.n	80016f8 <HAL_UART_RxCpltCallback+0x698>
	 			  else if(i == 104)
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <HAL_UART_RxCpltCallback+0x6c0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b68      	cmp	r3, #104	; 0x68
 80016f0:	d102      	bne.n	80016f8 <HAL_UART_RxCpltCallback+0x698>
	 				  songs[3] = 1;
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_UART_RxCpltCallback+0x6d8>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	60da      	str	r2, [r3, #12]

	 		  }


	}
	  if(bt == 0)
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <HAL_UART_RxCpltCallback+0x6dc>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d105      	bne.n	800170c <HAL_UART_RxCpltCallback+0x6ac>
		  HAL_UART_Receive_IT(&huart2, rec, 6);
 8001700:	2206      	movs	r2, #6
 8001702:	490f      	ldr	r1, [pc, #60]	; (8001740 <HAL_UART_RxCpltCallback+0x6e0>)
 8001704:	480f      	ldr	r0, [pc, #60]	; (8001744 <HAL_UART_RxCpltCallback+0x6e4>)
 8001706:	f002 f9ed 	bl	8003ae4 <HAL_UART_Receive_IT>
	  else
		  HAL_UART_Receive_IT(&huart6, rec, 6);

}
 800170a:	e004      	b.n	8001716 <HAL_UART_RxCpltCallback+0x6b6>
		  HAL_UART_Receive_IT(&huart6, rec, 6);
 800170c:	2206      	movs	r2, #6
 800170e:	490c      	ldr	r1, [pc, #48]	; (8001740 <HAL_UART_RxCpltCallback+0x6e0>)
 8001710:	480d      	ldr	r0, [pc, #52]	; (8001748 <HAL_UART_RxCpltCallback+0x6e8>)
 8001712:	f002 f9e7 	bl	8003ae4 <HAL_UART_Receive_IT>
}
 8001716:	bf00      	nop
 8001718:	3738      	adds	r7, #56	; 0x38
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000029c 	.word	0x2000029c
 8001724:	200002a0 	.word	0x200002a0
 8001728:	66666667 	.word	0x66666667
 800172c:	200005c0 	.word	0x200005c0
 8001730:	200001fc 	.word	0x200001fc
 8001734:	20000214 	.word	0x20000214
 8001738:	20000218 	.word	0x20000218
 800173c:	20000210 	.word	0x20000210
 8001740:	200009e0 	.word	0x200009e0
 8001744:	200009a0 	.word	0x200009a0
 8001748:	20000920 	.word	0x20000920

0800174c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <HAL_MspInit+0x4c>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	4a0f      	ldr	r2, [pc, #60]	; (80017a8 <HAL_MspInit+0x4c>)
 800176c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001770:	6453      	str	r3, [r2, #68]	; 0x44
 8001772:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <HAL_MspInit+0x4c>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_MspInit+0x4c>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	4a08      	ldr	r2, [pc, #32]	; (80017a8 <HAL_MspInit+0x4c>)
 8001788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178c:	6413      	str	r3, [r2, #64]	; 0x40
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_MspInit+0x4c>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800

080017ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <HAL_TIM_PWM_MspInit+0x3c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d10d      	bne.n	80017da <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_TIM_PWM_MspInit+0x40>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	4a09      	ldr	r2, [pc, #36]	; (80017ec <HAL_TIM_PWM_MspInit+0x40>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6453      	str	r3, [r2, #68]	; 0x44
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <HAL_TIM_PWM_MspInit+0x40>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017da:	bf00      	nop
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40010000 	.word	0x40010000
 80017ec:	40023800 	.word	0x40023800

080017f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001800:	d10e      	bne.n	8001820 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <HAL_TIM_Base_MspInit+0x70>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a15      	ldr	r2, [pc, #84]	; (8001860 <HAL_TIM_Base_MspInit+0x70>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b13      	ldr	r3, [pc, #76]	; (8001860 <HAL_TIM_Base_MspInit+0x70>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800181e:	e01a      	b.n	8001856 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0f      	ldr	r2, [pc, #60]	; (8001864 <HAL_TIM_Base_MspInit+0x74>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d115      	bne.n	8001856 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <HAL_TIM_Base_MspInit+0x70>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <HAL_TIM_Base_MspInit+0x70>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	6413      	str	r3, [r2, #64]	; 0x40
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_TIM_Base_MspInit+0x70>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	201d      	movs	r0, #29
 800184c:	f000 fafd 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001850:	201d      	movs	r0, #29
 8001852:	f000 fb16 	bl	8001e82 <HAL_NVIC_EnableIRQ>
}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800
 8001864:	40000400 	.word	0x40000400

08001868 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a24      	ldr	r2, [pc, #144]	; (8001918 <HAL_TIM_MspPostInit+0xb0>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d11f      	bne.n	80018ca <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	4b23      	ldr	r3, [pc, #140]	; (800191c <HAL_TIM_MspPostInit+0xb4>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a22      	ldr	r2, [pc, #136]	; (800191c <HAL_TIM_MspPostInit+0xb4>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b20      	ldr	r3, [pc, #128]	; (800191c <HAL_TIM_MspPostInit+0xb4>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80018a6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018b8:	2301      	movs	r3, #1
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	4817      	ldr	r0, [pc, #92]	; (8001920 <HAL_TIM_MspPostInit+0xb8>)
 80018c4:	f000 fb1a 	bl	8001efc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018c8:	e022      	b.n	8001910 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d2:	d11d      	bne.n	8001910 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_TIM_MspPostInit+0xb4>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	4a0f      	ldr	r2, [pc, #60]	; (800191c <HAL_TIM_MspPostInit+0xb4>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6313      	str	r3, [r2, #48]	; 0x30
 80018e4:	4b0d      	ldr	r3, [pc, #52]	; (800191c <HAL_TIM_MspPostInit+0xb4>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018f0:	2302      	movs	r3, #2
 80018f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001900:	2301      	movs	r3, #1
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4619      	mov	r1, r3
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <HAL_TIM_MspPostInit+0xb8>)
 800190c:	f000 faf6 	bl	8001efc <HAL_GPIO_Init>
}
 8001910:	bf00      	nop
 8001912:	3728      	adds	r7, #40	; 0x28
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40010000 	.word	0x40010000
 800191c:	40023800 	.word	0x40023800
 8001920:	40020000 	.word	0x40020000

08001924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08c      	sub	sp, #48	; 0x30
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a3a      	ldr	r2, [pc, #232]	; (8001a2c <HAL_UART_MspInit+0x108>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d134      	bne.n	80019b0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
 800194a:	4b39      	ldr	r3, [pc, #228]	; (8001a30 <HAL_UART_MspInit+0x10c>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	4a38      	ldr	r2, [pc, #224]	; (8001a30 <HAL_UART_MspInit+0x10c>)
 8001950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001954:	6413      	str	r3, [r2, #64]	; 0x40
 8001956:	4b36      	ldr	r3, [pc, #216]	; (8001a30 <HAL_UART_MspInit+0x10c>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	61bb      	str	r3, [r7, #24]
 8001960:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	4b32      	ldr	r3, [pc, #200]	; (8001a30 <HAL_UART_MspInit+0x10c>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a31      	ldr	r2, [pc, #196]	; (8001a30 <HAL_UART_MspInit+0x10c>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b2f      	ldr	r3, [pc, #188]	; (8001a30 <HAL_UART_MspInit+0x10c>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800197e:	230c      	movs	r3, #12
 8001980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	2302      	movs	r3, #2
 8001984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198a:	2303      	movs	r3, #3
 800198c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800198e:	2307      	movs	r3, #7
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	f107 031c 	add.w	r3, r7, #28
 8001996:	4619      	mov	r1, r3
 8001998:	4826      	ldr	r0, [pc, #152]	; (8001a34 <HAL_UART_MspInit+0x110>)
 800199a:	f000 faaf 	bl	8001efc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2100      	movs	r1, #0
 80019a2:	2026      	movs	r0, #38	; 0x26
 80019a4:	f000 fa51 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019a8:	2026      	movs	r0, #38	; 0x26
 80019aa:	f000 fa6a 	bl	8001e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80019ae:	e038      	b.n	8001a22 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a20      	ldr	r2, [pc, #128]	; (8001a38 <HAL_UART_MspInit+0x114>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d133      	bne.n	8001a22 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <HAL_UART_MspInit+0x10c>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	4a1b      	ldr	r2, [pc, #108]	; (8001a30 <HAL_UART_MspInit+0x10c>)
 80019c4:	f043 0320 	orr.w	r3, r3, #32
 80019c8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ca:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <HAL_UART_MspInit+0x10c>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	f003 0320 	and.w	r3, r3, #32
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <HAL_UART_MspInit+0x10c>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <HAL_UART_MspInit+0x10c>)
 80019e0:	f043 0304 	orr.w	r3, r3, #4
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <HAL_UART_MspInit+0x10c>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019f2:	23c0      	movs	r3, #192	; 0xc0
 80019f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fe:	2303      	movs	r3, #3
 8001a00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a02:	2308      	movs	r3, #8
 8001a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a06:	f107 031c 	add.w	r3, r7, #28
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	480b      	ldr	r0, [pc, #44]	; (8001a3c <HAL_UART_MspInit+0x118>)
 8001a0e:	f000 fa75 	bl	8001efc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	2047      	movs	r0, #71	; 0x47
 8001a18:	f000 fa17 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001a1c:	2047      	movs	r0, #71	; 0x47
 8001a1e:	f000 fa30 	bl	8001e82 <HAL_NVIC_EnableIRQ>
}
 8001a22:	bf00      	nop
 8001a24:	3730      	adds	r7, #48	; 0x30
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40004400 	.word	0x40004400
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020000 	.word	0x40020000
 8001a38:	40011400 	.word	0x40011400
 8001a3c:	40020800 	.word	0x40020800

08001a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a52:	e7fe      	b.n	8001a52 <HardFault_Handler+0x4>

08001a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <MemManage_Handler+0x4>

08001a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <BusFault_Handler+0x4>

08001a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <UsageFault_Handler+0x4>

08001a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a94:	f000 f8de 	bl	8001c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001aa0:	4802      	ldr	r0, [pc, #8]	; (8001aac <TIM3_IRQHandler+0x10>)
 8001aa2:	f001 f8eb 	bl	8002c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	2000025c 	.word	0x2000025c

08001ab0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <USART2_IRQHandler+0x10>)
 8001ab6:	f002 f86b 	bl	8003b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	200009a0 	.word	0x200009a0

08001ac4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <USART6_IRQHandler+0x10>)
 8001aca:	f002 f861 	bl	8003b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000920 	.word	0x20000920

08001ad8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <_sbrk+0x50>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d102      	bne.n	8001aee <_sbrk+0x16>
		heap_end = &end;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <_sbrk+0x50>)
 8001aea:	4a10      	ldr	r2, [pc, #64]	; (8001b2c <_sbrk+0x54>)
 8001aec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <_sbrk+0x50>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <_sbrk+0x50>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4413      	add	r3, r2
 8001afc:	466a      	mov	r2, sp
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d907      	bls.n	8001b12 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001b02:	f002 fe41 	bl	8004788 <__errno>
 8001b06:	4602      	mov	r2, r0
 8001b08:	230c      	movs	r3, #12
 8001b0a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b10:	e006      	b.n	8001b20 <_sbrk+0x48>
	}

	heap_end += incr;
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <_sbrk+0x50>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	4a03      	ldr	r2, [pc, #12]	; (8001b28 <_sbrk+0x50>)
 8001b1c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000228 	.word	0x20000228
 8001b2c:	200009f0 	.word	0x200009f0

08001b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <SystemInit+0x28>)
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3a:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <SystemInit+0x28>)
 8001b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <SystemInit+0x28>)
 8001b46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b4a:	609a      	str	r2, [r3, #8]
#endif
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b62:	e003      	b.n	8001b6c <LoopCopyDataInit>

08001b64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b6a:	3104      	adds	r1, #4

08001b6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b6c:	480b      	ldr	r0, [pc, #44]	; (8001b9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b74:	d3f6      	bcc.n	8001b64 <CopyDataInit>
  ldr  r2, =_sbss
 8001b76:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b78:	e002      	b.n	8001b80 <LoopFillZerobss>

08001b7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b7c:	f842 3b04 	str.w	r3, [r2], #4

08001b80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b84:	d3f9      	bcc.n	8001b7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b86:	f7ff ffd3 	bl	8001b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b8a:	f002 fe03 	bl	8004794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b8e:	f7fe ff0f 	bl	80009b0 <main>
  bx  lr    
 8001b92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b94:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b98:	08005f54 	.word	0x08005f54
  ldr  r0, =_sdata
 8001b9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ba0:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001ba4:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001ba8:	200009f0 	.word	0x200009f0

08001bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bac:	e7fe      	b.n	8001bac <ADC_IRQHandler>
	...

08001bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <HAL_Init+0x40>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <HAL_Init+0x40>)
 8001bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_Init+0x40>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <HAL_Init+0x40>)
 8001bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HAL_Init+0x40>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <HAL_Init+0x40>)
 8001bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd8:	2003      	movs	r0, #3
 8001bda:	f000 f92b 	bl	8001e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bde:	2000      	movs	r0, #0
 8001be0:	f000 f808 	bl	8001bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be4:	f7ff fdba 	bl	800175c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023c00 	.word	0x40023c00

08001bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_InitTick+0x54>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_InitTick+0x58>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f943 	bl	8001e9e <HAL_SYSTICK_Config>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00e      	b.n	8001c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	d80a      	bhi.n	8001c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	f000 f90b 	bl	8001e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c34:	4a06      	ldr	r2, [pc, #24]	; (8001c50 <HAL_InitTick+0x5c>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e000      	b.n	8001c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	20000008 	.word	0x20000008
 8001c50:	20000004 	.word	0x20000004

08001c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_IncTick+0x20>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_IncTick+0x24>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <HAL_IncTick+0x24>)
 8001c66:	6013      	str	r3, [r2, #0]
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000008 	.word	0x20000008
 8001c78:	200009e8 	.word	0x200009e8

08001c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <HAL_GetTick+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	200009e8 	.word	0x200009e8

08001c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc6:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	60d3      	str	r3, [r2, #12]
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	f003 0307 	and.w	r3, r3, #7
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	db0b      	blt.n	8001d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	f003 021f 	and.w	r2, r3, #31
 8001d10:	4907      	ldr	r1, [pc, #28]	; (8001d30 <__NVIC_EnableIRQ+0x38>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	2001      	movs	r0, #1
 8001d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000e100 	.word	0xe000e100

08001d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	db0a      	blt.n	8001d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	490c      	ldr	r1, [pc, #48]	; (8001d80 <__NVIC_SetPriority+0x4c>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	0112      	lsls	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	440b      	add	r3, r1
 8001d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d5c:	e00a      	b.n	8001d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4908      	ldr	r1, [pc, #32]	; (8001d84 <__NVIC_SetPriority+0x50>)
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3b04      	subs	r3, #4
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	440b      	add	r3, r1
 8001d72:	761a      	strb	r2, [r3, #24]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000e100 	.word	0xe000e100
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f1c3 0307 	rsb	r3, r3, #7
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	bf28      	it	cs
 8001da6:	2304      	movcs	r3, #4
 8001da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3304      	adds	r3, #4
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d902      	bls.n	8001db8 <NVIC_EncodePriority+0x30>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3b03      	subs	r3, #3
 8001db6:	e000      	b.n	8001dba <NVIC_EncodePriority+0x32>
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43d9      	mvns	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	4313      	orrs	r3, r2
         );
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e00:	d301      	bcc.n	8001e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00f      	b.n	8001e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <SysTick_Config+0x40>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0e:	210f      	movs	r1, #15
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f7ff ff8e 	bl	8001d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <SysTick_Config+0x40>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <SysTick_Config+0x40>)
 8001e20:	2207      	movs	r2, #7
 8001e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	e000e010 	.word	0xe000e010

08001e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff29 	bl	8001c94 <__NVIC_SetPriorityGrouping>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5c:	f7ff ff3e 	bl	8001cdc <__NVIC_GetPriorityGrouping>
 8001e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	6978      	ldr	r0, [r7, #20]
 8001e68:	f7ff ff8e 	bl	8001d88 <NVIC_EncodePriority>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff5d 	bl	8001d34 <__NVIC_SetPriority>
}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff31 	bl	8001cf8 <__NVIC_EnableIRQ>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ffa2 	bl	8001df0 <SysTick_Config>
 8001eac:	4603      	mov	r3, r0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d004      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2280      	movs	r2, #128	; 0x80
 8001ece:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e00c      	b.n	8001eee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2205      	movs	r2, #5
 8001ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0201 	bic.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b089      	sub	sp, #36	; 0x24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
 8001f16:	e159      	b.n	80021cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f18:	2201      	movs	r2, #1
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	f040 8148 	bne.w	80021c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d00b      	beq.n	8001f56 <HAL_GPIO_Init+0x5a>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d007      	beq.n	8001f56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f4a:	2b11      	cmp	r3, #17
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b12      	cmp	r3, #18
 8001f54:	d130      	bne.n	8001fb8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	2203      	movs	r2, #3
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 0201 	and.w	r2, r3, #1
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0xfc>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b12      	cmp	r3, #18
 8001ff6:	d123      	bne.n	8002040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	08da      	lsrs	r2, r3, #3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3208      	adds	r2, #8
 8002000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	220f      	movs	r2, #15
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	691a      	ldr	r2, [r3, #16]
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	08da      	lsrs	r2, r3, #3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3208      	adds	r2, #8
 800203a:	69b9      	ldr	r1, [r7, #24]
 800203c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	2203      	movs	r2, #3
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0203 	and.w	r2, r3, #3
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 80a2 	beq.w	80021c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	4b56      	ldr	r3, [pc, #344]	; (80021e0 <HAL_GPIO_Init+0x2e4>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	4a55      	ldr	r2, [pc, #340]	; (80021e0 <HAL_GPIO_Init+0x2e4>)
 800208c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002090:	6453      	str	r3, [r2, #68]	; 0x44
 8002092:	4b53      	ldr	r3, [pc, #332]	; (80021e0 <HAL_GPIO_Init+0x2e4>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800209e:	4a51      	ldr	r2, [pc, #324]	; (80021e4 <HAL_GPIO_Init+0x2e8>)
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	089b      	lsrs	r3, r3, #2
 80020a4:	3302      	adds	r3, #2
 80020a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	220f      	movs	r2, #15
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a48      	ldr	r2, [pc, #288]	; (80021e8 <HAL_GPIO_Init+0x2ec>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d019      	beq.n	80020fe <HAL_GPIO_Init+0x202>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a47      	ldr	r2, [pc, #284]	; (80021ec <HAL_GPIO_Init+0x2f0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d013      	beq.n	80020fa <HAL_GPIO_Init+0x1fe>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a46      	ldr	r2, [pc, #280]	; (80021f0 <HAL_GPIO_Init+0x2f4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00d      	beq.n	80020f6 <HAL_GPIO_Init+0x1fa>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a45      	ldr	r2, [pc, #276]	; (80021f4 <HAL_GPIO_Init+0x2f8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d007      	beq.n	80020f2 <HAL_GPIO_Init+0x1f6>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a44      	ldr	r2, [pc, #272]	; (80021f8 <HAL_GPIO_Init+0x2fc>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d101      	bne.n	80020ee <HAL_GPIO_Init+0x1f2>
 80020ea:	2304      	movs	r3, #4
 80020ec:	e008      	b.n	8002100 <HAL_GPIO_Init+0x204>
 80020ee:	2307      	movs	r3, #7
 80020f0:	e006      	b.n	8002100 <HAL_GPIO_Init+0x204>
 80020f2:	2303      	movs	r3, #3
 80020f4:	e004      	b.n	8002100 <HAL_GPIO_Init+0x204>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e002      	b.n	8002100 <HAL_GPIO_Init+0x204>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_GPIO_Init+0x204>
 80020fe:	2300      	movs	r3, #0
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	f002 0203 	and.w	r2, r2, #3
 8002106:	0092      	lsls	r2, r2, #2
 8002108:	4093      	lsls	r3, r2
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002110:	4934      	ldr	r1, [pc, #208]	; (80021e4 <HAL_GPIO_Init+0x2e8>)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	089b      	lsrs	r3, r3, #2
 8002116:	3302      	adds	r3, #2
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800211e:	4b37      	ldr	r3, [pc, #220]	; (80021fc <HAL_GPIO_Init+0x300>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002142:	4a2e      	ldr	r2, [pc, #184]	; (80021fc <HAL_GPIO_Init+0x300>)
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002148:	4b2c      	ldr	r3, [pc, #176]	; (80021fc <HAL_GPIO_Init+0x300>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800216c:	4a23      	ldr	r2, [pc, #140]	; (80021fc <HAL_GPIO_Init+0x300>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002172:	4b22      	ldr	r3, [pc, #136]	; (80021fc <HAL_GPIO_Init+0x300>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002196:	4a19      	ldr	r2, [pc, #100]	; (80021fc <HAL_GPIO_Init+0x300>)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800219c:	4b17      	ldr	r3, [pc, #92]	; (80021fc <HAL_GPIO_Init+0x300>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021c0:	4a0e      	ldr	r2, [pc, #56]	; (80021fc <HAL_GPIO_Init+0x300>)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3301      	adds	r3, #1
 80021ca:	61fb      	str	r3, [r7, #28]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	2b0f      	cmp	r3, #15
 80021d0:	f67f aea2 	bls.w	8001f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021d4:	bf00      	nop
 80021d6:	3724      	adds	r7, #36	; 0x24
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40013800 	.word	0x40013800
 80021e8:	40020000 	.word	0x40020000
 80021ec:	40020400 	.word	0x40020400
 80021f0:	40020800 	.word	0x40020800
 80021f4:	40020c00 	.word	0x40020c00
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40013c00 	.word	0x40013c00

08002200 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	887b      	ldrh	r3, [r7, #2]
 8002212:	4013      	ands	r3, r2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
 800221c:	e001      	b.n	8002222 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800221e:	2300      	movs	r3, #0
 8002220:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002222:	7bfb      	ldrb	r3, [r7, #15]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	807b      	strh	r3, [r7, #2]
 800223c:	4613      	mov	r3, r2
 800223e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002240:	787b      	ldrb	r3, [r7, #1]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002246:	887a      	ldrh	r2, [r7, #2]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800224c:	e003      	b.n	8002256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800224e:	887b      	ldrh	r3, [r7, #2]
 8002250:	041a      	lsls	r2, r3, #16
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	619a      	str	r2, [r3, #24]
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e25b      	b.n	800272e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d075      	beq.n	800236e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002282:	4ba3      	ldr	r3, [pc, #652]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	2b04      	cmp	r3, #4
 800228c:	d00c      	beq.n	80022a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800228e:	4ba0      	ldr	r3, [pc, #640]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002296:	2b08      	cmp	r3, #8
 8002298:	d112      	bne.n	80022c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800229a:	4b9d      	ldr	r3, [pc, #628]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022a6:	d10b      	bne.n	80022c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a8:	4b99      	ldr	r3, [pc, #612]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d05b      	beq.n	800236c <HAL_RCC_OscConfig+0x108>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d157      	bne.n	800236c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e236      	b.n	800272e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c8:	d106      	bne.n	80022d8 <HAL_RCC_OscConfig+0x74>
 80022ca:	4b91      	ldr	r3, [pc, #580]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a90      	ldr	r2, [pc, #576]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 80022d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	e01d      	b.n	8002314 <HAL_RCC_OscConfig+0xb0>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x98>
 80022e2:	4b8b      	ldr	r3, [pc, #556]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a8a      	ldr	r2, [pc, #552]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 80022e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b88      	ldr	r3, [pc, #544]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a87      	ldr	r2, [pc, #540]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 80022f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e00b      	b.n	8002314 <HAL_RCC_OscConfig+0xb0>
 80022fc:	4b84      	ldr	r3, [pc, #528]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a83      	ldr	r2, [pc, #524]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 8002302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	4b81      	ldr	r3, [pc, #516]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a80      	ldr	r2, [pc, #512]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 800230e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d013      	beq.n	8002344 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231c:	f7ff fcae 	bl	8001c7c <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002324:	f7ff fcaa 	bl	8001c7c <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	; 0x64
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e1fb      	b.n	800272e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002336:	4b76      	ldr	r3, [pc, #472]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0xc0>
 8002342:	e014      	b.n	800236e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002344:	f7ff fc9a 	bl	8001c7c <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800234c:	f7ff fc96 	bl	8001c7c <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b64      	cmp	r3, #100	; 0x64
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e1e7      	b.n	800272e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235e:	4b6c      	ldr	r3, [pc, #432]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0xe8>
 800236a:	e000      	b.n	800236e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d063      	beq.n	8002442 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800237a:	4b65      	ldr	r3, [pc, #404]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00b      	beq.n	800239e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002386:	4b62      	ldr	r3, [pc, #392]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800238e:	2b08      	cmp	r3, #8
 8002390:	d11c      	bne.n	80023cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002392:	4b5f      	ldr	r3, [pc, #380]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d116      	bne.n	80023cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239e:	4b5c      	ldr	r3, [pc, #368]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_RCC_OscConfig+0x152>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d001      	beq.n	80023b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e1bb      	b.n	800272e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b6:	4b56      	ldr	r3, [pc, #344]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4952      	ldr	r1, [pc, #328]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ca:	e03a      	b.n	8002442 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d020      	beq.n	8002416 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d4:	4b4f      	ldr	r3, [pc, #316]	; (8002514 <HAL_RCC_OscConfig+0x2b0>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023da:	f7ff fc4f 	bl	8001c7c <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e2:	f7ff fc4b 	bl	8001c7c <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e19c      	b.n	800272e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f4:	4b46      	ldr	r3, [pc, #280]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002400:	4b43      	ldr	r3, [pc, #268]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4940      	ldr	r1, [pc, #256]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 8002410:	4313      	orrs	r3, r2
 8002412:	600b      	str	r3, [r1, #0]
 8002414:	e015      	b.n	8002442 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002416:	4b3f      	ldr	r3, [pc, #252]	; (8002514 <HAL_RCC_OscConfig+0x2b0>)
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7ff fc2e 	bl	8001c7c <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002424:	f7ff fc2a 	bl	8001c7c <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e17b      	b.n	800272e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002436:	4b36      	ldr	r3, [pc, #216]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d030      	beq.n	80024b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d016      	beq.n	8002484 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002456:	4b30      	ldr	r3, [pc, #192]	; (8002518 <HAL_RCC_OscConfig+0x2b4>)
 8002458:	2201      	movs	r2, #1
 800245a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245c:	f7ff fc0e 	bl	8001c7c <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002464:	f7ff fc0a 	bl	8001c7c <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e15b      	b.n	800272e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002476:	4b26      	ldr	r3, [pc, #152]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 8002478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0x200>
 8002482:	e015      	b.n	80024b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002484:	4b24      	ldr	r3, [pc, #144]	; (8002518 <HAL_RCC_OscConfig+0x2b4>)
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248a:	f7ff fbf7 	bl	8001c7c <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002492:	f7ff fbf3 	bl	8001c7c <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e144      	b.n	800272e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a4:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 80024a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1f0      	bne.n	8002492 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80a0 	beq.w	80025fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024be:	2300      	movs	r3, #0
 80024c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c2:	4b13      	ldr	r3, [pc, #76]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10f      	bne.n	80024ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	4a0e      	ldr	r2, [pc, #56]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 80024d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024dc:	6413      	str	r3, [r2, #64]	; 0x40
 80024de:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <HAL_RCC_OscConfig+0x2ac>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ea:	2301      	movs	r3, #1
 80024ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ee:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCC_OscConfig+0x2b8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d121      	bne.n	800253e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024fa:	4b08      	ldr	r3, [pc, #32]	; (800251c <HAL_RCC_OscConfig+0x2b8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a07      	ldr	r2, [pc, #28]	; (800251c <HAL_RCC_OscConfig+0x2b8>)
 8002500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002506:	f7ff fbb9 	bl	8001c7c <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250c:	e011      	b.n	8002532 <HAL_RCC_OscConfig+0x2ce>
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800
 8002514:	42470000 	.word	0x42470000
 8002518:	42470e80 	.word	0x42470e80
 800251c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002520:	f7ff fbac 	bl	8001c7c <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e0fd      	b.n	800272e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002532:	4b81      	ldr	r3, [pc, #516]	; (8002738 <HAL_RCC_OscConfig+0x4d4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d106      	bne.n	8002554 <HAL_RCC_OscConfig+0x2f0>
 8002546:	4b7d      	ldr	r3, [pc, #500]	; (800273c <HAL_RCC_OscConfig+0x4d8>)
 8002548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254a:	4a7c      	ldr	r2, [pc, #496]	; (800273c <HAL_RCC_OscConfig+0x4d8>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	6713      	str	r3, [r2, #112]	; 0x70
 8002552:	e01c      	b.n	800258e <HAL_RCC_OscConfig+0x32a>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b05      	cmp	r3, #5
 800255a:	d10c      	bne.n	8002576 <HAL_RCC_OscConfig+0x312>
 800255c:	4b77      	ldr	r3, [pc, #476]	; (800273c <HAL_RCC_OscConfig+0x4d8>)
 800255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002560:	4a76      	ldr	r2, [pc, #472]	; (800273c <HAL_RCC_OscConfig+0x4d8>)
 8002562:	f043 0304 	orr.w	r3, r3, #4
 8002566:	6713      	str	r3, [r2, #112]	; 0x70
 8002568:	4b74      	ldr	r3, [pc, #464]	; (800273c <HAL_RCC_OscConfig+0x4d8>)
 800256a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256c:	4a73      	ldr	r2, [pc, #460]	; (800273c <HAL_RCC_OscConfig+0x4d8>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	6713      	str	r3, [r2, #112]	; 0x70
 8002574:	e00b      	b.n	800258e <HAL_RCC_OscConfig+0x32a>
 8002576:	4b71      	ldr	r3, [pc, #452]	; (800273c <HAL_RCC_OscConfig+0x4d8>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257a:	4a70      	ldr	r2, [pc, #448]	; (800273c <HAL_RCC_OscConfig+0x4d8>)
 800257c:	f023 0301 	bic.w	r3, r3, #1
 8002580:	6713      	str	r3, [r2, #112]	; 0x70
 8002582:	4b6e      	ldr	r3, [pc, #440]	; (800273c <HAL_RCC_OscConfig+0x4d8>)
 8002584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002586:	4a6d      	ldr	r2, [pc, #436]	; (800273c <HAL_RCC_OscConfig+0x4d8>)
 8002588:	f023 0304 	bic.w	r3, r3, #4
 800258c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d015      	beq.n	80025c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002596:	f7ff fb71 	bl	8001c7c <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800259c:	e00a      	b.n	80025b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800259e:	f7ff fb6d 	bl	8001c7c <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e0bc      	b.n	800272e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b4:	4b61      	ldr	r3, [pc, #388]	; (800273c <HAL_RCC_OscConfig+0x4d8>)
 80025b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0ee      	beq.n	800259e <HAL_RCC_OscConfig+0x33a>
 80025c0:	e014      	b.n	80025ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c2:	f7ff fb5b 	bl	8001c7c <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c8:	e00a      	b.n	80025e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ca:	f7ff fb57 	bl	8001c7c <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d8:	4293      	cmp	r3, r2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e0a6      	b.n	800272e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e0:	4b56      	ldr	r3, [pc, #344]	; (800273c <HAL_RCC_OscConfig+0x4d8>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1ee      	bne.n	80025ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ec:	7dfb      	ldrb	r3, [r7, #23]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d105      	bne.n	80025fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f2:	4b52      	ldr	r3, [pc, #328]	; (800273c <HAL_RCC_OscConfig+0x4d8>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	4a51      	ldr	r2, [pc, #324]	; (800273c <HAL_RCC_OscConfig+0x4d8>)
 80025f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 8092 	beq.w	800272c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002608:	4b4c      	ldr	r3, [pc, #304]	; (800273c <HAL_RCC_OscConfig+0x4d8>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 030c 	and.w	r3, r3, #12
 8002610:	2b08      	cmp	r3, #8
 8002612:	d05c      	beq.n	80026ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d141      	bne.n	80026a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261c:	4b48      	ldr	r3, [pc, #288]	; (8002740 <HAL_RCC_OscConfig+0x4dc>)
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002622:	f7ff fb2b 	bl	8001c7c <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800262a:	f7ff fb27 	bl	8001c7c <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e078      	b.n	800272e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263c:	4b3f      	ldr	r3, [pc, #252]	; (800273c <HAL_RCC_OscConfig+0x4d8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1f0      	bne.n	800262a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69da      	ldr	r2, [r3, #28]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	019b      	lsls	r3, r3, #6
 8002658:	431a      	orrs	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265e:	085b      	lsrs	r3, r3, #1
 8002660:	3b01      	subs	r3, #1
 8002662:	041b      	lsls	r3, r3, #16
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266a:	061b      	lsls	r3, r3, #24
 800266c:	4933      	ldr	r1, [pc, #204]	; (800273c <HAL_RCC_OscConfig+0x4d8>)
 800266e:	4313      	orrs	r3, r2
 8002670:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002672:	4b33      	ldr	r3, [pc, #204]	; (8002740 <HAL_RCC_OscConfig+0x4dc>)
 8002674:	2201      	movs	r2, #1
 8002676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7ff fb00 	bl	8001c7c <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002680:	f7ff fafc 	bl	8001c7c <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e04d      	b.n	800272e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002692:	4b2a      	ldr	r3, [pc, #168]	; (800273c <HAL_RCC_OscConfig+0x4d8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x41c>
 800269e:	e045      	b.n	800272c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a0:	4b27      	ldr	r3, [pc, #156]	; (8002740 <HAL_RCC_OscConfig+0x4dc>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a6:	f7ff fae9 	bl	8001c7c <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ae:	f7ff fae5 	bl	8001c7c <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e036      	b.n	800272e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c0:	4b1e      	ldr	r3, [pc, #120]	; (800273c <HAL_RCC_OscConfig+0x4d8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f0      	bne.n	80026ae <HAL_RCC_OscConfig+0x44a>
 80026cc:	e02e      	b.n	800272c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e029      	b.n	800272e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026da:	4b18      	ldr	r3, [pc, #96]	; (800273c <HAL_RCC_OscConfig+0x4d8>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d11c      	bne.n	8002728 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d115      	bne.n	8002728 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002702:	4013      	ands	r3, r2
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002708:	4293      	cmp	r3, r2
 800270a:	d10d      	bne.n	8002728 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002716:	429a      	cmp	r2, r3
 8002718:	d106      	bne.n	8002728 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e000      	b.n	800272e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40007000 	.word	0x40007000
 800273c:	40023800 	.word	0x40023800
 8002740:	42470060 	.word	0x42470060

08002744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0cc      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002758:	4b68      	ldr	r3, [pc, #416]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d90c      	bls.n	8002780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002766:	4b65      	ldr	r3, [pc, #404]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b63      	ldr	r3, [pc, #396]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0b8      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d020      	beq.n	80027ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002798:	4b59      	ldr	r3, [pc, #356]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a58      	ldr	r2, [pc, #352]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b0:	4b53      	ldr	r3, [pc, #332]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4a52      	ldr	r2, [pc, #328]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027bc:	4b50      	ldr	r3, [pc, #320]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	494d      	ldr	r1, [pc, #308]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d044      	beq.n	8002864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d107      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e2:	4b47      	ldr	r3, [pc, #284]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d119      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e07f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d003      	beq.n	8002802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d107      	bne.n	8002812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002802:	4b3f      	ldr	r3, [pc, #252]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e06f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002812:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e067      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002822:	4b37      	ldr	r3, [pc, #220]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f023 0203 	bic.w	r2, r3, #3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4934      	ldr	r1, [pc, #208]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002830:	4313      	orrs	r3, r2
 8002832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002834:	f7ff fa22 	bl	8001c7c <HAL_GetTick>
 8002838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	e00a      	b.n	8002852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283c:	f7ff fa1e 	bl	8001c7c <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	; 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e04f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002852:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 020c 	and.w	r2, r3, #12
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	429a      	cmp	r2, r3
 8002862:	d1eb      	bne.n	800283c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002864:	4b25      	ldr	r3, [pc, #148]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d20c      	bcs.n	800288c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002872:	4b22      	ldr	r3, [pc, #136]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287a:	4b20      	ldr	r3, [pc, #128]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d001      	beq.n	800288c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e032      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002898:	4b19      	ldr	r3, [pc, #100]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4916      	ldr	r1, [pc, #88]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028b6:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	490e      	ldr	r1, [pc, #56]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ca:	f000 f821 	bl	8002910 <HAL_RCC_GetSysClockFreq>
 80028ce:	4601      	mov	r1, r0
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	4a0a      	ldr	r2, [pc, #40]	; (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 80028dc:	5cd3      	ldrb	r3, [r2, r3]
 80028de:	fa21 f303 	lsr.w	r3, r1, r3
 80028e2:	4a09      	ldr	r2, [pc, #36]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff f982 	bl	8001bf4 <HAL_InitTick>

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40023c00 	.word	0x40023c00
 8002900:	40023800 	.word	0x40023800
 8002904:	08005da0 	.word	0x08005da0
 8002908:	20000000 	.word	0x20000000
 800290c:	20000004 	.word	0x20000004

08002910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	607b      	str	r3, [r7, #4]
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	2300      	movs	r3, #0
 8002920:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002926:	4b50      	ldr	r3, [pc, #320]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x158>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b04      	cmp	r3, #4
 8002930:	d007      	beq.n	8002942 <HAL_RCC_GetSysClockFreq+0x32>
 8002932:	2b08      	cmp	r3, #8
 8002934:	d008      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0x38>
 8002936:	2b00      	cmp	r3, #0
 8002938:	f040 808d 	bne.w	8002a56 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800293c:	4b4b      	ldr	r3, [pc, #300]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x15c>)
 800293e:	60bb      	str	r3, [r7, #8]
       break;
 8002940:	e08c      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002942:	4b4b      	ldr	r3, [pc, #300]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x160>)
 8002944:	60bb      	str	r3, [r7, #8]
      break;
 8002946:	e089      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002948:	4b47      	ldr	r3, [pc, #284]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x158>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002950:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002952:	4b45      	ldr	r3, [pc, #276]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x158>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d023      	beq.n	80029a6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800295e:	4b42      	ldr	r3, [pc, #264]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x158>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	099b      	lsrs	r3, r3, #6
 8002964:	f04f 0400 	mov.w	r4, #0
 8002968:	f240 11ff 	movw	r1, #511	; 0x1ff
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	ea03 0501 	and.w	r5, r3, r1
 8002974:	ea04 0602 	and.w	r6, r4, r2
 8002978:	4a3d      	ldr	r2, [pc, #244]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x160>)
 800297a:	fb02 f106 	mul.w	r1, r2, r6
 800297e:	2200      	movs	r2, #0
 8002980:	fb02 f205 	mul.w	r2, r2, r5
 8002984:	440a      	add	r2, r1
 8002986:	493a      	ldr	r1, [pc, #232]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x160>)
 8002988:	fba5 0101 	umull	r0, r1, r5, r1
 800298c:	1853      	adds	r3, r2, r1
 800298e:	4619      	mov	r1, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f04f 0400 	mov.w	r4, #0
 8002996:	461a      	mov	r2, r3
 8002998:	4623      	mov	r3, r4
 800299a:	f7fd fc79 	bl	8000290 <__aeabi_uldivmod>
 800299e:	4603      	mov	r3, r0
 80029a0:	460c      	mov	r4, r1
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	e049      	b.n	8002a3a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a6:	4b30      	ldr	r3, [pc, #192]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x158>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	099b      	lsrs	r3, r3, #6
 80029ac:	f04f 0400 	mov.w	r4, #0
 80029b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	ea03 0501 	and.w	r5, r3, r1
 80029bc:	ea04 0602 	and.w	r6, r4, r2
 80029c0:	4629      	mov	r1, r5
 80029c2:	4632      	mov	r2, r6
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	f04f 0400 	mov.w	r4, #0
 80029cc:	0154      	lsls	r4, r2, #5
 80029ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029d2:	014b      	lsls	r3, r1, #5
 80029d4:	4619      	mov	r1, r3
 80029d6:	4622      	mov	r2, r4
 80029d8:	1b49      	subs	r1, r1, r5
 80029da:	eb62 0206 	sbc.w	r2, r2, r6
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	f04f 0400 	mov.w	r4, #0
 80029e6:	0194      	lsls	r4, r2, #6
 80029e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029ec:	018b      	lsls	r3, r1, #6
 80029ee:	1a5b      	subs	r3, r3, r1
 80029f0:	eb64 0402 	sbc.w	r4, r4, r2
 80029f4:	f04f 0100 	mov.w	r1, #0
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	00e2      	lsls	r2, r4, #3
 80029fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a02:	00d9      	lsls	r1, r3, #3
 8002a04:	460b      	mov	r3, r1
 8002a06:	4614      	mov	r4, r2
 8002a08:	195b      	adds	r3, r3, r5
 8002a0a:	eb44 0406 	adc.w	r4, r4, r6
 8002a0e:	f04f 0100 	mov.w	r1, #0
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	02a2      	lsls	r2, r4, #10
 8002a18:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a1c:	0299      	lsls	r1, r3, #10
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4614      	mov	r4, r2
 8002a22:	4618      	mov	r0, r3
 8002a24:	4621      	mov	r1, r4
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f04f 0400 	mov.w	r4, #0
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4623      	mov	r3, r4
 8002a30:	f7fd fc2e 	bl	8000290 <__aeabi_uldivmod>
 8002a34:	4603      	mov	r3, r0
 8002a36:	460c      	mov	r4, r1
 8002a38:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	0c1b      	lsrs	r3, r3, #16
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	3301      	adds	r3, #1
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a52:	60bb      	str	r3, [r7, #8]
      break;
 8002a54:	e002      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a56:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002a58:	60bb      	str	r3, [r7, #8]
      break;
 8002a5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	00f42400 	.word	0x00f42400
 8002a70:	017d7840 	.word	0x017d7840

08002a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a78:	4b03      	ldr	r3, [pc, #12]	; (8002a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20000000 	.word	0x20000000

08002a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a90:	f7ff fff0 	bl	8002a74 <HAL_RCC_GetHCLKFreq>
 8002a94:	4601      	mov	r1, r0
 8002a96:	4b05      	ldr	r3, [pc, #20]	; (8002aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	0a9b      	lsrs	r3, r3, #10
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	4a03      	ldr	r2, [pc, #12]	; (8002ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa2:	5cd3      	ldrb	r3, [r2, r3]
 8002aa4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	08005db0 	.word	0x08005db0

08002ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ab8:	f7ff ffdc 	bl	8002a74 <HAL_RCC_GetHCLKFreq>
 8002abc:	4601      	mov	r1, r0
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	0b5b      	lsrs	r3, r3, #13
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	4a03      	ldr	r2, [pc, #12]	; (8002ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aca:	5cd3      	ldrb	r3, [r2, r3]
 8002acc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	08005db0 	.word	0x08005db0

08002adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e01d      	b.n	8002b2a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fe fe74 	bl	80017f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3304      	adds	r3, #4
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	f000 fb5c 	bl	80031d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b085      	sub	sp, #20
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b06      	cmp	r3, #6
 8002b52:	d007      	beq.n	8002b64 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0201 	orr.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f042 0201 	orr.w	r2, r2, #1
 8002b90:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b06      	cmp	r3, #6
 8002ba2:	d007      	beq.n	8002bb4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e01d      	b.n	8002c10 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d106      	bne.n	8002bee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7fe fddf 	bl	80017ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4610      	mov	r0, r2
 8002c02:	f000 fae9 	bl	80031d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2201      	movs	r2, #1
 8002c28:	6839      	ldr	r1, [r7, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 fd7a 	bl	8003724 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a10      	ldr	r2, [pc, #64]	; (8002c78 <HAL_TIM_PWM_Start+0x60>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d107      	bne.n	8002c4a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b06      	cmp	r3, #6
 8002c5a:	d007      	beq.n	8002c6c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40010000 	.word	0x40010000

08002c7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d122      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d11b      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0202 	mvn.w	r2, #2
 8002ca8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 fa6b 	bl	800319a <HAL_TIM_IC_CaptureCallback>
 8002cc4:	e005      	b.n	8002cd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fa5d 	bl	8003186 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 fa6e 	bl	80031ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d122      	bne.n	8002d2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d11b      	bne.n	8002d2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f06f 0204 	mvn.w	r2, #4
 8002cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2202      	movs	r2, #2
 8002d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fa41 	bl	800319a <HAL_TIM_IC_CaptureCallback>
 8002d18:	e005      	b.n	8002d26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fa33 	bl	8003186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 fa44 	bl	80031ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d122      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d11b      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0208 	mvn.w	r2, #8
 8002d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2204      	movs	r2, #4
 8002d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fa17 	bl	800319a <HAL_TIM_IC_CaptureCallback>
 8002d6c:	e005      	b.n	8002d7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fa09 	bl	8003186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fa1a 	bl	80031ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b10      	cmp	r3, #16
 8002d8c:	d122      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	2b10      	cmp	r3, #16
 8002d9a:	d11b      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0210 	mvn.w	r2, #16
 8002da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2208      	movs	r2, #8
 8002daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f9ed 	bl	800319a <HAL_TIM_IC_CaptureCallback>
 8002dc0:	e005      	b.n	8002dce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f9df 	bl	8003186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f9f0 	bl	80031ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d10e      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d107      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0201 	mvn.w	r2, #1
 8002df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fe f91e 	bl	800103c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0a:	2b80      	cmp	r3, #128	; 0x80
 8002e0c:	d10e      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e18:	2b80      	cmp	r3, #128	; 0x80
 8002e1a:	d107      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fd6c 	bl	8003904 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e36:	2b40      	cmp	r3, #64	; 0x40
 8002e38:	d10e      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e44:	2b40      	cmp	r3, #64	; 0x40
 8002e46:	d107      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f9b5 	bl	80031c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	d10e      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0320 	and.w	r3, r3, #32
 8002e70:	2b20      	cmp	r3, #32
 8002e72:	d107      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0220 	mvn.w	r2, #32
 8002e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fd36 	bl	80038f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e84:	bf00      	nop
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e0b4      	b.n	8003010 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b0c      	cmp	r3, #12
 8002eba:	f200 809f 	bhi.w	8002ffc <HAL_TIM_PWM_ConfigChannel+0x170>
 8002ebe:	a201      	add	r2, pc, #4	; (adr r2, 8002ec4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec4:	08002ef9 	.word	0x08002ef9
 8002ec8:	08002ffd 	.word	0x08002ffd
 8002ecc:	08002ffd 	.word	0x08002ffd
 8002ed0:	08002ffd 	.word	0x08002ffd
 8002ed4:	08002f39 	.word	0x08002f39
 8002ed8:	08002ffd 	.word	0x08002ffd
 8002edc:	08002ffd 	.word	0x08002ffd
 8002ee0:	08002ffd 	.word	0x08002ffd
 8002ee4:	08002f7b 	.word	0x08002f7b
 8002ee8:	08002ffd 	.word	0x08002ffd
 8002eec:	08002ffd 	.word	0x08002ffd
 8002ef0:	08002ffd 	.word	0x08002ffd
 8002ef4:	08002fbb 	.word	0x08002fbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 f9ea 	bl	80032d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	699a      	ldr	r2, [r3, #24]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0208 	orr.w	r2, r2, #8
 8002f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0204 	bic.w	r2, r2, #4
 8002f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6999      	ldr	r1, [r3, #24]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	691a      	ldr	r2, [r3, #16]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	619a      	str	r2, [r3, #24]
      break;
 8002f36:	e062      	b.n	8002ffe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fa30 	bl	80033a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699a      	ldr	r2, [r3, #24]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6999      	ldr	r1, [r3, #24]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	021a      	lsls	r2, r3, #8
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	619a      	str	r2, [r3, #24]
      break;
 8002f78:	e041      	b.n	8002ffe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68b9      	ldr	r1, [r7, #8]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fa7b 	bl	800347c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69da      	ldr	r2, [r3, #28]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0208 	orr.w	r2, r2, #8
 8002f94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	69da      	ldr	r2, [r3, #28]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0204 	bic.w	r2, r2, #4
 8002fa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69d9      	ldr	r1, [r3, #28]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	691a      	ldr	r2, [r3, #16]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	61da      	str	r2, [r3, #28]
      break;
 8002fb8:	e021      	b.n	8002ffe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 fac5 	bl	8003550 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69da      	ldr	r2, [r3, #28]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	69da      	ldr	r2, [r3, #28]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69d9      	ldr	r1, [r3, #28]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	021a      	lsls	r2, r3, #8
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	61da      	str	r2, [r3, #28]
      break;
 8002ffa:	e000      	b.n	8002ffe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002ffc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_TIM_ConfigClockSource+0x18>
 800302c:	2302      	movs	r3, #2
 800302e:	e0a6      	b.n	800317e <HAL_TIM_ConfigClockSource+0x166>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800304e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003056:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b40      	cmp	r3, #64	; 0x40
 8003066:	d067      	beq.n	8003138 <HAL_TIM_ConfigClockSource+0x120>
 8003068:	2b40      	cmp	r3, #64	; 0x40
 800306a:	d80b      	bhi.n	8003084 <HAL_TIM_ConfigClockSource+0x6c>
 800306c:	2b10      	cmp	r3, #16
 800306e:	d073      	beq.n	8003158 <HAL_TIM_ConfigClockSource+0x140>
 8003070:	2b10      	cmp	r3, #16
 8003072:	d802      	bhi.n	800307a <HAL_TIM_ConfigClockSource+0x62>
 8003074:	2b00      	cmp	r3, #0
 8003076:	d06f      	beq.n	8003158 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003078:	e078      	b.n	800316c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800307a:	2b20      	cmp	r3, #32
 800307c:	d06c      	beq.n	8003158 <HAL_TIM_ConfigClockSource+0x140>
 800307e:	2b30      	cmp	r3, #48	; 0x30
 8003080:	d06a      	beq.n	8003158 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003082:	e073      	b.n	800316c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003084:	2b70      	cmp	r3, #112	; 0x70
 8003086:	d00d      	beq.n	80030a4 <HAL_TIM_ConfigClockSource+0x8c>
 8003088:	2b70      	cmp	r3, #112	; 0x70
 800308a:	d804      	bhi.n	8003096 <HAL_TIM_ConfigClockSource+0x7e>
 800308c:	2b50      	cmp	r3, #80	; 0x50
 800308e:	d033      	beq.n	80030f8 <HAL_TIM_ConfigClockSource+0xe0>
 8003090:	2b60      	cmp	r3, #96	; 0x60
 8003092:	d041      	beq.n	8003118 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003094:	e06a      	b.n	800316c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309a:	d066      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x152>
 800309c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a0:	d017      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80030a2:	e063      	b.n	800316c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	6899      	ldr	r1, [r3, #8]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f000 fb16 	bl	80036e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030c6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	609a      	str	r2, [r3, #8]
      break;
 80030d0:	e04c      	b.n	800316c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6899      	ldr	r1, [r3, #8]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f000 faff 	bl	80036e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030f4:	609a      	str	r2, [r3, #8]
      break;
 80030f6:	e039      	b.n	800316c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6818      	ldr	r0, [r3, #0]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	461a      	mov	r2, r3
 8003106:	f000 fa73 	bl	80035f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2150      	movs	r1, #80	; 0x50
 8003110:	4618      	mov	r0, r3
 8003112:	f000 facc 	bl	80036ae <TIM_ITRx_SetConfig>
      break;
 8003116:	e029      	b.n	800316c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	6859      	ldr	r1, [r3, #4]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	461a      	mov	r2, r3
 8003126:	f000 fa92 	bl	800364e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2160      	movs	r1, #96	; 0x60
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fabc 	bl	80036ae <TIM_ITRx_SetConfig>
      break;
 8003136:	e019      	b.n	800316c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	6859      	ldr	r1, [r3, #4]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	461a      	mov	r2, r3
 8003146:	f000 fa53 	bl	80035f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2140      	movs	r1, #64	; 0x40
 8003150:	4618      	mov	r0, r3
 8003152:	f000 faac 	bl	80036ae <TIM_ITRx_SetConfig>
      break;
 8003156:	e009      	b.n	800316c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4619      	mov	r1, r3
 8003162:	4610      	mov	r0, r2
 8003164:	f000 faa3 	bl	80036ae <TIM_ITRx_SetConfig>
      break;
 8003168:	e000      	b.n	800316c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800316a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a34      	ldr	r2, [pc, #208]	; (80032bc <TIM_Base_SetConfig+0xe4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00f      	beq.n	8003210 <TIM_Base_SetConfig+0x38>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f6:	d00b      	beq.n	8003210 <TIM_Base_SetConfig+0x38>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a31      	ldr	r2, [pc, #196]	; (80032c0 <TIM_Base_SetConfig+0xe8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d007      	beq.n	8003210 <TIM_Base_SetConfig+0x38>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a30      	ldr	r2, [pc, #192]	; (80032c4 <TIM_Base_SetConfig+0xec>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d003      	beq.n	8003210 <TIM_Base_SetConfig+0x38>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a2f      	ldr	r2, [pc, #188]	; (80032c8 <TIM_Base_SetConfig+0xf0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d108      	bne.n	8003222 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a25      	ldr	r2, [pc, #148]	; (80032bc <TIM_Base_SetConfig+0xe4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d01b      	beq.n	8003262 <TIM_Base_SetConfig+0x8a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003230:	d017      	beq.n	8003262 <TIM_Base_SetConfig+0x8a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a22      	ldr	r2, [pc, #136]	; (80032c0 <TIM_Base_SetConfig+0xe8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d013      	beq.n	8003262 <TIM_Base_SetConfig+0x8a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a21      	ldr	r2, [pc, #132]	; (80032c4 <TIM_Base_SetConfig+0xec>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d00f      	beq.n	8003262 <TIM_Base_SetConfig+0x8a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a20      	ldr	r2, [pc, #128]	; (80032c8 <TIM_Base_SetConfig+0xf0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d00b      	beq.n	8003262 <TIM_Base_SetConfig+0x8a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a1f      	ldr	r2, [pc, #124]	; (80032cc <TIM_Base_SetConfig+0xf4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d007      	beq.n	8003262 <TIM_Base_SetConfig+0x8a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a1e      	ldr	r2, [pc, #120]	; (80032d0 <TIM_Base_SetConfig+0xf8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d003      	beq.n	8003262 <TIM_Base_SetConfig+0x8a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a1d      	ldr	r2, [pc, #116]	; (80032d4 <TIM_Base_SetConfig+0xfc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d108      	bne.n	8003274 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4313      	orrs	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a08      	ldr	r2, [pc, #32]	; (80032bc <TIM_Base_SetConfig+0xe4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d103      	bne.n	80032a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	615a      	str	r2, [r3, #20]
}
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40010000 	.word	0x40010000
 80032c0:	40000400 	.word	0x40000400
 80032c4:	40000800 	.word	0x40000800
 80032c8:	40000c00 	.word	0x40000c00
 80032cc:	40014000 	.word	0x40014000
 80032d0:	40014400 	.word	0x40014400
 80032d4:	40014800 	.word	0x40014800

080032d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	f023 0201 	bic.w	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0303 	bic.w	r3, r3, #3
 800330e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f023 0302 	bic.w	r3, r3, #2
 8003320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a1c      	ldr	r2, [pc, #112]	; (80033a0 <TIM_OC1_SetConfig+0xc8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d10c      	bne.n	800334e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f023 0308 	bic.w	r3, r3, #8
 800333a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f023 0304 	bic.w	r3, r3, #4
 800334c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a13      	ldr	r2, [pc, #76]	; (80033a0 <TIM_OC1_SetConfig+0xc8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d111      	bne.n	800337a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800335c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	621a      	str	r2, [r3, #32]
}
 8003394:	bf00      	nop
 8003396:	371c      	adds	r7, #28
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	40010000 	.word	0x40010000

080033a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	f023 0210 	bic.w	r2, r3, #16
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f023 0320 	bic.w	r3, r3, #32
 80033ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a1e      	ldr	r2, [pc, #120]	; (8003478 <TIM_OC2_SetConfig+0xd4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d10d      	bne.n	8003420 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800340a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4313      	orrs	r3, r2
 8003416:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800341e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a15      	ldr	r2, [pc, #84]	; (8003478 <TIM_OC2_SetConfig+0xd4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d113      	bne.n	8003450 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800342e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003436:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	621a      	str	r2, [r3, #32]
}
 800346a:	bf00      	nop
 800346c:	371c      	adds	r7, #28
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40010000 	.word	0x40010000

0800347c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0303 	bic.w	r3, r3, #3
 80034b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	021b      	lsls	r3, r3, #8
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a1d      	ldr	r2, [pc, #116]	; (800354c <TIM_OC3_SetConfig+0xd0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d10d      	bne.n	80034f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	021b      	lsls	r3, r3, #8
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a14      	ldr	r2, [pc, #80]	; (800354c <TIM_OC3_SetConfig+0xd0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d113      	bne.n	8003526 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800350c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	621a      	str	r2, [r3, #32]
}
 8003540:	bf00      	nop
 8003542:	371c      	adds	r7, #28
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	40010000 	.word	0x40010000

08003550 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800357e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800359a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	031b      	lsls	r3, r3, #12
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a10      	ldr	r2, [pc, #64]	; (80035ec <TIM_OC4_SetConfig+0x9c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d109      	bne.n	80035c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	019b      	lsls	r3, r3, #6
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	621a      	str	r2, [r3, #32]
}
 80035de:	bf00      	nop
 80035e0:	371c      	adds	r7, #28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40010000 	.word	0x40010000

080035f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	f023 0201 	bic.w	r2, r3, #1
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800361a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f023 030a 	bic.w	r3, r3, #10
 800362c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4313      	orrs	r3, r2
 8003634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	621a      	str	r2, [r3, #32]
}
 8003642:	bf00      	nop
 8003644:	371c      	adds	r7, #28
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800364e:	b480      	push	{r7}
 8003650:	b087      	sub	sp, #28
 8003652:	af00      	add	r7, sp, #0
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	f023 0210 	bic.w	r2, r3, #16
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003678:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	031b      	lsls	r3, r3, #12
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	4313      	orrs	r3, r2
 8003682:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800368a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	621a      	str	r2, [r3, #32]
}
 80036a2:	bf00      	nop
 80036a4:	371c      	adds	r7, #28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b085      	sub	sp, #20
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f043 0307 	orr.w	r3, r3, #7
 80036d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	609a      	str	r2, [r3, #8]
}
 80036d8:	bf00      	nop
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	021a      	lsls	r2, r3, #8
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	431a      	orrs	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4313      	orrs	r3, r2
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	609a      	str	r2, [r3, #8]
}
 8003718:	bf00      	nop
 800371a:	371c      	adds	r7, #28
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f003 031f 	and.w	r3, r3, #31
 8003736:	2201      	movs	r2, #1
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a1a      	ldr	r2, [r3, #32]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	43db      	mvns	r3, r3
 8003746:	401a      	ands	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a1a      	ldr	r2, [r3, #32]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	fa01 f303 	lsl.w	r3, r1, r3
 800375c:	431a      	orrs	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	621a      	str	r2, [r3, #32]
}
 8003762:	bf00      	nop
 8003764:	371c      	adds	r7, #28
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003784:	2302      	movs	r3, #2
 8003786:	e050      	b.n	800382a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a1c      	ldr	r2, [pc, #112]	; (8003838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d018      	beq.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d4:	d013      	beq.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a18      	ldr	r2, [pc, #96]	; (800383c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00e      	beq.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a16      	ldr	r2, [pc, #88]	; (8003840 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d009      	beq.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a15      	ldr	r2, [pc, #84]	; (8003844 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d004      	beq.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a13      	ldr	r2, [pc, #76]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d10c      	bne.n	8003818 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003804:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	4313      	orrs	r3, r2
 800380e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40010000 	.word	0x40010000
 800383c:	40000400 	.word	0x40000400
 8003840:	40000800 	.word	0x40000800
 8003844:	40000c00 	.word	0x40000c00
 8003848:	40014000 	.word	0x40014000

0800384c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003864:	2302      	movs	r3, #2
 8003866:	e03d      	b.n	80038e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	4313      	orrs	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e03f      	b.n	80039aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fd fff0 	bl	8001924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2224      	movs	r2, #36	; 0x24
 8003948:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800395a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fb97 	bl	8004090 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003970:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695a      	ldr	r2, [r3, #20]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003980:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003990:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b088      	sub	sp, #32
 80039b6:	af02      	add	r7, sp, #8
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	603b      	str	r3, [r7, #0]
 80039be:	4613      	mov	r3, r2
 80039c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b20      	cmp	r3, #32
 80039d0:	f040 8083 	bne.w	8003ada <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <HAL_UART_Transmit+0x2e>
 80039da:	88fb      	ldrh	r3, [r7, #6]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e07b      	b.n	8003adc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_UART_Transmit+0x40>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e074      	b.n	8003adc <HAL_UART_Transmit+0x12a>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2221      	movs	r2, #33	; 0x21
 8003a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003a08:	f7fe f938 	bl	8001c7c <HAL_GetTick>
 8003a0c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	88fa      	ldrh	r2, [r7, #6]
 8003a12:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	88fa      	ldrh	r2, [r7, #6]
 8003a18:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003a22:	e042      	b.n	8003aaa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3a:	d122      	bne.n	8003a82 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2200      	movs	r2, #0
 8003a44:	2180      	movs	r1, #128	; 0x80
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f9b6 	bl	8003db8 <UART_WaitOnFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e042      	b.n	8003adc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	881b      	ldrh	r3, [r3, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a68:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d103      	bne.n	8003a7a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	3302      	adds	r3, #2
 8003a76:	60bb      	str	r3, [r7, #8]
 8003a78:	e017      	b.n	8003aaa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	60bb      	str	r3, [r7, #8]
 8003a80:	e013      	b.n	8003aaa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2180      	movs	r1, #128	; 0x80
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f993 	bl	8003db8 <UART_WaitOnFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e01f      	b.n	8003adc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	60ba      	str	r2, [r7, #8]
 8003aa2:	781a      	ldrb	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1b7      	bne.n	8003a24 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2200      	movs	r2, #0
 8003abc:	2140      	movs	r1, #64	; 0x40
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f97a 	bl	8003db8 <UART_WaitOnFlagUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e006      	b.n	8003adc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e000      	b.n	8003adc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003ada:	2302      	movs	r3, #2
  }
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	4613      	mov	r3, r2
 8003af0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d140      	bne.n	8003b80 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <HAL_UART_Receive_IT+0x26>
 8003b04:	88fb      	ldrh	r3, [r7, #6]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e039      	b.n	8003b82 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_UART_Receive_IT+0x38>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e032      	b.n	8003b82 <HAL_UART_Receive_IT+0x9e>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	88fa      	ldrh	r2, [r7, #6]
 8003b2e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	88fa      	ldrh	r2, [r7, #6]
 8003b34:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2222      	movs	r2, #34	; 0x22
 8003b40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b5a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695a      	ldr	r2, [r3, #20]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0220 	orr.w	r2, r2, #32
 8003b7a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	e000      	b.n	8003b82 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003b80:	2302      	movs	r3, #2
  }
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
	...

08003b90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10d      	bne.n	8003be2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	f003 0320 	and.w	r3, r3, #32
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_UART_IRQHandler+0x52>
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	f003 0320 	and.w	r3, r3, #32
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f9d6 	bl	8003f8c <UART_Receive_IT>
      return;
 8003be0:	e0d1      	b.n	8003d86 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80b0 	beq.w	8003d4a <HAL_UART_IRQHandler+0x1ba>
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d105      	bne.n	8003c00 <HAL_UART_IRQHandler+0x70>
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 80a5 	beq.w	8003d4a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <HAL_UART_IRQHandler+0x90>
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c18:	f043 0201 	orr.w	r2, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <HAL_UART_IRQHandler+0xb0>
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c38:	f043 0202 	orr.w	r2, r3, #2
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_UART_IRQHandler+0xd0>
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d005      	beq.n	8003c60 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c58:	f043 0204 	orr.w	r2, r3, #4
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00f      	beq.n	8003c8a <HAL_UART_IRQHandler+0xfa>
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d104      	bne.n	8003c7e <HAL_UART_IRQHandler+0xee>
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d005      	beq.n	8003c8a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	f043 0208 	orr.w	r2, r3, #8
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d078      	beq.n	8003d84 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f003 0320 	and.w	r3, r3, #32
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d007      	beq.n	8003cac <HAL_UART_IRQHandler+0x11c>
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f970 	bl	8003f8c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb6:	2b40      	cmp	r3, #64	; 0x40
 8003cb8:	bf0c      	ite	eq
 8003cba:	2301      	moveq	r3, #1
 8003cbc:	2300      	movne	r3, #0
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d102      	bne.n	8003cd4 <HAL_UART_IRQHandler+0x144>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d031      	beq.n	8003d38 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f8b9 	bl	8003e4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce4:	2b40      	cmp	r3, #64	; 0x40
 8003ce6:	d123      	bne.n	8003d30 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695a      	ldr	r2, [r3, #20]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cf6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d013      	beq.n	8003d28 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d04:	4a21      	ldr	r2, [pc, #132]	; (8003d8c <HAL_UART_IRQHandler+0x1fc>)
 8003d06:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fe f8d2 	bl	8001eb6 <HAL_DMA_Abort_IT>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d016      	beq.n	8003d46 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d22:	4610      	mov	r0, r2
 8003d24:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d26:	e00e      	b.n	8003d46 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f83b 	bl	8003da4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d2e:	e00a      	b.n	8003d46 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f837 	bl	8003da4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d36:	e006      	b.n	8003d46 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f833 	bl	8003da4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003d44:	e01e      	b.n	8003d84 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d46:	bf00      	nop
    return;
 8003d48:	e01c      	b.n	8003d84 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_UART_IRQHandler+0x1d6>
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f8a6 	bl	8003eb0 <UART_Transmit_IT>
    return;
 8003d64:	e00f      	b.n	8003d86 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <HAL_UART_IRQHandler+0x1f6>
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d005      	beq.n	8003d86 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f8ee 	bl	8003f5c <UART_EndTransmit_IT>
    return;
 8003d80:	bf00      	nop
 8003d82:	e000      	b.n	8003d86 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003d84:	bf00      	nop
  }
}
 8003d86:	3720      	adds	r7, #32
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	08003e89 	.word	0x08003e89

08003d90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc8:	e02c      	b.n	8003e24 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd0:	d028      	beq.n	8003e24 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d007      	beq.n	8003de8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dd8:	f7fd ff50 	bl	8001c7c <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d21d      	bcs.n	8003e24 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003df6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695a      	ldr	r2, [r3, #20]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0201 	bic.w	r2, r2, #1
 8003e06:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e00f      	b.n	8003e44 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	bf0c      	ite	eq
 8003e34:	2301      	moveq	r3, #1
 8003e36:	2300      	movne	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d0c3      	beq.n	8003dca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e62:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695a      	ldr	r2, [r3, #20]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0201 	bic.w	r2, r2, #1
 8003e72:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f7ff ff7e 	bl	8003da4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ea8:	bf00      	nop
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b21      	cmp	r3, #33	; 0x21
 8003ec2:	d144      	bne.n	8003f4e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ecc:	d11a      	bne.n	8003f04 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ee2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d105      	bne.n	8003ef8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	1c9a      	adds	r2, r3, #2
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	621a      	str	r2, [r3, #32]
 8003ef6:	e00e      	b.n	8003f16 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	621a      	str	r2, [r3, #32]
 8003f02:	e008      	b.n	8003f16 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	1c59      	adds	r1, r3, #1
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6211      	str	r1, [r2, #32]
 8003f0e:	781a      	ldrb	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	4619      	mov	r1, r3
 8003f24:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10f      	bne.n	8003f4a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e000      	b.n	8003f50 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003f4e:	2302      	movs	r3, #2
  }
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f72:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff ff07 	bl	8003d90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b22      	cmp	r3, #34	; 0x22
 8003f9e:	d171      	bne.n	8004084 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa8:	d123      	bne.n	8003ff2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10e      	bne.n	8003fd6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fce:	1c9a      	adds	r2, r3, #2
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	629a      	str	r2, [r3, #40]	; 0x28
 8003fd4:	e029      	b.n	800402a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	629a      	str	r2, [r3, #40]	; 0x28
 8003ff0:	e01b      	b.n	800402a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10a      	bne.n	8004010 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6858      	ldr	r0, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004004:	1c59      	adds	r1, r3, #1
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6291      	str	r1, [r2, #40]	; 0x28
 800400a:	b2c2      	uxtb	r2, r0
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	e00c      	b.n	800402a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	b2da      	uxtb	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	1c58      	adds	r0, r3, #1
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	6288      	str	r0, [r1, #40]	; 0x28
 8004022:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29b      	uxth	r3, r3
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	4619      	mov	r1, r3
 8004038:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800403a:	2b00      	cmp	r3, #0
 800403c:	d120      	bne.n	8004080 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0220 	bic.w	r2, r2, #32
 800404c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800405c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695a      	ldr	r2, [r3, #20]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0201 	bic.w	r2, r2, #1
 800406c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fc fff2 	bl	8001060 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	e002      	b.n	8004086 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004080:	2300      	movs	r3, #0
 8004082:	e000      	b.n	8004086 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004084:	2302      	movs	r3, #2
  }
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004094:	b085      	sub	sp, #20
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	431a      	orrs	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80040d2:	f023 030c 	bic.w	r3, r3, #12
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6812      	ldr	r2, [r2, #0]
 80040da:	68f9      	ldr	r1, [r7, #12]
 80040dc:	430b      	orrs	r3, r1
 80040de:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699a      	ldr	r2, [r3, #24]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040fe:	f040 818b 	bne.w	8004418 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4ac1      	ldr	r2, [pc, #772]	; (800440c <UART_SetConfig+0x37c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d005      	beq.n	8004118 <UART_SetConfig+0x88>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4abf      	ldr	r2, [pc, #764]	; (8004410 <UART_SetConfig+0x380>)
 8004112:	4293      	cmp	r3, r2
 8004114:	f040 80bd 	bne.w	8004292 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004118:	f7fe fccc 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 800411c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	461d      	mov	r5, r3
 8004122:	f04f 0600 	mov.w	r6, #0
 8004126:	46a8      	mov	r8, r5
 8004128:	46b1      	mov	r9, r6
 800412a:	eb18 0308 	adds.w	r3, r8, r8
 800412e:	eb49 0409 	adc.w	r4, r9, r9
 8004132:	4698      	mov	r8, r3
 8004134:	46a1      	mov	r9, r4
 8004136:	eb18 0805 	adds.w	r8, r8, r5
 800413a:	eb49 0906 	adc.w	r9, r9, r6
 800413e:	f04f 0100 	mov.w	r1, #0
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800414a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800414e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004152:	4688      	mov	r8, r1
 8004154:	4691      	mov	r9, r2
 8004156:	eb18 0005 	adds.w	r0, r8, r5
 800415a:	eb49 0106 	adc.w	r1, r9, r6
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	461d      	mov	r5, r3
 8004164:	f04f 0600 	mov.w	r6, #0
 8004168:	196b      	adds	r3, r5, r5
 800416a:	eb46 0406 	adc.w	r4, r6, r6
 800416e:	461a      	mov	r2, r3
 8004170:	4623      	mov	r3, r4
 8004172:	f7fc f88d 	bl	8000290 <__aeabi_uldivmod>
 8004176:	4603      	mov	r3, r0
 8004178:	460c      	mov	r4, r1
 800417a:	461a      	mov	r2, r3
 800417c:	4ba5      	ldr	r3, [pc, #660]	; (8004414 <UART_SetConfig+0x384>)
 800417e:	fba3 2302 	umull	r2, r3, r3, r2
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	461d      	mov	r5, r3
 800418c:	f04f 0600 	mov.w	r6, #0
 8004190:	46a9      	mov	r9, r5
 8004192:	46b2      	mov	sl, r6
 8004194:	eb19 0309 	adds.w	r3, r9, r9
 8004198:	eb4a 040a 	adc.w	r4, sl, sl
 800419c:	4699      	mov	r9, r3
 800419e:	46a2      	mov	sl, r4
 80041a0:	eb19 0905 	adds.w	r9, r9, r5
 80041a4:	eb4a 0a06 	adc.w	sl, sl, r6
 80041a8:	f04f 0100 	mov.w	r1, #0
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041bc:	4689      	mov	r9, r1
 80041be:	4692      	mov	sl, r2
 80041c0:	eb19 0005 	adds.w	r0, r9, r5
 80041c4:	eb4a 0106 	adc.w	r1, sl, r6
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	461d      	mov	r5, r3
 80041ce:	f04f 0600 	mov.w	r6, #0
 80041d2:	196b      	adds	r3, r5, r5
 80041d4:	eb46 0406 	adc.w	r4, r6, r6
 80041d8:	461a      	mov	r2, r3
 80041da:	4623      	mov	r3, r4
 80041dc:	f7fc f858 	bl	8000290 <__aeabi_uldivmod>
 80041e0:	4603      	mov	r3, r0
 80041e2:	460c      	mov	r4, r1
 80041e4:	461a      	mov	r2, r3
 80041e6:	4b8b      	ldr	r3, [pc, #556]	; (8004414 <UART_SetConfig+0x384>)
 80041e8:	fba3 1302 	umull	r1, r3, r3, r2
 80041ec:	095b      	lsrs	r3, r3, #5
 80041ee:	2164      	movs	r1, #100	; 0x64
 80041f0:	fb01 f303 	mul.w	r3, r1, r3
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	3332      	adds	r3, #50	; 0x32
 80041fa:	4a86      	ldr	r2, [pc, #536]	; (8004414 <UART_SetConfig+0x384>)
 80041fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004200:	095b      	lsrs	r3, r3, #5
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004208:	4498      	add	r8, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	461d      	mov	r5, r3
 800420e:	f04f 0600 	mov.w	r6, #0
 8004212:	46a9      	mov	r9, r5
 8004214:	46b2      	mov	sl, r6
 8004216:	eb19 0309 	adds.w	r3, r9, r9
 800421a:	eb4a 040a 	adc.w	r4, sl, sl
 800421e:	4699      	mov	r9, r3
 8004220:	46a2      	mov	sl, r4
 8004222:	eb19 0905 	adds.w	r9, r9, r5
 8004226:	eb4a 0a06 	adc.w	sl, sl, r6
 800422a:	f04f 0100 	mov.w	r1, #0
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004236:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800423a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800423e:	4689      	mov	r9, r1
 8004240:	4692      	mov	sl, r2
 8004242:	eb19 0005 	adds.w	r0, r9, r5
 8004246:	eb4a 0106 	adc.w	r1, sl, r6
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	461d      	mov	r5, r3
 8004250:	f04f 0600 	mov.w	r6, #0
 8004254:	196b      	adds	r3, r5, r5
 8004256:	eb46 0406 	adc.w	r4, r6, r6
 800425a:	461a      	mov	r2, r3
 800425c:	4623      	mov	r3, r4
 800425e:	f7fc f817 	bl	8000290 <__aeabi_uldivmod>
 8004262:	4603      	mov	r3, r0
 8004264:	460c      	mov	r4, r1
 8004266:	461a      	mov	r2, r3
 8004268:	4b6a      	ldr	r3, [pc, #424]	; (8004414 <UART_SetConfig+0x384>)
 800426a:	fba3 1302 	umull	r1, r3, r3, r2
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	2164      	movs	r1, #100	; 0x64
 8004272:	fb01 f303 	mul.w	r3, r1, r3
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	3332      	adds	r3, #50	; 0x32
 800427c:	4a65      	ldr	r2, [pc, #404]	; (8004414 <UART_SetConfig+0x384>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	f003 0207 	and.w	r2, r3, #7
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4442      	add	r2, r8
 800428e:	609a      	str	r2, [r3, #8]
 8004290:	e26f      	b.n	8004772 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004292:	f7fe fbfb 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 8004296:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	461d      	mov	r5, r3
 800429c:	f04f 0600 	mov.w	r6, #0
 80042a0:	46a8      	mov	r8, r5
 80042a2:	46b1      	mov	r9, r6
 80042a4:	eb18 0308 	adds.w	r3, r8, r8
 80042a8:	eb49 0409 	adc.w	r4, r9, r9
 80042ac:	4698      	mov	r8, r3
 80042ae:	46a1      	mov	r9, r4
 80042b0:	eb18 0805 	adds.w	r8, r8, r5
 80042b4:	eb49 0906 	adc.w	r9, r9, r6
 80042b8:	f04f 0100 	mov.w	r1, #0
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80042c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042cc:	4688      	mov	r8, r1
 80042ce:	4691      	mov	r9, r2
 80042d0:	eb18 0005 	adds.w	r0, r8, r5
 80042d4:	eb49 0106 	adc.w	r1, r9, r6
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	461d      	mov	r5, r3
 80042de:	f04f 0600 	mov.w	r6, #0
 80042e2:	196b      	adds	r3, r5, r5
 80042e4:	eb46 0406 	adc.w	r4, r6, r6
 80042e8:	461a      	mov	r2, r3
 80042ea:	4623      	mov	r3, r4
 80042ec:	f7fb ffd0 	bl	8000290 <__aeabi_uldivmod>
 80042f0:	4603      	mov	r3, r0
 80042f2:	460c      	mov	r4, r1
 80042f4:	461a      	mov	r2, r3
 80042f6:	4b47      	ldr	r3, [pc, #284]	; (8004414 <UART_SetConfig+0x384>)
 80042f8:	fba3 2302 	umull	r2, r3, r3, r2
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	461d      	mov	r5, r3
 8004306:	f04f 0600 	mov.w	r6, #0
 800430a:	46a9      	mov	r9, r5
 800430c:	46b2      	mov	sl, r6
 800430e:	eb19 0309 	adds.w	r3, r9, r9
 8004312:	eb4a 040a 	adc.w	r4, sl, sl
 8004316:	4699      	mov	r9, r3
 8004318:	46a2      	mov	sl, r4
 800431a:	eb19 0905 	adds.w	r9, r9, r5
 800431e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004322:	f04f 0100 	mov.w	r1, #0
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800432e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004332:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004336:	4689      	mov	r9, r1
 8004338:	4692      	mov	sl, r2
 800433a:	eb19 0005 	adds.w	r0, r9, r5
 800433e:	eb4a 0106 	adc.w	r1, sl, r6
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	461d      	mov	r5, r3
 8004348:	f04f 0600 	mov.w	r6, #0
 800434c:	196b      	adds	r3, r5, r5
 800434e:	eb46 0406 	adc.w	r4, r6, r6
 8004352:	461a      	mov	r2, r3
 8004354:	4623      	mov	r3, r4
 8004356:	f7fb ff9b 	bl	8000290 <__aeabi_uldivmod>
 800435a:	4603      	mov	r3, r0
 800435c:	460c      	mov	r4, r1
 800435e:	461a      	mov	r2, r3
 8004360:	4b2c      	ldr	r3, [pc, #176]	; (8004414 <UART_SetConfig+0x384>)
 8004362:	fba3 1302 	umull	r1, r3, r3, r2
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	2164      	movs	r1, #100	; 0x64
 800436a:	fb01 f303 	mul.w	r3, r1, r3
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	3332      	adds	r3, #50	; 0x32
 8004374:	4a27      	ldr	r2, [pc, #156]	; (8004414 <UART_SetConfig+0x384>)
 8004376:	fba2 2303 	umull	r2, r3, r2, r3
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004382:	4498      	add	r8, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	461d      	mov	r5, r3
 8004388:	f04f 0600 	mov.w	r6, #0
 800438c:	46a9      	mov	r9, r5
 800438e:	46b2      	mov	sl, r6
 8004390:	eb19 0309 	adds.w	r3, r9, r9
 8004394:	eb4a 040a 	adc.w	r4, sl, sl
 8004398:	4699      	mov	r9, r3
 800439a:	46a2      	mov	sl, r4
 800439c:	eb19 0905 	adds.w	r9, r9, r5
 80043a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80043a4:	f04f 0100 	mov.w	r1, #0
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043b8:	4689      	mov	r9, r1
 80043ba:	4692      	mov	sl, r2
 80043bc:	eb19 0005 	adds.w	r0, r9, r5
 80043c0:	eb4a 0106 	adc.w	r1, sl, r6
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	461d      	mov	r5, r3
 80043ca:	f04f 0600 	mov.w	r6, #0
 80043ce:	196b      	adds	r3, r5, r5
 80043d0:	eb46 0406 	adc.w	r4, r6, r6
 80043d4:	461a      	mov	r2, r3
 80043d6:	4623      	mov	r3, r4
 80043d8:	f7fb ff5a 	bl	8000290 <__aeabi_uldivmod>
 80043dc:	4603      	mov	r3, r0
 80043de:	460c      	mov	r4, r1
 80043e0:	461a      	mov	r2, r3
 80043e2:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <UART_SetConfig+0x384>)
 80043e4:	fba3 1302 	umull	r1, r3, r3, r2
 80043e8:	095b      	lsrs	r3, r3, #5
 80043ea:	2164      	movs	r1, #100	; 0x64
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	3332      	adds	r3, #50	; 0x32
 80043f6:	4a07      	ldr	r2, [pc, #28]	; (8004414 <UART_SetConfig+0x384>)
 80043f8:	fba2 2303 	umull	r2, r3, r2, r3
 80043fc:	095b      	lsrs	r3, r3, #5
 80043fe:	f003 0207 	and.w	r2, r3, #7
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4442      	add	r2, r8
 8004408:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800440a:	e1b2      	b.n	8004772 <UART_SetConfig+0x6e2>
 800440c:	40011000 	.word	0x40011000
 8004410:	40011400 	.word	0x40011400
 8004414:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4ad7      	ldr	r2, [pc, #860]	; (800477c <UART_SetConfig+0x6ec>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d005      	beq.n	800442e <UART_SetConfig+0x39e>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4ad6      	ldr	r2, [pc, #856]	; (8004780 <UART_SetConfig+0x6f0>)
 8004428:	4293      	cmp	r3, r2
 800442a:	f040 80d1 	bne.w	80045d0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800442e:	f7fe fb41 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 8004432:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	469a      	mov	sl, r3
 8004438:	f04f 0b00 	mov.w	fp, #0
 800443c:	46d0      	mov	r8, sl
 800443e:	46d9      	mov	r9, fp
 8004440:	eb18 0308 	adds.w	r3, r8, r8
 8004444:	eb49 0409 	adc.w	r4, r9, r9
 8004448:	4698      	mov	r8, r3
 800444a:	46a1      	mov	r9, r4
 800444c:	eb18 080a 	adds.w	r8, r8, sl
 8004450:	eb49 090b 	adc.w	r9, r9, fp
 8004454:	f04f 0100 	mov.w	r1, #0
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004460:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004464:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004468:	4688      	mov	r8, r1
 800446a:	4691      	mov	r9, r2
 800446c:	eb1a 0508 	adds.w	r5, sl, r8
 8004470:	eb4b 0609 	adc.w	r6, fp, r9
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	4619      	mov	r1, r3
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	f04f 0400 	mov.w	r4, #0
 8004486:	0094      	lsls	r4, r2, #2
 8004488:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800448c:	008b      	lsls	r3, r1, #2
 800448e:	461a      	mov	r2, r3
 8004490:	4623      	mov	r3, r4
 8004492:	4628      	mov	r0, r5
 8004494:	4631      	mov	r1, r6
 8004496:	f7fb fefb 	bl	8000290 <__aeabi_uldivmod>
 800449a:	4603      	mov	r3, r0
 800449c:	460c      	mov	r4, r1
 800449e:	461a      	mov	r2, r3
 80044a0:	4bb8      	ldr	r3, [pc, #736]	; (8004784 <UART_SetConfig+0x6f4>)
 80044a2:	fba3 2302 	umull	r2, r3, r3, r2
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	469b      	mov	fp, r3
 80044b0:	f04f 0c00 	mov.w	ip, #0
 80044b4:	46d9      	mov	r9, fp
 80044b6:	46e2      	mov	sl, ip
 80044b8:	eb19 0309 	adds.w	r3, r9, r9
 80044bc:	eb4a 040a 	adc.w	r4, sl, sl
 80044c0:	4699      	mov	r9, r3
 80044c2:	46a2      	mov	sl, r4
 80044c4:	eb19 090b 	adds.w	r9, r9, fp
 80044c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044cc:	f04f 0100 	mov.w	r1, #0
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044e0:	4689      	mov	r9, r1
 80044e2:	4692      	mov	sl, r2
 80044e4:	eb1b 0509 	adds.w	r5, fp, r9
 80044e8:	eb4c 060a 	adc.w	r6, ip, sl
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	4619      	mov	r1, r3
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	f04f 0400 	mov.w	r4, #0
 80044fe:	0094      	lsls	r4, r2, #2
 8004500:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004504:	008b      	lsls	r3, r1, #2
 8004506:	461a      	mov	r2, r3
 8004508:	4623      	mov	r3, r4
 800450a:	4628      	mov	r0, r5
 800450c:	4631      	mov	r1, r6
 800450e:	f7fb febf 	bl	8000290 <__aeabi_uldivmod>
 8004512:	4603      	mov	r3, r0
 8004514:	460c      	mov	r4, r1
 8004516:	461a      	mov	r2, r3
 8004518:	4b9a      	ldr	r3, [pc, #616]	; (8004784 <UART_SetConfig+0x6f4>)
 800451a:	fba3 1302 	umull	r1, r3, r3, r2
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	2164      	movs	r1, #100	; 0x64
 8004522:	fb01 f303 	mul.w	r3, r1, r3
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	3332      	adds	r3, #50	; 0x32
 800452c:	4a95      	ldr	r2, [pc, #596]	; (8004784 <UART_SetConfig+0x6f4>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004538:	4498      	add	r8, r3
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	469b      	mov	fp, r3
 800453e:	f04f 0c00 	mov.w	ip, #0
 8004542:	46d9      	mov	r9, fp
 8004544:	46e2      	mov	sl, ip
 8004546:	eb19 0309 	adds.w	r3, r9, r9
 800454a:	eb4a 040a 	adc.w	r4, sl, sl
 800454e:	4699      	mov	r9, r3
 8004550:	46a2      	mov	sl, r4
 8004552:	eb19 090b 	adds.w	r9, r9, fp
 8004556:	eb4a 0a0c 	adc.w	sl, sl, ip
 800455a:	f04f 0100 	mov.w	r1, #0
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004566:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800456a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800456e:	4689      	mov	r9, r1
 8004570:	4692      	mov	sl, r2
 8004572:	eb1b 0509 	adds.w	r5, fp, r9
 8004576:	eb4c 060a 	adc.w	r6, ip, sl
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	4619      	mov	r1, r3
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	f04f 0300 	mov.w	r3, #0
 8004588:	f04f 0400 	mov.w	r4, #0
 800458c:	0094      	lsls	r4, r2, #2
 800458e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004592:	008b      	lsls	r3, r1, #2
 8004594:	461a      	mov	r2, r3
 8004596:	4623      	mov	r3, r4
 8004598:	4628      	mov	r0, r5
 800459a:	4631      	mov	r1, r6
 800459c:	f7fb fe78 	bl	8000290 <__aeabi_uldivmod>
 80045a0:	4603      	mov	r3, r0
 80045a2:	460c      	mov	r4, r1
 80045a4:	461a      	mov	r2, r3
 80045a6:	4b77      	ldr	r3, [pc, #476]	; (8004784 <UART_SetConfig+0x6f4>)
 80045a8:	fba3 1302 	umull	r1, r3, r3, r2
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	2164      	movs	r1, #100	; 0x64
 80045b0:	fb01 f303 	mul.w	r3, r1, r3
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	3332      	adds	r3, #50	; 0x32
 80045ba:	4a72      	ldr	r2, [pc, #456]	; (8004784 <UART_SetConfig+0x6f4>)
 80045bc:	fba2 2303 	umull	r2, r3, r2, r3
 80045c0:	095b      	lsrs	r3, r3, #5
 80045c2:	f003 020f 	and.w	r2, r3, #15
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4442      	add	r2, r8
 80045cc:	609a      	str	r2, [r3, #8]
 80045ce:	e0d0      	b.n	8004772 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80045d0:	f7fe fa5c 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 80045d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	469a      	mov	sl, r3
 80045da:	f04f 0b00 	mov.w	fp, #0
 80045de:	46d0      	mov	r8, sl
 80045e0:	46d9      	mov	r9, fp
 80045e2:	eb18 0308 	adds.w	r3, r8, r8
 80045e6:	eb49 0409 	adc.w	r4, r9, r9
 80045ea:	4698      	mov	r8, r3
 80045ec:	46a1      	mov	r9, r4
 80045ee:	eb18 080a 	adds.w	r8, r8, sl
 80045f2:	eb49 090b 	adc.w	r9, r9, fp
 80045f6:	f04f 0100 	mov.w	r1, #0
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004602:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004606:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800460a:	4688      	mov	r8, r1
 800460c:	4691      	mov	r9, r2
 800460e:	eb1a 0508 	adds.w	r5, sl, r8
 8004612:	eb4b 0609 	adc.w	r6, fp, r9
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	4619      	mov	r1, r3
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	f04f 0400 	mov.w	r4, #0
 8004628:	0094      	lsls	r4, r2, #2
 800462a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800462e:	008b      	lsls	r3, r1, #2
 8004630:	461a      	mov	r2, r3
 8004632:	4623      	mov	r3, r4
 8004634:	4628      	mov	r0, r5
 8004636:	4631      	mov	r1, r6
 8004638:	f7fb fe2a 	bl	8000290 <__aeabi_uldivmod>
 800463c:	4603      	mov	r3, r0
 800463e:	460c      	mov	r4, r1
 8004640:	461a      	mov	r2, r3
 8004642:	4b50      	ldr	r3, [pc, #320]	; (8004784 <UART_SetConfig+0x6f4>)
 8004644:	fba3 2302 	umull	r2, r3, r3, r2
 8004648:	095b      	lsrs	r3, r3, #5
 800464a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	469b      	mov	fp, r3
 8004652:	f04f 0c00 	mov.w	ip, #0
 8004656:	46d9      	mov	r9, fp
 8004658:	46e2      	mov	sl, ip
 800465a:	eb19 0309 	adds.w	r3, r9, r9
 800465e:	eb4a 040a 	adc.w	r4, sl, sl
 8004662:	4699      	mov	r9, r3
 8004664:	46a2      	mov	sl, r4
 8004666:	eb19 090b 	adds.w	r9, r9, fp
 800466a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800466e:	f04f 0100 	mov.w	r1, #0
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800467a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800467e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004682:	4689      	mov	r9, r1
 8004684:	4692      	mov	sl, r2
 8004686:	eb1b 0509 	adds.w	r5, fp, r9
 800468a:	eb4c 060a 	adc.w	r6, ip, sl
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	4619      	mov	r1, r3
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	f04f 0400 	mov.w	r4, #0
 80046a0:	0094      	lsls	r4, r2, #2
 80046a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046a6:	008b      	lsls	r3, r1, #2
 80046a8:	461a      	mov	r2, r3
 80046aa:	4623      	mov	r3, r4
 80046ac:	4628      	mov	r0, r5
 80046ae:	4631      	mov	r1, r6
 80046b0:	f7fb fdee 	bl	8000290 <__aeabi_uldivmod>
 80046b4:	4603      	mov	r3, r0
 80046b6:	460c      	mov	r4, r1
 80046b8:	461a      	mov	r2, r3
 80046ba:	4b32      	ldr	r3, [pc, #200]	; (8004784 <UART_SetConfig+0x6f4>)
 80046bc:	fba3 1302 	umull	r1, r3, r3, r2
 80046c0:	095b      	lsrs	r3, r3, #5
 80046c2:	2164      	movs	r1, #100	; 0x64
 80046c4:	fb01 f303 	mul.w	r3, r1, r3
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	3332      	adds	r3, #50	; 0x32
 80046ce:	4a2d      	ldr	r2, [pc, #180]	; (8004784 <UART_SetConfig+0x6f4>)
 80046d0:	fba2 2303 	umull	r2, r3, r2, r3
 80046d4:	095b      	lsrs	r3, r3, #5
 80046d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046da:	4498      	add	r8, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	469b      	mov	fp, r3
 80046e0:	f04f 0c00 	mov.w	ip, #0
 80046e4:	46d9      	mov	r9, fp
 80046e6:	46e2      	mov	sl, ip
 80046e8:	eb19 0309 	adds.w	r3, r9, r9
 80046ec:	eb4a 040a 	adc.w	r4, sl, sl
 80046f0:	4699      	mov	r9, r3
 80046f2:	46a2      	mov	sl, r4
 80046f4:	eb19 090b 	adds.w	r9, r9, fp
 80046f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046fc:	f04f 0100 	mov.w	r1, #0
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004708:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800470c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004710:	4689      	mov	r9, r1
 8004712:	4692      	mov	sl, r2
 8004714:	eb1b 0509 	adds.w	r5, fp, r9
 8004718:	eb4c 060a 	adc.w	r6, ip, sl
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4619      	mov	r1, r3
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	f04f 0300 	mov.w	r3, #0
 800472a:	f04f 0400 	mov.w	r4, #0
 800472e:	0094      	lsls	r4, r2, #2
 8004730:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004734:	008b      	lsls	r3, r1, #2
 8004736:	461a      	mov	r2, r3
 8004738:	4623      	mov	r3, r4
 800473a:	4628      	mov	r0, r5
 800473c:	4631      	mov	r1, r6
 800473e:	f7fb fda7 	bl	8000290 <__aeabi_uldivmod>
 8004742:	4603      	mov	r3, r0
 8004744:	460c      	mov	r4, r1
 8004746:	461a      	mov	r2, r3
 8004748:	4b0e      	ldr	r3, [pc, #56]	; (8004784 <UART_SetConfig+0x6f4>)
 800474a:	fba3 1302 	umull	r1, r3, r3, r2
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	2164      	movs	r1, #100	; 0x64
 8004752:	fb01 f303 	mul.w	r3, r1, r3
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	3332      	adds	r3, #50	; 0x32
 800475c:	4a09      	ldr	r2, [pc, #36]	; (8004784 <UART_SetConfig+0x6f4>)
 800475e:	fba2 2303 	umull	r2, r3, r2, r3
 8004762:	095b      	lsrs	r3, r3, #5
 8004764:	f003 020f 	and.w	r2, r3, #15
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4442      	add	r2, r8
 800476e:	609a      	str	r2, [r3, #8]
}
 8004770:	e7ff      	b.n	8004772 <UART_SetConfig+0x6e2>
 8004772:	bf00      	nop
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800477c:	40011000 	.word	0x40011000
 8004780:	40011400 	.word	0x40011400
 8004784:	51eb851f 	.word	0x51eb851f

08004788 <__errno>:
 8004788:	4b01      	ldr	r3, [pc, #4]	; (8004790 <__errno+0x8>)
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	2000000c 	.word	0x2000000c

08004794 <__libc_init_array>:
 8004794:	b570      	push	{r4, r5, r6, lr}
 8004796:	4e0d      	ldr	r6, [pc, #52]	; (80047cc <__libc_init_array+0x38>)
 8004798:	4c0d      	ldr	r4, [pc, #52]	; (80047d0 <__libc_init_array+0x3c>)
 800479a:	1ba4      	subs	r4, r4, r6
 800479c:	10a4      	asrs	r4, r4, #2
 800479e:	2500      	movs	r5, #0
 80047a0:	42a5      	cmp	r5, r4
 80047a2:	d109      	bne.n	80047b8 <__libc_init_array+0x24>
 80047a4:	4e0b      	ldr	r6, [pc, #44]	; (80047d4 <__libc_init_array+0x40>)
 80047a6:	4c0c      	ldr	r4, [pc, #48]	; (80047d8 <__libc_init_array+0x44>)
 80047a8:	f000 fdfa 	bl	80053a0 <_init>
 80047ac:	1ba4      	subs	r4, r4, r6
 80047ae:	10a4      	asrs	r4, r4, #2
 80047b0:	2500      	movs	r5, #0
 80047b2:	42a5      	cmp	r5, r4
 80047b4:	d105      	bne.n	80047c2 <__libc_init_array+0x2e>
 80047b6:	bd70      	pop	{r4, r5, r6, pc}
 80047b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047bc:	4798      	blx	r3
 80047be:	3501      	adds	r5, #1
 80047c0:	e7ee      	b.n	80047a0 <__libc_init_array+0xc>
 80047c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047c6:	4798      	blx	r3
 80047c8:	3501      	adds	r5, #1
 80047ca:	e7f2      	b.n	80047b2 <__libc_init_array+0x1e>
 80047cc:	08005f4c 	.word	0x08005f4c
 80047d0:	08005f4c 	.word	0x08005f4c
 80047d4:	08005f4c 	.word	0x08005f4c
 80047d8:	08005f50 	.word	0x08005f50

080047dc <memcpy>:
 80047dc:	b510      	push	{r4, lr}
 80047de:	1e43      	subs	r3, r0, #1
 80047e0:	440a      	add	r2, r1
 80047e2:	4291      	cmp	r1, r2
 80047e4:	d100      	bne.n	80047e8 <memcpy+0xc>
 80047e6:	bd10      	pop	{r4, pc}
 80047e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047f0:	e7f7      	b.n	80047e2 <memcpy+0x6>

080047f2 <memset>:
 80047f2:	4402      	add	r2, r0
 80047f4:	4603      	mov	r3, r0
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d100      	bne.n	80047fc <memset+0xa>
 80047fa:	4770      	bx	lr
 80047fc:	f803 1b01 	strb.w	r1, [r3], #1
 8004800:	e7f9      	b.n	80047f6 <memset+0x4>
	...

08004804 <siscanf>:
 8004804:	b40e      	push	{r1, r2, r3}
 8004806:	b530      	push	{r4, r5, lr}
 8004808:	b09c      	sub	sp, #112	; 0x70
 800480a:	ac1f      	add	r4, sp, #124	; 0x7c
 800480c:	f44f 7201 	mov.w	r2, #516	; 0x204
 8004810:	f854 5b04 	ldr.w	r5, [r4], #4
 8004814:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004818:	9002      	str	r0, [sp, #8]
 800481a:	9006      	str	r0, [sp, #24]
 800481c:	f7fb fce0 	bl	80001e0 <strlen>
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <siscanf+0x4c>)
 8004822:	9003      	str	r0, [sp, #12]
 8004824:	9007      	str	r0, [sp, #28]
 8004826:	930b      	str	r3, [sp, #44]	; 0x2c
 8004828:	480a      	ldr	r0, [pc, #40]	; (8004854 <siscanf+0x50>)
 800482a:	9401      	str	r4, [sp, #4]
 800482c:	2300      	movs	r3, #0
 800482e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004830:	9314      	str	r3, [sp, #80]	; 0x50
 8004832:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004836:	f8ad 3016 	strh.w	r3, [sp, #22]
 800483a:	462a      	mov	r2, r5
 800483c:	4623      	mov	r3, r4
 800483e:	a902      	add	r1, sp, #8
 8004840:	6800      	ldr	r0, [r0, #0]
 8004842:	f000 f865 	bl	8004910 <__ssvfiscanf_r>
 8004846:	b01c      	add	sp, #112	; 0x70
 8004848:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800484c:	b003      	add	sp, #12
 800484e:	4770      	bx	lr
 8004850:	08004859 	.word	0x08004859
 8004854:	2000000c 	.word	0x2000000c

08004858 <__seofread>:
 8004858:	2000      	movs	r0, #0
 800485a:	4770      	bx	lr

0800485c <_sungetc_r>:
 800485c:	b538      	push	{r3, r4, r5, lr}
 800485e:	1c4b      	adds	r3, r1, #1
 8004860:	4614      	mov	r4, r2
 8004862:	d103      	bne.n	800486c <_sungetc_r+0x10>
 8004864:	f04f 35ff 	mov.w	r5, #4294967295
 8004868:	4628      	mov	r0, r5
 800486a:	bd38      	pop	{r3, r4, r5, pc}
 800486c:	8993      	ldrh	r3, [r2, #12]
 800486e:	f023 0320 	bic.w	r3, r3, #32
 8004872:	8193      	strh	r3, [r2, #12]
 8004874:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004876:	6852      	ldr	r2, [r2, #4]
 8004878:	b2cd      	uxtb	r5, r1
 800487a:	b18b      	cbz	r3, 80048a0 <_sungetc_r+0x44>
 800487c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800487e:	4293      	cmp	r3, r2
 8004880:	dd08      	ble.n	8004894 <_sungetc_r+0x38>
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	1e5a      	subs	r2, r3, #1
 8004886:	6022      	str	r2, [r4, #0]
 8004888:	f803 5c01 	strb.w	r5, [r3, #-1]
 800488c:	6863      	ldr	r3, [r4, #4]
 800488e:	3301      	adds	r3, #1
 8004890:	6063      	str	r3, [r4, #4]
 8004892:	e7e9      	b.n	8004868 <_sungetc_r+0xc>
 8004894:	4621      	mov	r1, r4
 8004896:	f000 fc2f 	bl	80050f8 <__submore>
 800489a:	2800      	cmp	r0, #0
 800489c:	d0f1      	beq.n	8004882 <_sungetc_r+0x26>
 800489e:	e7e1      	b.n	8004864 <_sungetc_r+0x8>
 80048a0:	6921      	ldr	r1, [r4, #16]
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	b151      	cbz	r1, 80048bc <_sungetc_r+0x60>
 80048a6:	4299      	cmp	r1, r3
 80048a8:	d208      	bcs.n	80048bc <_sungetc_r+0x60>
 80048aa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80048ae:	42a9      	cmp	r1, r5
 80048b0:	d104      	bne.n	80048bc <_sungetc_r+0x60>
 80048b2:	3b01      	subs	r3, #1
 80048b4:	3201      	adds	r2, #1
 80048b6:	6023      	str	r3, [r4, #0]
 80048b8:	6062      	str	r2, [r4, #4]
 80048ba:	e7d5      	b.n	8004868 <_sungetc_r+0xc>
 80048bc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80048c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048c4:	6363      	str	r3, [r4, #52]	; 0x34
 80048c6:	2303      	movs	r3, #3
 80048c8:	63a3      	str	r3, [r4, #56]	; 0x38
 80048ca:	4623      	mov	r3, r4
 80048cc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80048d0:	6023      	str	r3, [r4, #0]
 80048d2:	2301      	movs	r3, #1
 80048d4:	e7dc      	b.n	8004890 <_sungetc_r+0x34>

080048d6 <__ssrefill_r>:
 80048d6:	b510      	push	{r4, lr}
 80048d8:	460c      	mov	r4, r1
 80048da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80048dc:	b169      	cbz	r1, 80048fa <__ssrefill_r+0x24>
 80048de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048e2:	4299      	cmp	r1, r3
 80048e4:	d001      	beq.n	80048ea <__ssrefill_r+0x14>
 80048e6:	f000 fc65 	bl	80051b4 <_free_r>
 80048ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048ec:	6063      	str	r3, [r4, #4]
 80048ee:	2000      	movs	r0, #0
 80048f0:	6360      	str	r0, [r4, #52]	; 0x34
 80048f2:	b113      	cbz	r3, 80048fa <__ssrefill_r+0x24>
 80048f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80048f6:	6023      	str	r3, [r4, #0]
 80048f8:	bd10      	pop	{r4, pc}
 80048fa:	6923      	ldr	r3, [r4, #16]
 80048fc:	6023      	str	r3, [r4, #0]
 80048fe:	2300      	movs	r3, #0
 8004900:	6063      	str	r3, [r4, #4]
 8004902:	89a3      	ldrh	r3, [r4, #12]
 8004904:	f043 0320 	orr.w	r3, r3, #32
 8004908:	81a3      	strh	r3, [r4, #12]
 800490a:	f04f 30ff 	mov.w	r0, #4294967295
 800490e:	e7f3      	b.n	80048f8 <__ssrefill_r+0x22>

08004910 <__ssvfiscanf_r>:
 8004910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004914:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8004918:	460c      	mov	r4, r1
 800491a:	2100      	movs	r1, #0
 800491c:	9144      	str	r1, [sp, #272]	; 0x110
 800491e:	9145      	str	r1, [sp, #276]	; 0x114
 8004920:	499f      	ldr	r1, [pc, #636]	; (8004ba0 <__ssvfiscanf_r+0x290>)
 8004922:	91a0      	str	r1, [sp, #640]	; 0x280
 8004924:	f10d 0804 	add.w	r8, sp, #4
 8004928:	499e      	ldr	r1, [pc, #632]	; (8004ba4 <__ssvfiscanf_r+0x294>)
 800492a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8004ba8 <__ssvfiscanf_r+0x298>
 800492e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004932:	4606      	mov	r6, r0
 8004934:	4692      	mov	sl, r2
 8004936:	91a1      	str	r1, [sp, #644]	; 0x284
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	270a      	movs	r7, #10
 800493c:	f89a 3000 	ldrb.w	r3, [sl]
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 812a 	beq.w	8004b9a <__ssvfiscanf_r+0x28a>
 8004946:	4655      	mov	r5, sl
 8004948:	f000 fc14 	bl	8005174 <__locale_ctype_ptr>
 800494c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8004950:	4458      	add	r0, fp
 8004952:	7843      	ldrb	r3, [r0, #1]
 8004954:	f013 0308 	ands.w	r3, r3, #8
 8004958:	d01c      	beq.n	8004994 <__ssvfiscanf_r+0x84>
 800495a:	6863      	ldr	r3, [r4, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	dd12      	ble.n	8004986 <__ssvfiscanf_r+0x76>
 8004960:	f000 fc08 	bl	8005174 <__locale_ctype_ptr>
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	781a      	ldrb	r2, [r3, #0]
 8004968:	4410      	add	r0, r2
 800496a:	7842      	ldrb	r2, [r0, #1]
 800496c:	0712      	lsls	r2, r2, #28
 800496e:	d401      	bmi.n	8004974 <__ssvfiscanf_r+0x64>
 8004970:	46aa      	mov	sl, r5
 8004972:	e7e3      	b.n	800493c <__ssvfiscanf_r+0x2c>
 8004974:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004976:	3201      	adds	r2, #1
 8004978:	9245      	str	r2, [sp, #276]	; 0x114
 800497a:	6862      	ldr	r2, [r4, #4]
 800497c:	3301      	adds	r3, #1
 800497e:	3a01      	subs	r2, #1
 8004980:	6062      	str	r2, [r4, #4]
 8004982:	6023      	str	r3, [r4, #0]
 8004984:	e7e9      	b.n	800495a <__ssvfiscanf_r+0x4a>
 8004986:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004988:	4621      	mov	r1, r4
 800498a:	4630      	mov	r0, r6
 800498c:	4798      	blx	r3
 800498e:	2800      	cmp	r0, #0
 8004990:	d0e6      	beq.n	8004960 <__ssvfiscanf_r+0x50>
 8004992:	e7ed      	b.n	8004970 <__ssvfiscanf_r+0x60>
 8004994:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8004998:	f040 8082 	bne.w	8004aa0 <__ssvfiscanf_r+0x190>
 800499c:	9343      	str	r3, [sp, #268]	; 0x10c
 800499e:	9341      	str	r3, [sp, #260]	; 0x104
 80049a0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80049a4:	2b2a      	cmp	r3, #42	; 0x2a
 80049a6:	d103      	bne.n	80049b0 <__ssvfiscanf_r+0xa0>
 80049a8:	2310      	movs	r3, #16
 80049aa:	9341      	str	r3, [sp, #260]	; 0x104
 80049ac:	f10a 0502 	add.w	r5, sl, #2
 80049b0:	46aa      	mov	sl, r5
 80049b2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80049b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80049ba:	2a09      	cmp	r2, #9
 80049bc:	d922      	bls.n	8004a04 <__ssvfiscanf_r+0xf4>
 80049be:	2203      	movs	r2, #3
 80049c0:	4879      	ldr	r0, [pc, #484]	; (8004ba8 <__ssvfiscanf_r+0x298>)
 80049c2:	f7fb fc15 	bl	80001f0 <memchr>
 80049c6:	b138      	cbz	r0, 80049d8 <__ssvfiscanf_r+0xc8>
 80049c8:	eba0 0309 	sub.w	r3, r0, r9
 80049cc:	2001      	movs	r0, #1
 80049ce:	4098      	lsls	r0, r3
 80049d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80049d2:	4318      	orrs	r0, r3
 80049d4:	9041      	str	r0, [sp, #260]	; 0x104
 80049d6:	46aa      	mov	sl, r5
 80049d8:	f89a 3000 	ldrb.w	r3, [sl]
 80049dc:	2b67      	cmp	r3, #103	; 0x67
 80049de:	f10a 0501 	add.w	r5, sl, #1
 80049e2:	d82b      	bhi.n	8004a3c <__ssvfiscanf_r+0x12c>
 80049e4:	2b65      	cmp	r3, #101	; 0x65
 80049e6:	f080 809f 	bcs.w	8004b28 <__ssvfiscanf_r+0x218>
 80049ea:	2b47      	cmp	r3, #71	; 0x47
 80049ec:	d810      	bhi.n	8004a10 <__ssvfiscanf_r+0x100>
 80049ee:	2b45      	cmp	r3, #69	; 0x45
 80049f0:	f080 809a 	bcs.w	8004b28 <__ssvfiscanf_r+0x218>
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d06c      	beq.n	8004ad2 <__ssvfiscanf_r+0x1c2>
 80049f8:	2b25      	cmp	r3, #37	; 0x25
 80049fa:	d051      	beq.n	8004aa0 <__ssvfiscanf_r+0x190>
 80049fc:	2303      	movs	r3, #3
 80049fe:	9347      	str	r3, [sp, #284]	; 0x11c
 8004a00:	9742      	str	r7, [sp, #264]	; 0x108
 8004a02:	e027      	b.n	8004a54 <__ssvfiscanf_r+0x144>
 8004a04:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004a06:	fb07 1303 	mla	r3, r7, r3, r1
 8004a0a:	3b30      	subs	r3, #48	; 0x30
 8004a0c:	9343      	str	r3, [sp, #268]	; 0x10c
 8004a0e:	e7cf      	b.n	80049b0 <__ssvfiscanf_r+0xa0>
 8004a10:	2b5b      	cmp	r3, #91	; 0x5b
 8004a12:	d06a      	beq.n	8004aea <__ssvfiscanf_r+0x1da>
 8004a14:	d80c      	bhi.n	8004a30 <__ssvfiscanf_r+0x120>
 8004a16:	2b58      	cmp	r3, #88	; 0x58
 8004a18:	d1f0      	bne.n	80049fc <__ssvfiscanf_r+0xec>
 8004a1a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a20:	9241      	str	r2, [sp, #260]	; 0x104
 8004a22:	2210      	movs	r2, #16
 8004a24:	9242      	str	r2, [sp, #264]	; 0x108
 8004a26:	2b6e      	cmp	r3, #110	; 0x6e
 8004a28:	bf8c      	ite	hi
 8004a2a:	2304      	movhi	r3, #4
 8004a2c:	2303      	movls	r3, #3
 8004a2e:	e010      	b.n	8004a52 <__ssvfiscanf_r+0x142>
 8004a30:	2b63      	cmp	r3, #99	; 0x63
 8004a32:	d065      	beq.n	8004b00 <__ssvfiscanf_r+0x1f0>
 8004a34:	2b64      	cmp	r3, #100	; 0x64
 8004a36:	d1e1      	bne.n	80049fc <__ssvfiscanf_r+0xec>
 8004a38:	9742      	str	r7, [sp, #264]	; 0x108
 8004a3a:	e7f4      	b.n	8004a26 <__ssvfiscanf_r+0x116>
 8004a3c:	2b70      	cmp	r3, #112	; 0x70
 8004a3e:	d04b      	beq.n	8004ad8 <__ssvfiscanf_r+0x1c8>
 8004a40:	d826      	bhi.n	8004a90 <__ssvfiscanf_r+0x180>
 8004a42:	2b6e      	cmp	r3, #110	; 0x6e
 8004a44:	d062      	beq.n	8004b0c <__ssvfiscanf_r+0x1fc>
 8004a46:	d84c      	bhi.n	8004ae2 <__ssvfiscanf_r+0x1d2>
 8004a48:	2b69      	cmp	r3, #105	; 0x69
 8004a4a:	d1d7      	bne.n	80049fc <__ssvfiscanf_r+0xec>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	9342      	str	r3, [sp, #264]	; 0x108
 8004a50:	2303      	movs	r3, #3
 8004a52:	9347      	str	r3, [sp, #284]	; 0x11c
 8004a54:	6863      	ldr	r3, [r4, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	dd68      	ble.n	8004b2c <__ssvfiscanf_r+0x21c>
 8004a5a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004a5c:	0659      	lsls	r1, r3, #25
 8004a5e:	d407      	bmi.n	8004a70 <__ssvfiscanf_r+0x160>
 8004a60:	f000 fb88 	bl	8005174 <__locale_ctype_ptr>
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	781a      	ldrb	r2, [r3, #0]
 8004a68:	4410      	add	r0, r2
 8004a6a:	7842      	ldrb	r2, [r0, #1]
 8004a6c:	0712      	lsls	r2, r2, #28
 8004a6e:	d464      	bmi.n	8004b3a <__ssvfiscanf_r+0x22a>
 8004a70:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	dc73      	bgt.n	8004b5e <__ssvfiscanf_r+0x24e>
 8004a76:	466b      	mov	r3, sp
 8004a78:	4622      	mov	r2, r4
 8004a7a:	a941      	add	r1, sp, #260	; 0x104
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	f000 f897 	bl	8004bb0 <_scanf_chars>
 8004a82:	2801      	cmp	r0, #1
 8004a84:	f000 8089 	beq.w	8004b9a <__ssvfiscanf_r+0x28a>
 8004a88:	2802      	cmp	r0, #2
 8004a8a:	f47f af71 	bne.w	8004970 <__ssvfiscanf_r+0x60>
 8004a8e:	e01d      	b.n	8004acc <__ssvfiscanf_r+0x1bc>
 8004a90:	2b75      	cmp	r3, #117	; 0x75
 8004a92:	d0d1      	beq.n	8004a38 <__ssvfiscanf_r+0x128>
 8004a94:	2b78      	cmp	r3, #120	; 0x78
 8004a96:	d0c0      	beq.n	8004a1a <__ssvfiscanf_r+0x10a>
 8004a98:	2b73      	cmp	r3, #115	; 0x73
 8004a9a:	d1af      	bne.n	80049fc <__ssvfiscanf_r+0xec>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e7d8      	b.n	8004a52 <__ssvfiscanf_r+0x142>
 8004aa0:	6863      	ldr	r3, [r4, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	dd0c      	ble.n	8004ac0 <__ssvfiscanf_r+0x1b0>
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	781a      	ldrb	r2, [r3, #0]
 8004aaa:	455a      	cmp	r2, fp
 8004aac:	d175      	bne.n	8004b9a <__ssvfiscanf_r+0x28a>
 8004aae:	3301      	adds	r3, #1
 8004ab0:	6862      	ldr	r2, [r4, #4]
 8004ab2:	6023      	str	r3, [r4, #0]
 8004ab4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004ab6:	3a01      	subs	r2, #1
 8004ab8:	3301      	adds	r3, #1
 8004aba:	6062      	str	r2, [r4, #4]
 8004abc:	9345      	str	r3, [sp, #276]	; 0x114
 8004abe:	e757      	b.n	8004970 <__ssvfiscanf_r+0x60>
 8004ac0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004ac2:	4621      	mov	r1, r4
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	4798      	blx	r3
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	d0ec      	beq.n	8004aa6 <__ssvfiscanf_r+0x196>
 8004acc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	d159      	bne.n	8004b86 <__ssvfiscanf_r+0x276>
 8004ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad6:	e05c      	b.n	8004b92 <__ssvfiscanf_r+0x282>
 8004ad8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004ada:	f042 0220 	orr.w	r2, r2, #32
 8004ade:	9241      	str	r2, [sp, #260]	; 0x104
 8004ae0:	e79b      	b.n	8004a1a <__ssvfiscanf_r+0x10a>
 8004ae2:	2308      	movs	r3, #8
 8004ae4:	9342      	str	r3, [sp, #264]	; 0x108
 8004ae6:	2304      	movs	r3, #4
 8004ae8:	e7b3      	b.n	8004a52 <__ssvfiscanf_r+0x142>
 8004aea:	4629      	mov	r1, r5
 8004aec:	4640      	mov	r0, r8
 8004aee:	f000 f9b7 	bl	8004e60 <__sccl>
 8004af2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004af8:	9341      	str	r3, [sp, #260]	; 0x104
 8004afa:	4605      	mov	r5, r0
 8004afc:	2301      	movs	r3, #1
 8004afe:	e7a8      	b.n	8004a52 <__ssvfiscanf_r+0x142>
 8004b00:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b06:	9341      	str	r3, [sp, #260]	; 0x104
 8004b08:	2300      	movs	r3, #0
 8004b0a:	e7a2      	b.n	8004a52 <__ssvfiscanf_r+0x142>
 8004b0c:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004b0e:	06c3      	lsls	r3, r0, #27
 8004b10:	f53f af2e 	bmi.w	8004970 <__ssvfiscanf_r+0x60>
 8004b14:	9b00      	ldr	r3, [sp, #0]
 8004b16:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004b18:	1d19      	adds	r1, r3, #4
 8004b1a:	9100      	str	r1, [sp, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	07c0      	lsls	r0, r0, #31
 8004b20:	bf4c      	ite	mi
 8004b22:	801a      	strhmi	r2, [r3, #0]
 8004b24:	601a      	strpl	r2, [r3, #0]
 8004b26:	e723      	b.n	8004970 <__ssvfiscanf_r+0x60>
 8004b28:	2305      	movs	r3, #5
 8004b2a:	e792      	b.n	8004a52 <__ssvfiscanf_r+0x142>
 8004b2c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004b2e:	4621      	mov	r1, r4
 8004b30:	4630      	mov	r0, r6
 8004b32:	4798      	blx	r3
 8004b34:	2800      	cmp	r0, #0
 8004b36:	d090      	beq.n	8004a5a <__ssvfiscanf_r+0x14a>
 8004b38:	e7c8      	b.n	8004acc <__ssvfiscanf_r+0x1bc>
 8004b3a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004b3c:	3201      	adds	r2, #1
 8004b3e:	9245      	str	r2, [sp, #276]	; 0x114
 8004b40:	6862      	ldr	r2, [r4, #4]
 8004b42:	3a01      	subs	r2, #1
 8004b44:	2a00      	cmp	r2, #0
 8004b46:	6062      	str	r2, [r4, #4]
 8004b48:	dd02      	ble.n	8004b50 <__ssvfiscanf_r+0x240>
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	e787      	b.n	8004a60 <__ssvfiscanf_r+0x150>
 8004b50:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004b52:	4621      	mov	r1, r4
 8004b54:	4630      	mov	r0, r6
 8004b56:	4798      	blx	r3
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	d081      	beq.n	8004a60 <__ssvfiscanf_r+0x150>
 8004b5c:	e7b6      	b.n	8004acc <__ssvfiscanf_r+0x1bc>
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	dc06      	bgt.n	8004b70 <__ssvfiscanf_r+0x260>
 8004b62:	466b      	mov	r3, sp
 8004b64:	4622      	mov	r2, r4
 8004b66:	a941      	add	r1, sp, #260	; 0x104
 8004b68:	4630      	mov	r0, r6
 8004b6a:	f000 f885 	bl	8004c78 <_scanf_i>
 8004b6e:	e788      	b.n	8004a82 <__ssvfiscanf_r+0x172>
 8004b70:	4b0e      	ldr	r3, [pc, #56]	; (8004bac <__ssvfiscanf_r+0x29c>)
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f43f aefc 	beq.w	8004970 <__ssvfiscanf_r+0x60>
 8004b78:	466b      	mov	r3, sp
 8004b7a:	4622      	mov	r2, r4
 8004b7c:	a941      	add	r1, sp, #260	; 0x104
 8004b7e:	4630      	mov	r0, r6
 8004b80:	f3af 8000 	nop.w
 8004b84:	e77d      	b.n	8004a82 <__ssvfiscanf_r+0x172>
 8004b86:	89a3      	ldrh	r3, [r4, #12]
 8004b88:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004b8c:	bf18      	it	ne
 8004b8e:	f04f 30ff 	movne.w	r0, #4294967295
 8004b92:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8004b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b9a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004b9c:	e7f9      	b.n	8004b92 <__ssvfiscanf_r+0x282>
 8004b9e:	bf00      	nop
 8004ba0:	0800485d 	.word	0x0800485d
 8004ba4:	080048d7 	.word	0x080048d7
 8004ba8:	08005db8 	.word	0x08005db8
 8004bac:	00000000 	.word	0x00000000

08004bb0 <_scanf_chars>:
 8004bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb4:	4615      	mov	r5, r2
 8004bb6:	688a      	ldr	r2, [r1, #8]
 8004bb8:	4680      	mov	r8, r0
 8004bba:	460c      	mov	r4, r1
 8004bbc:	b932      	cbnz	r2, 8004bcc <_scanf_chars+0x1c>
 8004bbe:	698a      	ldr	r2, [r1, #24]
 8004bc0:	2a00      	cmp	r2, #0
 8004bc2:	bf14      	ite	ne
 8004bc4:	f04f 32ff 	movne.w	r2, #4294967295
 8004bc8:	2201      	moveq	r2, #1
 8004bca:	608a      	str	r2, [r1, #8]
 8004bcc:	6822      	ldr	r2, [r4, #0]
 8004bce:	06d1      	lsls	r1, r2, #27
 8004bd0:	bf5f      	itttt	pl
 8004bd2:	681a      	ldrpl	r2, [r3, #0]
 8004bd4:	1d11      	addpl	r1, r2, #4
 8004bd6:	6019      	strpl	r1, [r3, #0]
 8004bd8:	6817      	ldrpl	r7, [r2, #0]
 8004bda:	2600      	movs	r6, #0
 8004bdc:	69a3      	ldr	r3, [r4, #24]
 8004bde:	b1db      	cbz	r3, 8004c18 <_scanf_chars+0x68>
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d107      	bne.n	8004bf4 <_scanf_chars+0x44>
 8004be4:	682b      	ldr	r3, [r5, #0]
 8004be6:	6962      	ldr	r2, [r4, #20]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	5cd3      	ldrb	r3, [r2, r3]
 8004bec:	b9a3      	cbnz	r3, 8004c18 <_scanf_chars+0x68>
 8004bee:	2e00      	cmp	r6, #0
 8004bf0:	d132      	bne.n	8004c58 <_scanf_chars+0xa8>
 8004bf2:	e006      	b.n	8004c02 <_scanf_chars+0x52>
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d007      	beq.n	8004c08 <_scanf_chars+0x58>
 8004bf8:	2e00      	cmp	r6, #0
 8004bfa:	d12d      	bne.n	8004c58 <_scanf_chars+0xa8>
 8004bfc:	69a3      	ldr	r3, [r4, #24]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d12a      	bne.n	8004c58 <_scanf_chars+0xa8>
 8004c02:	2001      	movs	r0, #1
 8004c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c08:	f000 fab4 	bl	8005174 <__locale_ctype_ptr>
 8004c0c:	682b      	ldr	r3, [r5, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	4418      	add	r0, r3
 8004c12:	7843      	ldrb	r3, [r0, #1]
 8004c14:	071b      	lsls	r3, r3, #28
 8004c16:	d4ef      	bmi.n	8004bf8 <_scanf_chars+0x48>
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	06da      	lsls	r2, r3, #27
 8004c1c:	bf5e      	ittt	pl
 8004c1e:	682b      	ldrpl	r3, [r5, #0]
 8004c20:	781b      	ldrbpl	r3, [r3, #0]
 8004c22:	703b      	strbpl	r3, [r7, #0]
 8004c24:	682a      	ldr	r2, [r5, #0]
 8004c26:	686b      	ldr	r3, [r5, #4]
 8004c28:	f102 0201 	add.w	r2, r2, #1
 8004c2c:	602a      	str	r2, [r5, #0]
 8004c2e:	68a2      	ldr	r2, [r4, #8]
 8004c30:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c34:	f102 32ff 	add.w	r2, r2, #4294967295
 8004c38:	606b      	str	r3, [r5, #4]
 8004c3a:	f106 0601 	add.w	r6, r6, #1
 8004c3e:	bf58      	it	pl
 8004c40:	3701      	addpl	r7, #1
 8004c42:	60a2      	str	r2, [r4, #8]
 8004c44:	b142      	cbz	r2, 8004c58 <_scanf_chars+0xa8>
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	dcc8      	bgt.n	8004bdc <_scanf_chars+0x2c>
 8004c4a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004c4e:	4629      	mov	r1, r5
 8004c50:	4640      	mov	r0, r8
 8004c52:	4798      	blx	r3
 8004c54:	2800      	cmp	r0, #0
 8004c56:	d0c1      	beq.n	8004bdc <_scanf_chars+0x2c>
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	f013 0310 	ands.w	r3, r3, #16
 8004c5e:	d105      	bne.n	8004c6c <_scanf_chars+0xbc>
 8004c60:	68e2      	ldr	r2, [r4, #12]
 8004c62:	3201      	adds	r2, #1
 8004c64:	60e2      	str	r2, [r4, #12]
 8004c66:	69a2      	ldr	r2, [r4, #24]
 8004c68:	b102      	cbz	r2, 8004c6c <_scanf_chars+0xbc>
 8004c6a:	703b      	strb	r3, [r7, #0]
 8004c6c:	6923      	ldr	r3, [r4, #16]
 8004c6e:	441e      	add	r6, r3
 8004c70:	6126      	str	r6, [r4, #16]
 8004c72:	2000      	movs	r0, #0
 8004c74:	e7c6      	b.n	8004c04 <_scanf_chars+0x54>
	...

08004c78 <_scanf_i>:
 8004c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7c:	469a      	mov	sl, r3
 8004c7e:	4b74      	ldr	r3, [pc, #464]	; (8004e50 <_scanf_i+0x1d8>)
 8004c80:	460c      	mov	r4, r1
 8004c82:	4683      	mov	fp, r0
 8004c84:	4616      	mov	r6, r2
 8004c86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	ab03      	add	r3, sp, #12
 8004c8e:	68a7      	ldr	r7, [r4, #8]
 8004c90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004c94:	4b6f      	ldr	r3, [pc, #444]	; (8004e54 <_scanf_i+0x1dc>)
 8004c96:	69a1      	ldr	r1, [r4, #24]
 8004c98:	4a6f      	ldr	r2, [pc, #444]	; (8004e58 <_scanf_i+0x1e0>)
 8004c9a:	2903      	cmp	r1, #3
 8004c9c:	bf08      	it	eq
 8004c9e:	461a      	moveq	r2, r3
 8004ca0:	1e7b      	subs	r3, r7, #1
 8004ca2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8004ca6:	bf84      	itt	hi
 8004ca8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004cac:	60a3      	strhi	r3, [r4, #8]
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	9200      	str	r2, [sp, #0]
 8004cb2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004cb6:	bf88      	it	hi
 8004cb8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004cbc:	f104 091c 	add.w	r9, r4, #28
 8004cc0:	6023      	str	r3, [r4, #0]
 8004cc2:	bf8c      	ite	hi
 8004cc4:	197f      	addhi	r7, r7, r5
 8004cc6:	2700      	movls	r7, #0
 8004cc8:	464b      	mov	r3, r9
 8004cca:	f04f 0800 	mov.w	r8, #0
 8004cce:	9301      	str	r3, [sp, #4]
 8004cd0:	6831      	ldr	r1, [r6, #0]
 8004cd2:	ab03      	add	r3, sp, #12
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004cda:	7809      	ldrb	r1, [r1, #0]
 8004cdc:	f7fb fa88 	bl	80001f0 <memchr>
 8004ce0:	9b01      	ldr	r3, [sp, #4]
 8004ce2:	b330      	cbz	r0, 8004d32 <_scanf_i+0xba>
 8004ce4:	f1b8 0f01 	cmp.w	r8, #1
 8004ce8:	d15a      	bne.n	8004da0 <_scanf_i+0x128>
 8004cea:	6862      	ldr	r2, [r4, #4]
 8004cec:	b92a      	cbnz	r2, 8004cfa <_scanf_i+0x82>
 8004cee:	6822      	ldr	r2, [r4, #0]
 8004cf0:	2108      	movs	r1, #8
 8004cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf6:	6061      	str	r1, [r4, #4]
 8004cf8:	6022      	str	r2, [r4, #0]
 8004cfa:	6822      	ldr	r2, [r4, #0]
 8004cfc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004d00:	6022      	str	r2, [r4, #0]
 8004d02:	68a2      	ldr	r2, [r4, #8]
 8004d04:	1e51      	subs	r1, r2, #1
 8004d06:	60a1      	str	r1, [r4, #8]
 8004d08:	b19a      	cbz	r2, 8004d32 <_scanf_i+0xba>
 8004d0a:	6832      	ldr	r2, [r6, #0]
 8004d0c:	1c51      	adds	r1, r2, #1
 8004d0e:	6031      	str	r1, [r6, #0]
 8004d10:	7812      	ldrb	r2, [r2, #0]
 8004d12:	701a      	strb	r2, [r3, #0]
 8004d14:	1c5d      	adds	r5, r3, #1
 8004d16:	6873      	ldr	r3, [r6, #4]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	6073      	str	r3, [r6, #4]
 8004d1e:	dc07      	bgt.n	8004d30 <_scanf_i+0xb8>
 8004d20:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004d24:	4631      	mov	r1, r6
 8004d26:	4658      	mov	r0, fp
 8004d28:	4798      	blx	r3
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	f040 8086 	bne.w	8004e3c <_scanf_i+0x1c4>
 8004d30:	462b      	mov	r3, r5
 8004d32:	f108 0801 	add.w	r8, r8, #1
 8004d36:	f1b8 0f03 	cmp.w	r8, #3
 8004d3a:	d1c8      	bne.n	8004cce <_scanf_i+0x56>
 8004d3c:	6862      	ldr	r2, [r4, #4]
 8004d3e:	b90a      	cbnz	r2, 8004d44 <_scanf_i+0xcc>
 8004d40:	220a      	movs	r2, #10
 8004d42:	6062      	str	r2, [r4, #4]
 8004d44:	6862      	ldr	r2, [r4, #4]
 8004d46:	4945      	ldr	r1, [pc, #276]	; (8004e5c <_scanf_i+0x1e4>)
 8004d48:	6960      	ldr	r0, [r4, #20]
 8004d4a:	9301      	str	r3, [sp, #4]
 8004d4c:	1a89      	subs	r1, r1, r2
 8004d4e:	f000 f887 	bl	8004e60 <__sccl>
 8004d52:	9b01      	ldr	r3, [sp, #4]
 8004d54:	f04f 0800 	mov.w	r8, #0
 8004d58:	461d      	mov	r5, r3
 8004d5a:	68a3      	ldr	r3, [r4, #8]
 8004d5c:	6822      	ldr	r2, [r4, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d03a      	beq.n	8004dd8 <_scanf_i+0x160>
 8004d62:	6831      	ldr	r1, [r6, #0]
 8004d64:	6960      	ldr	r0, [r4, #20]
 8004d66:	f891 c000 	ldrb.w	ip, [r1]
 8004d6a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	d032      	beq.n	8004dd8 <_scanf_i+0x160>
 8004d72:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004d76:	d121      	bne.n	8004dbc <_scanf_i+0x144>
 8004d78:	0510      	lsls	r0, r2, #20
 8004d7a:	d51f      	bpl.n	8004dbc <_scanf_i+0x144>
 8004d7c:	f108 0801 	add.w	r8, r8, #1
 8004d80:	b117      	cbz	r7, 8004d88 <_scanf_i+0x110>
 8004d82:	3301      	adds	r3, #1
 8004d84:	3f01      	subs	r7, #1
 8004d86:	60a3      	str	r3, [r4, #8]
 8004d88:	6873      	ldr	r3, [r6, #4]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	6073      	str	r3, [r6, #4]
 8004d90:	dd1b      	ble.n	8004dca <_scanf_i+0x152>
 8004d92:	6833      	ldr	r3, [r6, #0]
 8004d94:	3301      	adds	r3, #1
 8004d96:	6033      	str	r3, [r6, #0]
 8004d98:	68a3      	ldr	r3, [r4, #8]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	60a3      	str	r3, [r4, #8]
 8004d9e:	e7dc      	b.n	8004d5a <_scanf_i+0xe2>
 8004da0:	f1b8 0f02 	cmp.w	r8, #2
 8004da4:	d1ad      	bne.n	8004d02 <_scanf_i+0x8a>
 8004da6:	6822      	ldr	r2, [r4, #0]
 8004da8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004dac:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004db0:	d1bf      	bne.n	8004d32 <_scanf_i+0xba>
 8004db2:	2110      	movs	r1, #16
 8004db4:	6061      	str	r1, [r4, #4]
 8004db6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dba:	e7a1      	b.n	8004d00 <_scanf_i+0x88>
 8004dbc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004dc0:	6022      	str	r2, [r4, #0]
 8004dc2:	780b      	ldrb	r3, [r1, #0]
 8004dc4:	702b      	strb	r3, [r5, #0]
 8004dc6:	3501      	adds	r5, #1
 8004dc8:	e7de      	b.n	8004d88 <_scanf_i+0x110>
 8004dca:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004dce:	4631      	mov	r1, r6
 8004dd0:	4658      	mov	r0, fp
 8004dd2:	4798      	blx	r3
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	d0df      	beq.n	8004d98 <_scanf_i+0x120>
 8004dd8:	6823      	ldr	r3, [r4, #0]
 8004dda:	05d9      	lsls	r1, r3, #23
 8004ddc:	d50c      	bpl.n	8004df8 <_scanf_i+0x180>
 8004dde:	454d      	cmp	r5, r9
 8004de0:	d908      	bls.n	8004df4 <_scanf_i+0x17c>
 8004de2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004de6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004dea:	4632      	mov	r2, r6
 8004dec:	4658      	mov	r0, fp
 8004dee:	4798      	blx	r3
 8004df0:	1e6f      	subs	r7, r5, #1
 8004df2:	463d      	mov	r5, r7
 8004df4:	454d      	cmp	r5, r9
 8004df6:	d029      	beq.n	8004e4c <_scanf_i+0x1d4>
 8004df8:	6822      	ldr	r2, [r4, #0]
 8004dfa:	f012 0210 	ands.w	r2, r2, #16
 8004dfe:	d113      	bne.n	8004e28 <_scanf_i+0x1b0>
 8004e00:	702a      	strb	r2, [r5, #0]
 8004e02:	6863      	ldr	r3, [r4, #4]
 8004e04:	9e00      	ldr	r6, [sp, #0]
 8004e06:	4649      	mov	r1, r9
 8004e08:	4658      	mov	r0, fp
 8004e0a:	47b0      	blx	r6
 8004e0c:	f8da 3000 	ldr.w	r3, [sl]
 8004e10:	6821      	ldr	r1, [r4, #0]
 8004e12:	1d1a      	adds	r2, r3, #4
 8004e14:	f8ca 2000 	str.w	r2, [sl]
 8004e18:	f011 0f20 	tst.w	r1, #32
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	d010      	beq.n	8004e42 <_scanf_i+0x1ca>
 8004e20:	6018      	str	r0, [r3, #0]
 8004e22:	68e3      	ldr	r3, [r4, #12]
 8004e24:	3301      	adds	r3, #1
 8004e26:	60e3      	str	r3, [r4, #12]
 8004e28:	eba5 0509 	sub.w	r5, r5, r9
 8004e2c:	44a8      	add	r8, r5
 8004e2e:	6925      	ldr	r5, [r4, #16]
 8004e30:	4445      	add	r5, r8
 8004e32:	6125      	str	r5, [r4, #16]
 8004e34:	2000      	movs	r0, #0
 8004e36:	b007      	add	sp, #28
 8004e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e3c:	f04f 0800 	mov.w	r8, #0
 8004e40:	e7ca      	b.n	8004dd8 <_scanf_i+0x160>
 8004e42:	07ca      	lsls	r2, r1, #31
 8004e44:	bf4c      	ite	mi
 8004e46:	8018      	strhmi	r0, [r3, #0]
 8004e48:	6018      	strpl	r0, [r3, #0]
 8004e4a:	e7ea      	b.n	8004e22 <_scanf_i+0x1aa>
 8004e4c:	2001      	movs	r0, #1
 8004e4e:	e7f2      	b.n	8004e36 <_scanf_i+0x1be>
 8004e50:	08005d94 	.word	0x08005d94
 8004e54:	08004fbd 	.word	0x08004fbd
 8004e58:	080050d5 	.word	0x080050d5
 8004e5c:	08005dcc 	.word	0x08005dcc

08004e60 <__sccl>:
 8004e60:	b570      	push	{r4, r5, r6, lr}
 8004e62:	780b      	ldrb	r3, [r1, #0]
 8004e64:	2b5e      	cmp	r3, #94	; 0x5e
 8004e66:	bf13      	iteet	ne
 8004e68:	1c4a      	addne	r2, r1, #1
 8004e6a:	1c8a      	addeq	r2, r1, #2
 8004e6c:	784b      	ldrbeq	r3, [r1, #1]
 8004e6e:	2100      	movne	r1, #0
 8004e70:	bf08      	it	eq
 8004e72:	2101      	moveq	r1, #1
 8004e74:	1e44      	subs	r4, r0, #1
 8004e76:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8004e7a:	f804 1f01 	strb.w	r1, [r4, #1]!
 8004e7e:	42ac      	cmp	r4, r5
 8004e80:	d1fb      	bne.n	8004e7a <__sccl+0x1a>
 8004e82:	b913      	cbnz	r3, 8004e8a <__sccl+0x2a>
 8004e84:	3a01      	subs	r2, #1
 8004e86:	4610      	mov	r0, r2
 8004e88:	bd70      	pop	{r4, r5, r6, pc}
 8004e8a:	f081 0401 	eor.w	r4, r1, #1
 8004e8e:	54c4      	strb	r4, [r0, r3]
 8004e90:	1c51      	adds	r1, r2, #1
 8004e92:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8004e96:	2d2d      	cmp	r5, #45	; 0x2d
 8004e98:	f101 36ff 	add.w	r6, r1, #4294967295
 8004e9c:	460a      	mov	r2, r1
 8004e9e:	d006      	beq.n	8004eae <__sccl+0x4e>
 8004ea0:	2d5d      	cmp	r5, #93	; 0x5d
 8004ea2:	d0f0      	beq.n	8004e86 <__sccl+0x26>
 8004ea4:	b90d      	cbnz	r5, 8004eaa <__sccl+0x4a>
 8004ea6:	4632      	mov	r2, r6
 8004ea8:	e7ed      	b.n	8004e86 <__sccl+0x26>
 8004eaa:	462b      	mov	r3, r5
 8004eac:	e7ef      	b.n	8004e8e <__sccl+0x2e>
 8004eae:	780e      	ldrb	r6, [r1, #0]
 8004eb0:	2e5d      	cmp	r6, #93	; 0x5d
 8004eb2:	d0fa      	beq.n	8004eaa <__sccl+0x4a>
 8004eb4:	42b3      	cmp	r3, r6
 8004eb6:	dcf8      	bgt.n	8004eaa <__sccl+0x4a>
 8004eb8:	3301      	adds	r3, #1
 8004eba:	429e      	cmp	r6, r3
 8004ebc:	54c4      	strb	r4, [r0, r3]
 8004ebe:	dcfb      	bgt.n	8004eb8 <__sccl+0x58>
 8004ec0:	3102      	adds	r1, #2
 8004ec2:	e7e6      	b.n	8004e92 <__sccl+0x32>

08004ec4 <_strtol_l.isra.0>:
 8004ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec8:	4680      	mov	r8, r0
 8004eca:	4689      	mov	r9, r1
 8004ecc:	4692      	mov	sl, r2
 8004ece:	461e      	mov	r6, r3
 8004ed0:	460f      	mov	r7, r1
 8004ed2:	463d      	mov	r5, r7
 8004ed4:	9808      	ldr	r0, [sp, #32]
 8004ed6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004eda:	f000 f947 	bl	800516c <__locale_ctype_ptr_l>
 8004ede:	4420      	add	r0, r4
 8004ee0:	7843      	ldrb	r3, [r0, #1]
 8004ee2:	f013 0308 	ands.w	r3, r3, #8
 8004ee6:	d132      	bne.n	8004f4e <_strtol_l.isra.0+0x8a>
 8004ee8:	2c2d      	cmp	r4, #45	; 0x2d
 8004eea:	d132      	bne.n	8004f52 <_strtol_l.isra.0+0x8e>
 8004eec:	787c      	ldrb	r4, [r7, #1]
 8004eee:	1cbd      	adds	r5, r7, #2
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	2e00      	cmp	r6, #0
 8004ef4:	d05d      	beq.n	8004fb2 <_strtol_l.isra.0+0xee>
 8004ef6:	2e10      	cmp	r6, #16
 8004ef8:	d109      	bne.n	8004f0e <_strtol_l.isra.0+0x4a>
 8004efa:	2c30      	cmp	r4, #48	; 0x30
 8004efc:	d107      	bne.n	8004f0e <_strtol_l.isra.0+0x4a>
 8004efe:	782b      	ldrb	r3, [r5, #0]
 8004f00:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004f04:	2b58      	cmp	r3, #88	; 0x58
 8004f06:	d14f      	bne.n	8004fa8 <_strtol_l.isra.0+0xe4>
 8004f08:	786c      	ldrb	r4, [r5, #1]
 8004f0a:	2610      	movs	r6, #16
 8004f0c:	3502      	adds	r5, #2
 8004f0e:	2a00      	cmp	r2, #0
 8004f10:	bf14      	ite	ne
 8004f12:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004f16:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004f1a:	2700      	movs	r7, #0
 8004f1c:	fbb1 fcf6 	udiv	ip, r1, r6
 8004f20:	4638      	mov	r0, r7
 8004f22:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004f26:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004f2a:	2b09      	cmp	r3, #9
 8004f2c:	d817      	bhi.n	8004f5e <_strtol_l.isra.0+0x9a>
 8004f2e:	461c      	mov	r4, r3
 8004f30:	42a6      	cmp	r6, r4
 8004f32:	dd23      	ble.n	8004f7c <_strtol_l.isra.0+0xb8>
 8004f34:	1c7b      	adds	r3, r7, #1
 8004f36:	d007      	beq.n	8004f48 <_strtol_l.isra.0+0x84>
 8004f38:	4584      	cmp	ip, r0
 8004f3a:	d31c      	bcc.n	8004f76 <_strtol_l.isra.0+0xb2>
 8004f3c:	d101      	bne.n	8004f42 <_strtol_l.isra.0+0x7e>
 8004f3e:	45a6      	cmp	lr, r4
 8004f40:	db19      	blt.n	8004f76 <_strtol_l.isra.0+0xb2>
 8004f42:	fb00 4006 	mla	r0, r0, r6, r4
 8004f46:	2701      	movs	r7, #1
 8004f48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f4c:	e7eb      	b.n	8004f26 <_strtol_l.isra.0+0x62>
 8004f4e:	462f      	mov	r7, r5
 8004f50:	e7bf      	b.n	8004ed2 <_strtol_l.isra.0+0xe>
 8004f52:	2c2b      	cmp	r4, #43	; 0x2b
 8004f54:	bf04      	itt	eq
 8004f56:	1cbd      	addeq	r5, r7, #2
 8004f58:	787c      	ldrbeq	r4, [r7, #1]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	e7c9      	b.n	8004ef2 <_strtol_l.isra.0+0x2e>
 8004f5e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004f62:	2b19      	cmp	r3, #25
 8004f64:	d801      	bhi.n	8004f6a <_strtol_l.isra.0+0xa6>
 8004f66:	3c37      	subs	r4, #55	; 0x37
 8004f68:	e7e2      	b.n	8004f30 <_strtol_l.isra.0+0x6c>
 8004f6a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004f6e:	2b19      	cmp	r3, #25
 8004f70:	d804      	bhi.n	8004f7c <_strtol_l.isra.0+0xb8>
 8004f72:	3c57      	subs	r4, #87	; 0x57
 8004f74:	e7dc      	b.n	8004f30 <_strtol_l.isra.0+0x6c>
 8004f76:	f04f 37ff 	mov.w	r7, #4294967295
 8004f7a:	e7e5      	b.n	8004f48 <_strtol_l.isra.0+0x84>
 8004f7c:	1c7b      	adds	r3, r7, #1
 8004f7e:	d108      	bne.n	8004f92 <_strtol_l.isra.0+0xce>
 8004f80:	2322      	movs	r3, #34	; 0x22
 8004f82:	f8c8 3000 	str.w	r3, [r8]
 8004f86:	4608      	mov	r0, r1
 8004f88:	f1ba 0f00 	cmp.w	sl, #0
 8004f8c:	d107      	bne.n	8004f9e <_strtol_l.isra.0+0xda>
 8004f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f92:	b102      	cbz	r2, 8004f96 <_strtol_l.isra.0+0xd2>
 8004f94:	4240      	negs	r0, r0
 8004f96:	f1ba 0f00 	cmp.w	sl, #0
 8004f9a:	d0f8      	beq.n	8004f8e <_strtol_l.isra.0+0xca>
 8004f9c:	b10f      	cbz	r7, 8004fa2 <_strtol_l.isra.0+0xde>
 8004f9e:	f105 39ff 	add.w	r9, r5, #4294967295
 8004fa2:	f8ca 9000 	str.w	r9, [sl]
 8004fa6:	e7f2      	b.n	8004f8e <_strtol_l.isra.0+0xca>
 8004fa8:	2430      	movs	r4, #48	; 0x30
 8004faa:	2e00      	cmp	r6, #0
 8004fac:	d1af      	bne.n	8004f0e <_strtol_l.isra.0+0x4a>
 8004fae:	2608      	movs	r6, #8
 8004fb0:	e7ad      	b.n	8004f0e <_strtol_l.isra.0+0x4a>
 8004fb2:	2c30      	cmp	r4, #48	; 0x30
 8004fb4:	d0a3      	beq.n	8004efe <_strtol_l.isra.0+0x3a>
 8004fb6:	260a      	movs	r6, #10
 8004fb8:	e7a9      	b.n	8004f0e <_strtol_l.isra.0+0x4a>
	...

08004fbc <_strtol_r>:
 8004fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fbe:	4c06      	ldr	r4, [pc, #24]	; (8004fd8 <_strtol_r+0x1c>)
 8004fc0:	4d06      	ldr	r5, [pc, #24]	; (8004fdc <_strtol_r+0x20>)
 8004fc2:	6824      	ldr	r4, [r4, #0]
 8004fc4:	6a24      	ldr	r4, [r4, #32]
 8004fc6:	2c00      	cmp	r4, #0
 8004fc8:	bf08      	it	eq
 8004fca:	462c      	moveq	r4, r5
 8004fcc:	9400      	str	r4, [sp, #0]
 8004fce:	f7ff ff79 	bl	8004ec4 <_strtol_l.isra.0>
 8004fd2:	b003      	add	sp, #12
 8004fd4:	bd30      	pop	{r4, r5, pc}
 8004fd6:	bf00      	nop
 8004fd8:	2000000c 	.word	0x2000000c
 8004fdc:	20000070 	.word	0x20000070

08004fe0 <_strtoul_l.isra.0>:
 8004fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fe4:	4680      	mov	r8, r0
 8004fe6:	4689      	mov	r9, r1
 8004fe8:	4692      	mov	sl, r2
 8004fea:	461e      	mov	r6, r3
 8004fec:	460f      	mov	r7, r1
 8004fee:	463d      	mov	r5, r7
 8004ff0:	9808      	ldr	r0, [sp, #32]
 8004ff2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ff6:	f000 f8b9 	bl	800516c <__locale_ctype_ptr_l>
 8004ffa:	4420      	add	r0, r4
 8004ffc:	7843      	ldrb	r3, [r0, #1]
 8004ffe:	f013 0308 	ands.w	r3, r3, #8
 8005002:	d130      	bne.n	8005066 <_strtoul_l.isra.0+0x86>
 8005004:	2c2d      	cmp	r4, #45	; 0x2d
 8005006:	d130      	bne.n	800506a <_strtoul_l.isra.0+0x8a>
 8005008:	787c      	ldrb	r4, [r7, #1]
 800500a:	1cbd      	adds	r5, r7, #2
 800500c:	2101      	movs	r1, #1
 800500e:	2e00      	cmp	r6, #0
 8005010:	d05c      	beq.n	80050cc <_strtoul_l.isra.0+0xec>
 8005012:	2e10      	cmp	r6, #16
 8005014:	d109      	bne.n	800502a <_strtoul_l.isra.0+0x4a>
 8005016:	2c30      	cmp	r4, #48	; 0x30
 8005018:	d107      	bne.n	800502a <_strtoul_l.isra.0+0x4a>
 800501a:	782b      	ldrb	r3, [r5, #0]
 800501c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005020:	2b58      	cmp	r3, #88	; 0x58
 8005022:	d14e      	bne.n	80050c2 <_strtoul_l.isra.0+0xe2>
 8005024:	786c      	ldrb	r4, [r5, #1]
 8005026:	2610      	movs	r6, #16
 8005028:	3502      	adds	r5, #2
 800502a:	f04f 32ff 	mov.w	r2, #4294967295
 800502e:	2300      	movs	r3, #0
 8005030:	fbb2 f2f6 	udiv	r2, r2, r6
 8005034:	fb06 fc02 	mul.w	ip, r6, r2
 8005038:	ea6f 0c0c 	mvn.w	ip, ip
 800503c:	4618      	mov	r0, r3
 800503e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005042:	2f09      	cmp	r7, #9
 8005044:	d817      	bhi.n	8005076 <_strtoul_l.isra.0+0x96>
 8005046:	463c      	mov	r4, r7
 8005048:	42a6      	cmp	r6, r4
 800504a:	dd23      	ble.n	8005094 <_strtoul_l.isra.0+0xb4>
 800504c:	2b00      	cmp	r3, #0
 800504e:	db1e      	blt.n	800508e <_strtoul_l.isra.0+0xae>
 8005050:	4282      	cmp	r2, r0
 8005052:	d31c      	bcc.n	800508e <_strtoul_l.isra.0+0xae>
 8005054:	d101      	bne.n	800505a <_strtoul_l.isra.0+0x7a>
 8005056:	45a4      	cmp	ip, r4
 8005058:	db19      	blt.n	800508e <_strtoul_l.isra.0+0xae>
 800505a:	fb00 4006 	mla	r0, r0, r6, r4
 800505e:	2301      	movs	r3, #1
 8005060:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005064:	e7eb      	b.n	800503e <_strtoul_l.isra.0+0x5e>
 8005066:	462f      	mov	r7, r5
 8005068:	e7c1      	b.n	8004fee <_strtoul_l.isra.0+0xe>
 800506a:	2c2b      	cmp	r4, #43	; 0x2b
 800506c:	bf04      	itt	eq
 800506e:	1cbd      	addeq	r5, r7, #2
 8005070:	787c      	ldrbeq	r4, [r7, #1]
 8005072:	4619      	mov	r1, r3
 8005074:	e7cb      	b.n	800500e <_strtoul_l.isra.0+0x2e>
 8005076:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800507a:	2f19      	cmp	r7, #25
 800507c:	d801      	bhi.n	8005082 <_strtoul_l.isra.0+0xa2>
 800507e:	3c37      	subs	r4, #55	; 0x37
 8005080:	e7e2      	b.n	8005048 <_strtoul_l.isra.0+0x68>
 8005082:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005086:	2f19      	cmp	r7, #25
 8005088:	d804      	bhi.n	8005094 <_strtoul_l.isra.0+0xb4>
 800508a:	3c57      	subs	r4, #87	; 0x57
 800508c:	e7dc      	b.n	8005048 <_strtoul_l.isra.0+0x68>
 800508e:	f04f 33ff 	mov.w	r3, #4294967295
 8005092:	e7e5      	b.n	8005060 <_strtoul_l.isra.0+0x80>
 8005094:	2b00      	cmp	r3, #0
 8005096:	da09      	bge.n	80050ac <_strtoul_l.isra.0+0xcc>
 8005098:	2322      	movs	r3, #34	; 0x22
 800509a:	f8c8 3000 	str.w	r3, [r8]
 800509e:	f04f 30ff 	mov.w	r0, #4294967295
 80050a2:	f1ba 0f00 	cmp.w	sl, #0
 80050a6:	d107      	bne.n	80050b8 <_strtoul_l.isra.0+0xd8>
 80050a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ac:	b101      	cbz	r1, 80050b0 <_strtoul_l.isra.0+0xd0>
 80050ae:	4240      	negs	r0, r0
 80050b0:	f1ba 0f00 	cmp.w	sl, #0
 80050b4:	d0f8      	beq.n	80050a8 <_strtoul_l.isra.0+0xc8>
 80050b6:	b10b      	cbz	r3, 80050bc <_strtoul_l.isra.0+0xdc>
 80050b8:	f105 39ff 	add.w	r9, r5, #4294967295
 80050bc:	f8ca 9000 	str.w	r9, [sl]
 80050c0:	e7f2      	b.n	80050a8 <_strtoul_l.isra.0+0xc8>
 80050c2:	2430      	movs	r4, #48	; 0x30
 80050c4:	2e00      	cmp	r6, #0
 80050c6:	d1b0      	bne.n	800502a <_strtoul_l.isra.0+0x4a>
 80050c8:	2608      	movs	r6, #8
 80050ca:	e7ae      	b.n	800502a <_strtoul_l.isra.0+0x4a>
 80050cc:	2c30      	cmp	r4, #48	; 0x30
 80050ce:	d0a4      	beq.n	800501a <_strtoul_l.isra.0+0x3a>
 80050d0:	260a      	movs	r6, #10
 80050d2:	e7aa      	b.n	800502a <_strtoul_l.isra.0+0x4a>

080050d4 <_strtoul_r>:
 80050d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050d6:	4c06      	ldr	r4, [pc, #24]	; (80050f0 <_strtoul_r+0x1c>)
 80050d8:	4d06      	ldr	r5, [pc, #24]	; (80050f4 <_strtoul_r+0x20>)
 80050da:	6824      	ldr	r4, [r4, #0]
 80050dc:	6a24      	ldr	r4, [r4, #32]
 80050de:	2c00      	cmp	r4, #0
 80050e0:	bf08      	it	eq
 80050e2:	462c      	moveq	r4, r5
 80050e4:	9400      	str	r4, [sp, #0]
 80050e6:	f7ff ff7b 	bl	8004fe0 <_strtoul_l.isra.0>
 80050ea:	b003      	add	sp, #12
 80050ec:	bd30      	pop	{r4, r5, pc}
 80050ee:	bf00      	nop
 80050f0:	2000000c 	.word	0x2000000c
 80050f4:	20000070 	.word	0x20000070

080050f8 <__submore>:
 80050f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050fc:	460c      	mov	r4, r1
 80050fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005104:	4299      	cmp	r1, r3
 8005106:	d11d      	bne.n	8005144 <__submore+0x4c>
 8005108:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800510c:	f000 f8a0 	bl	8005250 <_malloc_r>
 8005110:	b918      	cbnz	r0, 800511a <__submore+0x22>
 8005112:	f04f 30ff 	mov.w	r0, #4294967295
 8005116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800511a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800511e:	63a3      	str	r3, [r4, #56]	; 0x38
 8005120:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005124:	6360      	str	r0, [r4, #52]	; 0x34
 8005126:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800512a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800512e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8005132:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005136:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800513a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800513e:	6020      	str	r0, [r4, #0]
 8005140:	2000      	movs	r0, #0
 8005142:	e7e8      	b.n	8005116 <__submore+0x1e>
 8005144:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005146:	0077      	lsls	r7, r6, #1
 8005148:	463a      	mov	r2, r7
 800514a:	f000 f8db 	bl	8005304 <_realloc_r>
 800514e:	4605      	mov	r5, r0
 8005150:	2800      	cmp	r0, #0
 8005152:	d0de      	beq.n	8005112 <__submore+0x1a>
 8005154:	eb00 0806 	add.w	r8, r0, r6
 8005158:	4601      	mov	r1, r0
 800515a:	4632      	mov	r2, r6
 800515c:	4640      	mov	r0, r8
 800515e:	f7ff fb3d 	bl	80047dc <memcpy>
 8005162:	f8c4 8000 	str.w	r8, [r4]
 8005166:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800516a:	e7e9      	b.n	8005140 <__submore+0x48>

0800516c <__locale_ctype_ptr_l>:
 800516c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005170:	4770      	bx	lr
	...

08005174 <__locale_ctype_ptr>:
 8005174:	4b04      	ldr	r3, [pc, #16]	; (8005188 <__locale_ctype_ptr+0x14>)
 8005176:	4a05      	ldr	r2, [pc, #20]	; (800518c <__locale_ctype_ptr+0x18>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	2b00      	cmp	r3, #0
 800517e:	bf08      	it	eq
 8005180:	4613      	moveq	r3, r2
 8005182:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8005186:	4770      	bx	lr
 8005188:	2000000c 	.word	0x2000000c
 800518c:	20000070 	.word	0x20000070

08005190 <__ascii_mbtowc>:
 8005190:	b082      	sub	sp, #8
 8005192:	b901      	cbnz	r1, 8005196 <__ascii_mbtowc+0x6>
 8005194:	a901      	add	r1, sp, #4
 8005196:	b142      	cbz	r2, 80051aa <__ascii_mbtowc+0x1a>
 8005198:	b14b      	cbz	r3, 80051ae <__ascii_mbtowc+0x1e>
 800519a:	7813      	ldrb	r3, [r2, #0]
 800519c:	600b      	str	r3, [r1, #0]
 800519e:	7812      	ldrb	r2, [r2, #0]
 80051a0:	1c10      	adds	r0, r2, #0
 80051a2:	bf18      	it	ne
 80051a4:	2001      	movne	r0, #1
 80051a6:	b002      	add	sp, #8
 80051a8:	4770      	bx	lr
 80051aa:	4610      	mov	r0, r2
 80051ac:	e7fb      	b.n	80051a6 <__ascii_mbtowc+0x16>
 80051ae:	f06f 0001 	mvn.w	r0, #1
 80051b2:	e7f8      	b.n	80051a6 <__ascii_mbtowc+0x16>

080051b4 <_free_r>:
 80051b4:	b538      	push	{r3, r4, r5, lr}
 80051b6:	4605      	mov	r5, r0
 80051b8:	2900      	cmp	r1, #0
 80051ba:	d045      	beq.n	8005248 <_free_r+0x94>
 80051bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051c0:	1f0c      	subs	r4, r1, #4
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	bfb8      	it	lt
 80051c6:	18e4      	addlt	r4, r4, r3
 80051c8:	f000 f8df 	bl	800538a <__malloc_lock>
 80051cc:	4a1f      	ldr	r2, [pc, #124]	; (800524c <_free_r+0x98>)
 80051ce:	6813      	ldr	r3, [r2, #0]
 80051d0:	4610      	mov	r0, r2
 80051d2:	b933      	cbnz	r3, 80051e2 <_free_r+0x2e>
 80051d4:	6063      	str	r3, [r4, #4]
 80051d6:	6014      	str	r4, [r2, #0]
 80051d8:	4628      	mov	r0, r5
 80051da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051de:	f000 b8d5 	b.w	800538c <__malloc_unlock>
 80051e2:	42a3      	cmp	r3, r4
 80051e4:	d90c      	bls.n	8005200 <_free_r+0x4c>
 80051e6:	6821      	ldr	r1, [r4, #0]
 80051e8:	1862      	adds	r2, r4, r1
 80051ea:	4293      	cmp	r3, r2
 80051ec:	bf04      	itt	eq
 80051ee:	681a      	ldreq	r2, [r3, #0]
 80051f0:	685b      	ldreq	r3, [r3, #4]
 80051f2:	6063      	str	r3, [r4, #4]
 80051f4:	bf04      	itt	eq
 80051f6:	1852      	addeq	r2, r2, r1
 80051f8:	6022      	streq	r2, [r4, #0]
 80051fa:	6004      	str	r4, [r0, #0]
 80051fc:	e7ec      	b.n	80051d8 <_free_r+0x24>
 80051fe:	4613      	mov	r3, r2
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	b10a      	cbz	r2, 8005208 <_free_r+0x54>
 8005204:	42a2      	cmp	r2, r4
 8005206:	d9fa      	bls.n	80051fe <_free_r+0x4a>
 8005208:	6819      	ldr	r1, [r3, #0]
 800520a:	1858      	adds	r0, r3, r1
 800520c:	42a0      	cmp	r0, r4
 800520e:	d10b      	bne.n	8005228 <_free_r+0x74>
 8005210:	6820      	ldr	r0, [r4, #0]
 8005212:	4401      	add	r1, r0
 8005214:	1858      	adds	r0, r3, r1
 8005216:	4282      	cmp	r2, r0
 8005218:	6019      	str	r1, [r3, #0]
 800521a:	d1dd      	bne.n	80051d8 <_free_r+0x24>
 800521c:	6810      	ldr	r0, [r2, #0]
 800521e:	6852      	ldr	r2, [r2, #4]
 8005220:	605a      	str	r2, [r3, #4]
 8005222:	4401      	add	r1, r0
 8005224:	6019      	str	r1, [r3, #0]
 8005226:	e7d7      	b.n	80051d8 <_free_r+0x24>
 8005228:	d902      	bls.n	8005230 <_free_r+0x7c>
 800522a:	230c      	movs	r3, #12
 800522c:	602b      	str	r3, [r5, #0]
 800522e:	e7d3      	b.n	80051d8 <_free_r+0x24>
 8005230:	6820      	ldr	r0, [r4, #0]
 8005232:	1821      	adds	r1, r4, r0
 8005234:	428a      	cmp	r2, r1
 8005236:	bf04      	itt	eq
 8005238:	6811      	ldreq	r1, [r2, #0]
 800523a:	6852      	ldreq	r2, [r2, #4]
 800523c:	6062      	str	r2, [r4, #4]
 800523e:	bf04      	itt	eq
 8005240:	1809      	addeq	r1, r1, r0
 8005242:	6021      	streq	r1, [r4, #0]
 8005244:	605c      	str	r4, [r3, #4]
 8005246:	e7c7      	b.n	80051d8 <_free_r+0x24>
 8005248:	bd38      	pop	{r3, r4, r5, pc}
 800524a:	bf00      	nop
 800524c:	2000022c 	.word	0x2000022c

08005250 <_malloc_r>:
 8005250:	b570      	push	{r4, r5, r6, lr}
 8005252:	1ccd      	adds	r5, r1, #3
 8005254:	f025 0503 	bic.w	r5, r5, #3
 8005258:	3508      	adds	r5, #8
 800525a:	2d0c      	cmp	r5, #12
 800525c:	bf38      	it	cc
 800525e:	250c      	movcc	r5, #12
 8005260:	2d00      	cmp	r5, #0
 8005262:	4606      	mov	r6, r0
 8005264:	db01      	blt.n	800526a <_malloc_r+0x1a>
 8005266:	42a9      	cmp	r1, r5
 8005268:	d903      	bls.n	8005272 <_malloc_r+0x22>
 800526a:	230c      	movs	r3, #12
 800526c:	6033      	str	r3, [r6, #0]
 800526e:	2000      	movs	r0, #0
 8005270:	bd70      	pop	{r4, r5, r6, pc}
 8005272:	f000 f88a 	bl	800538a <__malloc_lock>
 8005276:	4a21      	ldr	r2, [pc, #132]	; (80052fc <_malloc_r+0xac>)
 8005278:	6814      	ldr	r4, [r2, #0]
 800527a:	4621      	mov	r1, r4
 800527c:	b991      	cbnz	r1, 80052a4 <_malloc_r+0x54>
 800527e:	4c20      	ldr	r4, [pc, #128]	; (8005300 <_malloc_r+0xb0>)
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	b91b      	cbnz	r3, 800528c <_malloc_r+0x3c>
 8005284:	4630      	mov	r0, r6
 8005286:	f000 f863 	bl	8005350 <_sbrk_r>
 800528a:	6020      	str	r0, [r4, #0]
 800528c:	4629      	mov	r1, r5
 800528e:	4630      	mov	r0, r6
 8005290:	f000 f85e 	bl	8005350 <_sbrk_r>
 8005294:	1c43      	adds	r3, r0, #1
 8005296:	d124      	bne.n	80052e2 <_malloc_r+0x92>
 8005298:	230c      	movs	r3, #12
 800529a:	6033      	str	r3, [r6, #0]
 800529c:	4630      	mov	r0, r6
 800529e:	f000 f875 	bl	800538c <__malloc_unlock>
 80052a2:	e7e4      	b.n	800526e <_malloc_r+0x1e>
 80052a4:	680b      	ldr	r3, [r1, #0]
 80052a6:	1b5b      	subs	r3, r3, r5
 80052a8:	d418      	bmi.n	80052dc <_malloc_r+0x8c>
 80052aa:	2b0b      	cmp	r3, #11
 80052ac:	d90f      	bls.n	80052ce <_malloc_r+0x7e>
 80052ae:	600b      	str	r3, [r1, #0]
 80052b0:	50cd      	str	r5, [r1, r3]
 80052b2:	18cc      	adds	r4, r1, r3
 80052b4:	4630      	mov	r0, r6
 80052b6:	f000 f869 	bl	800538c <__malloc_unlock>
 80052ba:	f104 000b 	add.w	r0, r4, #11
 80052be:	1d23      	adds	r3, r4, #4
 80052c0:	f020 0007 	bic.w	r0, r0, #7
 80052c4:	1ac3      	subs	r3, r0, r3
 80052c6:	d0d3      	beq.n	8005270 <_malloc_r+0x20>
 80052c8:	425a      	negs	r2, r3
 80052ca:	50e2      	str	r2, [r4, r3]
 80052cc:	e7d0      	b.n	8005270 <_malloc_r+0x20>
 80052ce:	428c      	cmp	r4, r1
 80052d0:	684b      	ldr	r3, [r1, #4]
 80052d2:	bf16      	itet	ne
 80052d4:	6063      	strne	r3, [r4, #4]
 80052d6:	6013      	streq	r3, [r2, #0]
 80052d8:	460c      	movne	r4, r1
 80052da:	e7eb      	b.n	80052b4 <_malloc_r+0x64>
 80052dc:	460c      	mov	r4, r1
 80052de:	6849      	ldr	r1, [r1, #4]
 80052e0:	e7cc      	b.n	800527c <_malloc_r+0x2c>
 80052e2:	1cc4      	adds	r4, r0, #3
 80052e4:	f024 0403 	bic.w	r4, r4, #3
 80052e8:	42a0      	cmp	r0, r4
 80052ea:	d005      	beq.n	80052f8 <_malloc_r+0xa8>
 80052ec:	1a21      	subs	r1, r4, r0
 80052ee:	4630      	mov	r0, r6
 80052f0:	f000 f82e 	bl	8005350 <_sbrk_r>
 80052f4:	3001      	adds	r0, #1
 80052f6:	d0cf      	beq.n	8005298 <_malloc_r+0x48>
 80052f8:	6025      	str	r5, [r4, #0]
 80052fa:	e7db      	b.n	80052b4 <_malloc_r+0x64>
 80052fc:	2000022c 	.word	0x2000022c
 8005300:	20000230 	.word	0x20000230

08005304 <_realloc_r>:
 8005304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005306:	4607      	mov	r7, r0
 8005308:	4614      	mov	r4, r2
 800530a:	460e      	mov	r6, r1
 800530c:	b921      	cbnz	r1, 8005318 <_realloc_r+0x14>
 800530e:	4611      	mov	r1, r2
 8005310:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005314:	f7ff bf9c 	b.w	8005250 <_malloc_r>
 8005318:	b922      	cbnz	r2, 8005324 <_realloc_r+0x20>
 800531a:	f7ff ff4b 	bl	80051b4 <_free_r>
 800531e:	4625      	mov	r5, r4
 8005320:	4628      	mov	r0, r5
 8005322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005324:	f000 f833 	bl	800538e <_malloc_usable_size_r>
 8005328:	42a0      	cmp	r0, r4
 800532a:	d20f      	bcs.n	800534c <_realloc_r+0x48>
 800532c:	4621      	mov	r1, r4
 800532e:	4638      	mov	r0, r7
 8005330:	f7ff ff8e 	bl	8005250 <_malloc_r>
 8005334:	4605      	mov	r5, r0
 8005336:	2800      	cmp	r0, #0
 8005338:	d0f2      	beq.n	8005320 <_realloc_r+0x1c>
 800533a:	4631      	mov	r1, r6
 800533c:	4622      	mov	r2, r4
 800533e:	f7ff fa4d 	bl	80047dc <memcpy>
 8005342:	4631      	mov	r1, r6
 8005344:	4638      	mov	r0, r7
 8005346:	f7ff ff35 	bl	80051b4 <_free_r>
 800534a:	e7e9      	b.n	8005320 <_realloc_r+0x1c>
 800534c:	4635      	mov	r5, r6
 800534e:	e7e7      	b.n	8005320 <_realloc_r+0x1c>

08005350 <_sbrk_r>:
 8005350:	b538      	push	{r3, r4, r5, lr}
 8005352:	4c06      	ldr	r4, [pc, #24]	; (800536c <_sbrk_r+0x1c>)
 8005354:	2300      	movs	r3, #0
 8005356:	4605      	mov	r5, r0
 8005358:	4608      	mov	r0, r1
 800535a:	6023      	str	r3, [r4, #0]
 800535c:	f7fc fbbc 	bl	8001ad8 <_sbrk>
 8005360:	1c43      	adds	r3, r0, #1
 8005362:	d102      	bne.n	800536a <_sbrk_r+0x1a>
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	b103      	cbz	r3, 800536a <_sbrk_r+0x1a>
 8005368:	602b      	str	r3, [r5, #0]
 800536a:	bd38      	pop	{r3, r4, r5, pc}
 800536c:	200009ec 	.word	0x200009ec

08005370 <__ascii_wctomb>:
 8005370:	b149      	cbz	r1, 8005386 <__ascii_wctomb+0x16>
 8005372:	2aff      	cmp	r2, #255	; 0xff
 8005374:	bf85      	ittet	hi
 8005376:	238a      	movhi	r3, #138	; 0x8a
 8005378:	6003      	strhi	r3, [r0, #0]
 800537a:	700a      	strbls	r2, [r1, #0]
 800537c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005380:	bf98      	it	ls
 8005382:	2001      	movls	r0, #1
 8005384:	4770      	bx	lr
 8005386:	4608      	mov	r0, r1
 8005388:	4770      	bx	lr

0800538a <__malloc_lock>:
 800538a:	4770      	bx	lr

0800538c <__malloc_unlock>:
 800538c:	4770      	bx	lr

0800538e <_malloc_usable_size_r>:
 800538e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005392:	1f18      	subs	r0, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	bfbc      	itt	lt
 8005398:	580b      	ldrlt	r3, [r1, r0]
 800539a:	18c0      	addlt	r0, r0, r3
 800539c:	4770      	bx	lr
	...

080053a0 <_init>:
 80053a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a2:	bf00      	nop
 80053a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053a6:	bc08      	pop	{r3}
 80053a8:	469e      	mov	lr, r3
 80053aa:	4770      	bx	lr

080053ac <_fini>:
 80053ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ae:	bf00      	nop
 80053b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b2:	bc08      	pop	{r3}
 80053b4:	469e      	mov	lr, r3
 80053b6:	4770      	bx	lr
